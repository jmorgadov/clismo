
client Member:

    extract_val = 5
    deposit_val = 8
    extract_time = 10
    deposit_time = 8

    init():
        set(self, extract_val, get(self, extract_val) * randint(20, 50))
        set(self, deposit_val, get(self, deposit_val) * randint(10, 100))


    possible(extract_time):
        return get(self, extract_time) * randint(10, 50)

    possible(deposit_time):
        return get(self, deposit_time) * randint(10, 50)

server ATM1:
    total = 0

    attend_client():
        var t = 1 * get(current_client, extract_time)
        set(self, total, get(self, total) + t)
        return t

server ATM2:
    total = 0

    attend_client():
        var t = 3 * get(current_client, extract_time)
        set(self, total, get(self, total) + t)
        return t

server ATM3:
    total = 0

    attend_client():
        var t = 4 * get(current_client, extract_time)
        set(self, total, get(self, total) + t)
        return t

step P1:
    servers = [ATM1, ATM2, ATM2, ATM3, ATM3]

    possible(servers):
        var s = [ATM1, ATM2,  ATM3]
        var count = len(get(self, servers))
        var new_servers = list("server")
        loop _ from 0 to count:
            var r = randint(0, count)
            new_servers = append(new_servers, get_at(s, r))
        return new_servers

simulation Bank:
    mode = "run"
    steps = [P1]
    client_limit = 50

    max_iter = 20
    pop_size = 3
    mut_prob = 0.4
    new_rand = 10

    arrive(Member):
        return 5
    
    minimize():
        var servers = get(get_at(get(self, steps), 0), servers)
        var count = len(servers)
        var total = 0
        loop i from 0 to count:
            total = total + get(get_at(servers, i), total)
        return total






