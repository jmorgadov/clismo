0
NEWLINE
1
0
$
program -> 
0
client
2
0
server_def
3
0
client_def
4
0
sim_def
5
0
step
6
0
server
7
0
step_def
8
0
simulation
9
0
program
10
0
obj_def
11
1
NEWLINE
1
1
$
program -> 
1
client
2
1
server_def
3
1
client_def
4
1
sim_def
5
1
step
6
1
server
7
1
step_def
8
1
simulation
9
1
program
12
1
obj_def
11
2
NAME
13
3
$
obj_def -> server_def
3
NEWLINE
obj_def -> server_def
3
step
obj_def -> server_def
3
client
obj_def -> server_def
3
simulation
obj_def -> server_def
3
server
obj_def -> server_def
4
simulation
obj_def -> client_def
4
client
obj_def -> client_def
4
NEWLINE
obj_def -> client_def
4
server
obj_def -> client_def
4
step
obj_def -> client_def
4
$
obj_def -> client_def
5
NEWLINE
obj_def -> sim_def
5
server
obj_def -> sim_def
5
client
obj_def -> sim_def
5
step
obj_def -> sim_def
5
simulation
obj_def -> sim_def
5
$
obj_def -> sim_def
6
NAME
14
7
NAME
15
8
server
obj_def -> step_def
8
client
obj_def -> step_def
8
step
obj_def -> step_def
8
simulation
obj_def -> step_def
8
NEWLINE
obj_def -> step_def
8
$
obj_def -> step_def
9
NAME
16
10
$
OK
11
NEWLINE
1
11
$
program -> 
11
client
2
11
server_def
3
11
client_def
4
11
sim_def
5
11
program
17
11
step
6
11
server
7
11
step_def
8
11
simulation
9
11
obj_def
11
12
$
program -> NEWLINE program
13
:
18
14
:
19
15
:
20
16
:
21
17
$
program -> obj_def program
18
obj_def_body
22
18
NEWLINE
23
19
NEWLINE
23
19
obj_def_body
24
20
obj_def_body
25
20
NEWLINE
23
21
NEWLINE
23
21
obj_def_body
26
22
step
client_def -> client NAME : obj_def_body
22
client
client_def -> client NAME : obj_def_body
22
NEWLINE
client_def -> client NAME : obj_def_body
22
$
client_def -> client NAME : obj_def_body
22
simulation
client_def -> client NAME : obj_def_body
22
server
client_def -> client NAME : obj_def_body
23
INDENT
27
24
$
step_def -> step NAME : obj_def_body
24
step
step_def -> step NAME : obj_def_body
24
client
step_def -> step NAME : obj_def_body
24
simulation
step_def -> step NAME : obj_def_body
24
NEWLINE
step_def -> step NAME : obj_def_body
24
server
step_def -> step NAME : obj_def_body
25
server
server_def -> server NAME : obj_def_body
25
$
server_def -> server NAME : obj_def_body
25
client
server_def -> server NAME : obj_def_body
25
NEWLINE
server_def -> server NAME : obj_def_body
25
simulation
server_def -> server NAME : obj_def_body
25
step
server_def -> server NAME : obj_def_body
26
client
sim_def -> simulation NAME : obj_def_body
26
NEWLINE
sim_def -> simulation NAME : obj_def_body
26
$
sim_def -> simulation NAME : obj_def_body
26
simulation
sim_def -> simulation NAME : obj_def_body
26
server
sim_def -> simulation NAME : obj_def_body
26
step
sim_def -> simulation NAME : obj_def_body
27
NAME
28
27
func_def
29
27
obj_stmt_list
30
27
DEDENT
obj_stmt_list -> 
27
NEWLINE
31
27
obj_stmt
32
28
(
33
28
=
34
29
NEWLINE
obj_stmt -> func_def
29
DEDENT
obj_stmt -> func_def
29
NAME
obj_stmt -> func_def
30
DEDENT
35
31
NAME
28
31
func_def
29
31
DEDENT
obj_stmt_list -> 
31
obj_stmt_list
36
31
NEWLINE
31
31
obj_stmt
32
32
NAME
28
32
func_def
29
32
DEDENT
obj_stmt_list -> 
32
obj_stmt_list
37
32
NEWLINE
31
32
obj_stmt
32
33
name_list
38
33
)
name_list -> 
33
NAME
39
34
atom
40
34
False
41
34
STRING
42
34
expr
43
34
call
44
34
-
45
34
term
46
34
factor
47
34
NAME
48
34
power
49
34
xor_expr
50
34
+
51
34
None
52
34
arith_expr
53
34
~
54
34
and_expr
55
34
shift_expr
56
34
and_test
57
34
[
58
34
NUMBER
59
34
comparison
60
34
not
61
34
True
62
34
or_test
63
34
test
64
34
not_test
65
35
$
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
NEWLINE
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
step
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
client
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
simulation
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
server
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
36
DEDENT
obj_stmt_list -> NEWLINE obj_stmt_list
37
DEDENT
obj_stmt_list -> obj_stmt obj_stmt_list
38
)
66
39
)
name_list -> 
39
name_list
67
39
NAME
39
40
<
power -> atom
40
**
68
40
>>
power -> atom
40
DEDENT
power -> atom
40
and
power -> atom
40
/
power -> atom
40
>=
power -> atom
40
<=
power -> atom
40
==
power -> atom
40
NEWLINE
power -> atom
40
//
power -> atom
40
<<
power -> atom
40
-
power -> atom
40
%
power -> atom
40
^
power -> atom
40
!=
power -> atom
40
*
power -> atom
40
or
power -> atom
40
NAME
power -> atom
40
+
power -> atom
40
&
power -> atom
40
>
power -> atom
40
|
power -> atom
41
==
atom -> False
41
or
atom -> False
41
|
atom -> False
41
%
atom -> False
41
>>
atom -> False
41
NEWLINE
atom -> False
41
DEDENT
atom -> False
41
-
atom -> False
41
<<
atom -> False
41
**
atom -> False
41
^
atom -> False
41
and
atom -> False
41
!=
atom -> False
41
>=
atom -> False
41
>
atom -> False
41
/
atom -> False
41
*
atom -> False
41
<=
atom -> False
41
//
atom -> False
41
&
atom -> False
41
<
atom -> False
41
+
atom -> False
41
NAME
atom -> False
42
NAME
atom -> STRING
42
*
atom -> STRING
42
<<
atom -> STRING
42
!=
atom -> STRING
42
and
atom -> STRING
42
NEWLINE
atom -> STRING
42
//
atom -> STRING
42
>=
atom -> STRING
42
&
atom -> STRING
42
-
atom -> STRING
42
+
atom -> STRING
42
**
atom -> STRING
42
>>
atom -> STRING
42
DEDENT
atom -> STRING
42
/
atom -> STRING
42
|
atom -> STRING
42
^
atom -> STRING
42
or
atom -> STRING
42
%
atom -> STRING
42
==
atom -> STRING
42
<=
atom -> STRING
42
>
atom -> STRING
42
<
atom -> STRING
43
!=
69
43
==
70
43
<
71
43
<=
72
43
>
73
43
>=
74
43
comp_op
75
43
DEDENT
comparison -> expr
43
or
comparison -> expr
43
NEWLINE
comparison -> expr
43
and
comparison -> expr
43
NAME
comparison -> expr
44
**
atom -> call
44
&
atom -> call
44
>
atom -> call
44
NEWLINE
atom -> call
44
<
atom -> call
44
and
atom -> call
44
>>
atom -> call
44
>=
atom -> call
44
<<
atom -> call
44
^
atom -> call
44
//
atom -> call
44
%
atom -> call
44
-
atom -> call
44
*
atom -> call
44
NAME
atom -> call
44
<=
atom -> call
44
|
atom -> call
44
or
atom -> call
44
/
atom -> call
44
==
atom -> call
44
+
atom -> call
44
DEDENT
atom -> call
44
!=
atom -> call
45
atom
40
45
-
45
45
False
41
45
STRING
42
45
power
49
45
call
44
45
NAME
48
45
True
62
45
+
51
45
None
52
45
~
54
45
[
58
45
factor
76
45
NUMBER
59
46
^
arith_expr -> term
46
<
arith_expr -> term
46
+
77
46
>=
arith_expr -> term
46
<<
arith_expr -> term
46
&
arith_expr -> term
46
-
78
46
DEDENT
arith_expr -> term
46
and
arith_expr -> term
46
or
arith_expr -> term
46
>>
arith_expr -> term
46
NAME
arith_expr -> term
46
|
arith_expr -> term
46
>
arith_expr -> term
46
NEWLINE
arith_expr -> term
46
<=
arith_expr -> term
46
!=
arith_expr -> term
46
==
arith_expr -> term
47
NEWLINE
term -> factor
47
//
79
47
*
80
47
/
81
47
%
82
47
+
term -> factor
47
<
term -> factor
47
==
term -> factor
47
<<
term -> factor
47
>
term -> factor
47
&
term -> factor
47
^
term -> factor
47
NAME
term -> factor
47
>=
term -> factor
47
or
term -> factor
47
and
term -> factor
47
<=
term -> factor
47
|
term -> factor
47
-
term -> factor
47
!=
term -> factor
47
>>
term -> factor
47
DEDENT
term -> factor
48
&
atom -> NAME
48
>=
atom -> NAME
48
(
83
48
<=
atom -> NAME
48
<
atom -> NAME
48
>
atom -> NAME
48
NEWLINE
atom -> NAME
48
NAME
atom -> NAME
48
and
atom -> NAME
48
+
atom -> NAME
48
^
atom -> NAME
48
==
atom -> NAME
48
/
atom -> NAME
48
*
atom -> NAME
48
or
atom -> NAME
48
-
atom -> NAME
48
<<
atom -> NAME
48
%
atom -> NAME
48
DEDENT
atom -> NAME
48
**
atom -> NAME
48
>>
atom -> NAME
48
!=
atom -> NAME
48
//
atom -> NAME
48
|
atom -> NAME
49
>=
factor -> power
49
or
factor -> power
49
==
factor -> power
49
NAME
factor -> power
49
!=
factor -> power
49
*
factor -> power
49
//
factor -> power
49
-
factor -> power
49
>
factor -> power
49
+
factor -> power
49
DEDENT
factor -> power
49
^
factor -> power
49
|
factor -> power
49
&
factor -> power
49
%
factor -> power
49
>>
factor -> power
49
<<
factor -> power
49
<
factor -> power
49
/
factor -> power
49
and
factor -> power
49
<=
factor -> power
49
NEWLINE
factor -> power
50
|
84
50
>=
expr -> xor_expr
50
NAME
expr -> xor_expr
50
<=
expr -> xor_expr
50
DEDENT
expr -> xor_expr
50
or
expr -> xor_expr
50
>
expr -> xor_expr
50
==
expr -> xor_expr
50
<
expr -> xor_expr
50
!=
expr -> xor_expr
50
NEWLINE
expr -> xor_expr
50
and
expr -> xor_expr
51
atom
40
51
-
45
51
False
41
51
STRING
42
51
power
49
51
call
44
51
NAME
48
51
True
62
51
+
51
51
None
52
51
factor
85
51
~
54
51
[
58
51
NUMBER
59
52
==
atom -> None
52
NAME
atom -> None
52
/
atom -> None
52
!=
atom -> None
52
>=
atom -> None
52
>>
atom -> None
52
^
atom -> None
52
DEDENT
atom -> None
52
+
atom -> None
52
**
atom -> None
52
<=
atom -> None
52
NEWLINE
atom -> None
52
//
atom -> None
52
|
atom -> None
52
or
atom -> None
52
%
atom -> None
52
>
atom -> None
52
-
atom -> None
52
and
atom -> None
52
&
atom -> None
52
<<
atom -> None
52
*
atom -> None
52
<
atom -> None
53
<<
86
53
>>
87
53
DEDENT
shift_expr -> arith_expr
53
<
shift_expr -> arith_expr
53
NEWLINE
shift_expr -> arith_expr
53
>
shift_expr -> arith_expr
53
>=
shift_expr -> arith_expr
53
or
shift_expr -> arith_expr
53
&
shift_expr -> arith_expr
53
^
shift_expr -> arith_expr
53
<=
shift_expr -> arith_expr
53
and
shift_expr -> arith_expr
53
NAME
shift_expr -> arith_expr
53
|
shift_expr -> arith_expr
53
==
shift_expr -> arith_expr
53
!=
shift_expr -> arith_expr
54
atom
40
54
-
45
54
False
41
54
STRING
42
54
power
49
54
call
44
54
factor
88
54
NAME
48
54
True
62
54
+
51
54
None
52
54
~
54
54
[
58
54
NUMBER
59
55
^
89
55
<=
xor_expr -> and_expr
55
and
xor_expr -> and_expr
55
!=
xor_expr -> and_expr
55
NAME
xor_expr -> and_expr
55
>
xor_expr -> and_expr
55
NEWLINE
xor_expr -> and_expr
55
or
xor_expr -> and_expr
55
>=
xor_expr -> and_expr
55
DEDENT
xor_expr -> and_expr
55
|
xor_expr -> and_expr
55
==
xor_expr -> and_expr
55
<
xor_expr -> and_expr
56
or
and_expr -> shift_expr
56
DEDENT
and_expr -> shift_expr
56
&
90
56
>
and_expr -> shift_expr
56
and
and_expr -> shift_expr
56
!=
and_expr -> shift_expr
56
^
and_expr -> shift_expr
56
|
and_expr -> shift_expr
56
<
and_expr -> shift_expr
56
NAME
and_expr -> shift_expr
56
==
and_expr -> shift_expr
56
NEWLINE
and_expr -> shift_expr
56
>=
and_expr -> shift_expr
56
<=
and_expr -> shift_expr
57
or
91
57
NAME
or_test -> and_test
57
DEDENT
or_test -> and_test
57
NEWLINE
or_test -> and_test
58
atom
92
58
False
93
58
STRING
94
58
expr
95
58
call
96
58
-
97
58
term
98
58
factor
99
58
NAME
100
58
power
101
58
+
102
58
None
103
58
or_test
104
58
xor_expr
105
58
arith_expr
106
58
not_test
107
58
test_list
108
58
and_expr
109
58
shift_expr
110
58
~
111
58
[
112
58
NUMBER
113
58
comparison
114
58
True
115
58
not
116
58
and_test
117
58
test
118
59
//
atom -> NUMBER
59
DEDENT
atom -> NUMBER
59
>>
atom -> NUMBER
59
>
atom -> NUMBER
59
and
atom -> NUMBER
59
&
atom -> NUMBER
59
or
atom -> NUMBER
59
-
atom -> NUMBER
59
%
atom -> NUMBER
59
<
atom -> NUMBER
59
NAME
atom -> NUMBER
59
NEWLINE
atom -> NUMBER
59
**
atom -> NUMBER
59
!=
atom -> NUMBER
59
*
atom -> NUMBER
59
^
atom -> NUMBER
59
|
atom -> NUMBER
59
+
atom -> NUMBER
59
>=
atom -> NUMBER
59
/
atom -> NUMBER
59
<<
atom -> NUMBER
59
<=
atom -> NUMBER
59
==
atom -> NUMBER
60
NAME
not_test -> comparison
60
or
not_test -> comparison
60
DEDENT
not_test -> comparison
60
NEWLINE
not_test -> comparison
60
and
not_test -> comparison
61
atom
40
61
False
41
61
STRING
42
61
expr
43
61
call
44
61
-
45
61
term
46
61
factor
47
61
NAME
48
61
power
49
61
xor_expr
50
61
+
51
61
None
52
61
arith_expr
53
61
~
54
61
and_expr
55
61
shift_expr
56
61
[
58
61
NUMBER
59
61
comparison
60
61
not_test
119
61
not
61
61
True
62
62
//
atom -> True
62
>>
atom -> True
62
or
atom -> True
62
>=
atom -> True
62
>
atom -> True
62
<
atom -> True
62
<<
atom -> True
62
*
atom -> True
62
-
atom -> True
62
NAME
atom -> True
62
!=
atom -> True
62
%
atom -> True
62
+
atom -> True
62
&
atom -> True
62
and
atom -> True
62
==
atom -> True
62
NEWLINE
atom -> True
62
|
atom -> True
62
^
atom -> True
62
DEDENT
atom -> True
62
**
atom -> True
62
<=
atom -> True
62
/
atom -> True
63
NAME
test -> or_test
63
DEDENT
test -> or_test
63
NEWLINE
test -> or_test
64
NAME
obj_stmt -> NAME = test
64
NEWLINE
obj_stmt -> NAME = test
64
DEDENT
obj_stmt -> NAME = test
65
and
120
65
or
and_test -> not_test
65
NEWLINE
and_test -> not_test
65
NAME
and_test -> not_test
65
DEDENT
and_test -> not_test
66
:
121
67
)
name_list -> NAME name_list
68
atom
40
68
-
45
68
False
41
68
STRING
42
68
power
49
68
call
44
68
NAME
48
68
True
62
68
+
51
68
None
52
68
~
54
68
factor
122
68
[
58
68
NUMBER
59
69
STRING
comp_op -> !=
69
+
comp_op -> !=
69
-
comp_op -> !=
69
False
comp_op -> !=
69
NAME
comp_op -> !=
69
True
comp_op -> !=
69
NUMBER
comp_op -> !=
69
~
comp_op -> !=
69
None
comp_op -> !=
69
[
comp_op -> !=
70
[
comp_op -> ==
70
NAME
comp_op -> ==
70
None
comp_op -> ==
70
STRING
comp_op -> ==
70
NUMBER
comp_op -> ==
70
+
comp_op -> ==
70
-
comp_op -> ==
70
False
comp_op -> ==
70
True
comp_op -> ==
70
~
comp_op -> ==
71
None
comp_op -> <
71
NUMBER
comp_op -> <
71
NAME
comp_op -> <
71
+
comp_op -> <
71
~
comp_op -> <
71
STRING
comp_op -> <
71
[
comp_op -> <
71
False
comp_op -> <
71
True
comp_op -> <
71
-
comp_op -> <
72
-
comp_op -> <=
72
None
comp_op -> <=
72
~
comp_op -> <=
72
True
comp_op -> <=
72
+
comp_op -> <=
72
False
comp_op -> <=
72
NAME
comp_op -> <=
72
STRING
comp_op -> <=
72
NUMBER
comp_op -> <=
72
[
comp_op -> <=
73
False
comp_op -> >
73
~
comp_op -> >
73
None
comp_op -> >
73
-
comp_op -> >
73
STRING
comp_op -> >
73
+
comp_op -> >
73
NUMBER
comp_op -> >
73
[
comp_op -> >
73
True
comp_op -> >
73
NAME
comp_op -> >
74
NUMBER
comp_op -> >=
74
True
comp_op -> >=
74
STRING
comp_op -> >=
74
[
comp_op -> >=
74
False
comp_op -> >=
74
+
comp_op -> >=
74
None
comp_op -> >=
74
-
comp_op -> >=
74
NAME
comp_op -> >=
74
~
comp_op -> >=
75
atom
40
75
False
41
75
STRING
42
75
expr
43
75
call
44
75
-
45
75
term
46
75
factor
47
75
NAME
48
75
power
49
75
xor_expr
50
75
+
51
75
None
52
75
arith_expr
53
75
~
54
75
and_expr
55
75
shift_expr
56
75
[
58
75
NUMBER
59
75
True
62
75
comparison
123
76
<<
factor -> - factor
76
NAME
factor -> - factor
76
/
factor -> - factor
76
DEDENT
factor -> - factor
76
-
factor -> - factor
76
>
factor -> - factor
76
^
factor -> - factor
76
+
factor -> - factor
76
*
factor -> - factor
76
>=
factor -> - factor
76
<
factor -> - factor
76
|
factor -> - factor
76
and
factor -> - factor
76
NEWLINE
factor -> - factor
76
==
factor -> - factor
76
<=
factor -> - factor
76
>>
factor -> - factor
76
&
factor -> - factor
76
%
factor -> - factor
76
//
factor -> - factor
76
or
factor -> - factor
76
!=
factor -> - factor
77
atom
40
77
term
46
77
-
45
77
False
41
77
STRING
42
77
power
49
77
call
44
77
factor
47
77
NAME
48
77
True
62
77
+
51
77
None
52
77
~
54
77
arith_expr
124
77
[
58
77
NUMBER
59
78
atom
40
78
term
46
78
-
45
78
False
41
78
STRING
42
78
power
49
78
call
44
78
factor
47
78
NAME
48
78
True
62
78
arith_expr
125
78
+
51
78
None
52
78
~
54
78
[
58
78
NUMBER
59
79
atom
40
79
-
45
79
False
41
79
STRING
42
79
power
49
79
call
44
79
factor
47
79
NAME
48
79
True
62
79
+
51
79
None
52
79
~
54
79
term
126
79
[
58
79
NUMBER
59
80
term
127
80
atom
40
80
-
45
80
False
41
80
STRING
42
80
power
49
80
factor
47
80
call
44
80
NAME
48
80
True
62
80
+
51
80
None
52
80
~
54
80
[
58
80
NUMBER
59
81
atom
40
81
-
45
81
False
41
81
STRING
42
81
power
49
81
call
44
81
factor
47
81
NAME
48
81
True
62
81
+
51
81
None
52
81
~
54
81
term
128
81
[
58
81
NUMBER
59
82
atom
40
82
-
45
82
False
41
82
STRING
42
82
power
49
82
call
44
82
factor
47
82
NAME
48
82
True
62
82
+
51
82
None
52
82
term
129
82
~
54
82
[
58
82
NUMBER
59
83
)
130
83
atom
131
83
False
132
83
STRING
133
83
expr
134
83
call
135
83
-
136
83
term
137
83
factor
138
83
NAME
139
83
power
140
83
+
141
83
None
142
83
xor_expr
143
83
arith_expr
144
83
not_test
145
83
~
146
83
and_expr
147
83
shift_expr
148
83
test_list
149
83
[
150
83
NUMBER
151
83
comparison
152
83
or_test
153
83
True
154
83
and_test
155
83
not
156
83
test
157
84
atom
40
84
False
41
84
STRING
42
84
call
44
84
-
45
84
term
46
84
factor
47
84
NAME
48
84
expr
158
84
power
49
84
xor_expr
50
84
+
51
84
None
52
84
arith_expr
53
84
~
54
84
and_expr
55
84
shift_expr
56
84
[
58
84
NUMBER
59
84
True
62
85
//
factor -> + factor
85
*
factor -> + factor
85
DEDENT
factor -> + factor
85
>=
factor -> + factor
85
|
factor -> + factor
85
NEWLINE
factor -> + factor
85
<<
factor -> + factor
85
>
factor -> + factor
85
and
factor -> + factor
85
<
factor -> + factor
85
==
factor -> + factor
85
NAME
factor -> + factor
85
>>
factor -> + factor
85
<=
factor -> + factor
85
/
factor -> + factor
85
^
factor -> + factor
85
or
factor -> + factor
85
&
factor -> + factor
85
%
factor -> + factor
85
-
factor -> + factor
85
+
factor -> + factor
85
!=
factor -> + factor
86
atom
40
86
term
46
86
-
45
86
False
41
86
STRING
42
86
power
49
86
shift_expr
159
86
factor
47
86
call
44
86
NAME
48
86
arith_expr
53
86
True
62
86
+
51
86
None
52
86
~
54
86
[
58
86
NUMBER
59
87
atom
40
87
term
46
87
-
45
87
False
41
87
STRING
42
87
shift_expr
160
87
power
49
87
call
44
87
factor
47
87
NAME
48
87
arith_expr
53
87
True
62
87
+
51
87
None
52
87
~
54
87
[
58
87
NUMBER
59
88
NEWLINE
factor -> ~ factor
88
<<
factor -> ~ factor
88
&
factor -> ~ factor
88
>
factor -> ~ factor
88
!=
factor -> ~ factor
88
and
factor -> ~ factor
88
-
factor -> ~ factor
88
or
factor -> ~ factor
88
>>
factor -> ~ factor
88
/
factor -> ~ factor
88
%
factor -> ~ factor
88
^
factor -> ~ factor
88
//
factor -> ~ factor
88
NAME
factor -> ~ factor
88
|
factor -> ~ factor
88
+
factor -> ~ factor
88
==
factor -> ~ factor
88
<=
factor -> ~ factor
88
>=
factor -> ~ factor
88
DEDENT
factor -> ~ factor
88
<
factor -> ~ factor
88
*
factor -> ~ factor
89
atom
40
89
term
46
89
xor_expr
161
89
-
45
89
False
41
89
STRING
42
89
power
49
89
call
44
89
factor
47
89
NAME
48
89
shift_expr
56
89
arith_expr
53
89
True
62
89
+
51
89
None
52
89
~
54
89
and_expr
55
89
[
58
89
NUMBER
59
90
atom
40
90
term
46
90
-
45
90
False
41
90
STRING
42
90
power
49
90
call
44
90
factor
47
90
NAME
48
90
shift_expr
56
90
arith_expr
53
90
True
62
90
+
51
90
None
52
90
~
54
90
and_expr
162
90
[
58
90
NUMBER
59
91
atom
40
91
False
41
91
STRING
42
91
expr
43
91
call
44
91
-
45
91
term
46
91
factor
47
91
NAME
48
91
power
49
91
xor_expr
50
91
+
51
91
None
52
91
arith_expr
53
91
~
54
91
and_expr
55
91
shift_expr
56
91
and_test
57
91
[
58
91
NUMBER
59
91
comparison
60
91
not
61
91
True
62
91
or_test
163
91
not_test
65
92
<
power -> atom
92
**
164
92
>>
power -> atom
92
and
power -> atom
92
/
power -> atom
92
>=
power -> atom
92
<=
power -> atom
92
==
power -> atom
92
//
power -> atom
92
<<
power -> atom
92
-
power -> atom
92
%
power -> atom
92
^
power -> atom
92
!=
power -> atom
92
*
power -> atom
92
or
power -> atom
92
+
power -> atom
92
>
power -> atom
92
&
power -> atom
92
,
power -> atom
92
]
power -> atom
92
|
power -> atom
93
==
atom -> False
93
or
atom -> False
93
|
atom -> False
93
%
atom -> False
93
>>
atom -> False
93
-
atom -> False
93
<<
atom -> False
93
**
atom -> False
93
^
atom -> False
93
and
atom -> False
93
,
atom -> False
93
!=
atom -> False
93
>=
atom -> False
93
>
atom -> False
93
]
atom -> False
93
/
atom -> False
93
*
atom -> False
93
<=
atom -> False
93
//
atom -> False
93
&
atom -> False
93
<
atom -> False
93
+
atom -> False
94
]
atom -> STRING
94
*
atom -> STRING
94
<<
atom -> STRING
94
!=
atom -> STRING
94
and
atom -> STRING
94
//
atom -> STRING
94
>=
atom -> STRING
94
&
atom -> STRING
94
,
atom -> STRING
94
-
atom -> STRING
94
+
atom -> STRING
94
**
atom -> STRING
94
>>
atom -> STRING
94
/
atom -> STRING
94
|
atom -> STRING
94
^
atom -> STRING
94
or
atom -> STRING
94
%
atom -> STRING
94
==
atom -> STRING
94
<=
atom -> STRING
94
>
atom -> STRING
94
<
atom -> STRING
95
!=
69
95
==
70
95
<
71
95
<=
72
95
>
73
95
,
comparison -> expr
95
>=
74
95
comp_op
165
95
or
comparison -> expr
95
]
comparison -> expr
95
and
comparison -> expr
96
**
atom -> call
96
&
atom -> call
96
>
atom -> call
96
<
atom -> call
96
and
atom -> call
96
>>
atom -> call
96
>=
atom -> call
96
<<
atom -> call
96
^
atom -> call
96
//
atom -> call
96
%
atom -> call
96
-
atom -> call
96
*
atom -> call
96
<=
atom -> call
96
,
atom -> call
96
or
atom -> call
96
]
atom -> call
96
|
atom -> call
96
/
atom -> call
96
==
atom -> call
96
+
atom -> call
96
!=
atom -> call
97
atom
92
97
False
93
97
STRING
94
97
power
101
97
call
96
97
-
97
97
NAME
100
97
True
115
97
+
102
97
None
103
97
~
111
97
[
112
97
factor
166
97
NUMBER
113
98
-
167
98
^
arith_expr -> term
98
<
arith_expr -> term
98
+
168
98
>=
arith_expr -> term
98
<<
arith_expr -> term
98
&
arith_expr -> term
98
]
arith_expr -> term
98
and
arith_expr -> term
98
or
arith_expr -> term
98
>>
arith_expr -> term
98
|
arith_expr -> term
98
>
arith_expr -> term
98
,
arith_expr -> term
98
<=
arith_expr -> term
98
!=
arith_expr -> term
98
==
arith_expr -> term
99
//
169
99
*
170
99
/
171
99
%
172
99
+
term -> factor
99
<
term -> factor
99
==
term -> factor
99
<<
term -> factor
99
>
term -> factor
99
&
term -> factor
99
^
term -> factor
99
>=
term -> factor
99
or
term -> factor
99
and
term -> factor
99
<=
term -> factor
99
]
term -> factor
99
|
term -> factor
99
-
term -> factor
99
,
term -> factor
99
!=
term -> factor
99
>>
term -> factor
100
&
atom -> NAME
100
>=
atom -> NAME
100
(
173
100
<=
atom -> NAME
100
<
atom -> NAME
100
>
atom -> NAME
100
and
atom -> NAME
100
+
atom -> NAME
100
^
atom -> NAME
100
==
atom -> NAME
100
/
atom -> NAME
100
*
atom -> NAME
100
or
atom -> NAME
100
-
atom -> NAME
100
<<
atom -> NAME
100
%
atom -> NAME
100
,
atom -> NAME
100
**
atom -> NAME
100
>>
atom -> NAME
100
]
atom -> NAME
100
!=
atom -> NAME
100
//
atom -> NAME
100
|
atom -> NAME
101
>=
factor -> power
101
or
factor -> power
101
==
factor -> power
101
,
factor -> power
101
!=
factor -> power
101
*
factor -> power
101
//
factor -> power
101
-
factor -> power
101
>
factor -> power
101
+
factor -> power
101
^
factor -> power
101
|
factor -> power
101
&
factor -> power
101
%
factor -> power
101
>>
factor -> power
101
<<
factor -> power
101
<
factor -> power
101
/
factor -> power
101
and
factor -> power
101
]
factor -> power
101
<=
factor -> power
102
atom
92
102
False
93
102
STRING
94
102
power
101
102
call
96
102
-
97
102
NAME
100
102
True
115
102
+
102
102
None
103
102
~
111
102
[
112
102
factor
174
102
NUMBER
113
103
==
atom -> None
103
/
atom -> None
103
!=
atom -> None
103
>=
atom -> None
103
]
atom -> None
103
>>
atom -> None
103
^
atom -> None
103
,
atom -> None
103
+
atom -> None
103
**
atom -> None
103
<=
atom -> None
103
//
atom -> None
103
|
atom -> None
103
or
atom -> None
103
%
atom -> None
103
>
atom -> None
103
-
atom -> None
103
and
atom -> None
103
&
atom -> None
103
<<
atom -> None
103
*
atom -> None
103
<
atom -> None
104
,
test -> or_test
104
]
test -> or_test
105
|
175
105
>=
expr -> xor_expr
105
<=
expr -> xor_expr
105
or
expr -> xor_expr
105
>
expr -> xor_expr
105
==
expr -> xor_expr
105
]
expr -> xor_expr
105
<
expr -> xor_expr
105
,
expr -> xor_expr
105
!=
expr -> xor_expr
105
and
expr -> xor_expr
106
<<
176
106
>>
177
106
<
shift_expr -> arith_expr
106
>
shift_expr -> arith_expr
106
>=
shift_expr -> arith_expr
106
or
shift_expr -> arith_expr
106
]
shift_expr -> arith_expr
106
&
shift_expr -> arith_expr
106
^
shift_expr -> arith_expr
106
<=
shift_expr -> arith_expr
106
,
shift_expr -> arith_expr
106
and
shift_expr -> arith_expr
106
|
shift_expr -> arith_expr
106
==
shift_expr -> arith_expr
106
!=
shift_expr -> arith_expr
107
]
and_test -> not_test
107
or
and_test -> not_test
107
and
178
107
,
and_test -> not_test
108
]
179
109
^
180
109
<=
xor_expr -> and_expr
109
and
xor_expr -> and_expr
109
!=
xor_expr -> and_expr
109
>
xor_expr -> and_expr
109
or
xor_expr -> and_expr
109
>=
xor_expr -> and_expr
109
]
xor_expr -> and_expr
109
|
xor_expr -> and_expr
109
,
xor_expr -> and_expr
109
==
xor_expr -> and_expr
109
<
xor_expr -> and_expr
110
or
and_expr -> shift_expr
110
&
181
110
>
and_expr -> shift_expr
110
and
and_expr -> shift_expr
110
!=
and_expr -> shift_expr
110
,
and_expr -> shift_expr
110
^
and_expr -> shift_expr
110
|
and_expr -> shift_expr
110
<
and_expr -> shift_expr
110
==
and_expr -> shift_expr
110
>=
and_expr -> shift_expr
110
]
and_expr -> shift_expr
110
<=
and_expr -> shift_expr
111
atom
92
111
False
93
111
factor
182
111
STRING
94
111
power
101
111
call
96
111
-
97
111
NAME
100
111
True
115
111
+
102
111
None
103
111
~
111
111
[
112
111
NUMBER
113
112
atom
92
112
False
93
112
STRING
94
112
expr
95
112
call
96
112
-
97
112
term
98
112
factor
99
112
NAME
100
112
power
101
112
+
102
112
None
103
112
test_list
183
112
or_test
104
112
xor_expr
105
112
arith_expr
106
112
not_test
107
112
and_expr
109
112
shift_expr
110
112
~
111
112
[
112
112
NUMBER
113
112
comparison
114
112
True
115
112
not
116
112
and_test
117
112
test
118
113
//
atom -> NUMBER
113
>>
atom -> NUMBER
113
>
atom -> NUMBER
113
and
atom -> NUMBER
113
&
atom -> NUMBER
113
or
atom -> NUMBER
113
-
atom -> NUMBER
113
%
atom -> NUMBER
113
<
atom -> NUMBER
113
]
atom -> NUMBER
113
,
atom -> NUMBER
113
**
atom -> NUMBER
113
!=
atom -> NUMBER
113
*
atom -> NUMBER
113
^
atom -> NUMBER
113
|
atom -> NUMBER
113
+
atom -> NUMBER
113
>=
atom -> NUMBER
113
/
atom -> NUMBER
113
<<
atom -> NUMBER
113
<=
atom -> NUMBER
113
==
atom -> NUMBER
114
or
not_test -> comparison
114
and
not_test -> comparison
114
,
not_test -> comparison
114
]
not_test -> comparison
115
//
atom -> True
115
]
atom -> True
115
>>
atom -> True
115
or
atom -> True
115
>=
atom -> True
115
>
atom -> True
115
<
atom -> True
115
<<
atom -> True
115
*
atom -> True
115
-
atom -> True
115
,
atom -> True
115
!=
atom -> True
115
%
atom -> True
115
+
atom -> True
115
&
atom -> True
115
and
atom -> True
115
==
atom -> True
115
|
atom -> True
115
^
atom -> True
115
**
atom -> True
115
<=
atom -> True
115
/
atom -> True
116
atom
92
116
term
98
116
False
93
116
STRING
94
116
expr
95
116
power
101
116
xor_expr
105
116
factor
99
116
-
97
116
call
96
116
shift_expr
110
116
NAME
100
116
arith_expr
106
116
True
115
116
+
102
116
None
103
116
~
111
116
and_expr
109
116
[
112
116
NUMBER
113
116
comparison
114
116
not_test
184
116
not
116
117
or
185
117
]
or_test -> and_test
117
,
or_test -> and_test
118
,
186
118
]
test_list -> test
119
NAME
not_test -> not not_test
119
and
not_test -> not not_test
119
NEWLINE
not_test -> not not_test
119
DEDENT
not_test -> not not_test
119
or
not_test -> not not_test
120
atom
40
120
False
41
120
STRING
42
120
expr
43
120
call
44
120
-
45
120
term
46
120
factor
47
120
NAME
48
120
power
49
120
xor_expr
50
120
+
51
120
None
52
120
arith_expr
53
120
~
54
120
and_expr
55
120
shift_expr
56
120
[
58
120
NUMBER
59
120
comparison
60
120
and_test
187
120
not
61
120
True
62
120
not_test
65
121
NEWLINE
188
121
suite
189
122
%
power -> atom ** factor
122
<
power -> atom ** factor
122
&
power -> atom ** factor
122
/
power -> atom ** factor
122
^
power -> atom ** factor
122
//
power -> atom ** factor
122
<=
power -> atom ** factor
122
or
power -> atom ** factor
122
and
power -> atom ** factor
122
DEDENT
power -> atom ** factor
122
>
power -> atom ** factor
122
>=
power -> atom ** factor
122
NAME
power -> atom ** factor
122
|
power -> atom ** factor
122
-
power -> atom ** factor
122
==
power -> atom ** factor
122
+
power -> atom ** factor
122
>>
power -> atom ** factor
122
NEWLINE
power -> atom ** factor
122
*
power -> atom ** factor
122
<<
power -> atom ** factor
122
!=
power -> atom ** factor
123
and
comparison -> expr comp_op comparison
123
or
comparison -> expr comp_op comparison
123
DEDENT
comparison -> expr comp_op comparison
123
NEWLINE
comparison -> expr comp_op comparison
123
NAME
comparison -> expr comp_op comparison
124
>
arith_expr -> term + arith_expr
124
&
arith_expr -> term + arith_expr
124
!=
arith_expr -> term + arith_expr
124
|
arith_expr -> term + arith_expr
124
DEDENT
arith_expr -> term + arith_expr
124
<<
arith_expr -> term + arith_expr
124
<=
arith_expr -> term + arith_expr
124
<
arith_expr -> term + arith_expr
124
>>
arith_expr -> term + arith_expr
124
and
arith_expr -> term + arith_expr
124
>=
arith_expr -> term + arith_expr
124
==
arith_expr -> term + arith_expr
124
NAME
arith_expr -> term + arith_expr
124
or
arith_expr -> term + arith_expr
124
NEWLINE
arith_expr -> term + arith_expr
124
^
arith_expr -> term + arith_expr
125
!=
arith_expr -> term - arith_expr
125
<
arith_expr -> term - arith_expr
125
^
arith_expr -> term - arith_expr
125
<=
arith_expr -> term - arith_expr
125
and
arith_expr -> term - arith_expr
125
>=
arith_expr -> term - arith_expr
125
==
arith_expr -> term - arith_expr
125
>>
arith_expr -> term - arith_expr
125
|
arith_expr -> term - arith_expr
125
&
arith_expr -> term - arith_expr
125
>
arith_expr -> term - arith_expr
125
or
arith_expr -> term - arith_expr
125
NEWLINE
arith_expr -> term - arith_expr
125
DEDENT
arith_expr -> term - arith_expr
125
<<
arith_expr -> term - arith_expr
125
NAME
arith_expr -> term - arith_expr
126
and
term -> factor // term
126
|
term -> factor // term
126
==
term -> factor // term
126
<=
term -> factor // term
126
>>
term -> factor // term
126
-
term -> factor // term
126
<
term -> factor // term
126
+
term -> factor // term
126
NAME
term -> factor // term
126
DEDENT
term -> factor // term
126
<<
term -> factor // term
126
&
term -> factor // term
126
NEWLINE
term -> factor // term
126
!=
term -> factor // term
126
or
term -> factor // term
126
>
term -> factor // term
126
^
term -> factor // term
126
>=
term -> factor // term
127
and
term -> factor * term
127
<<
term -> factor * term
127
>>
term -> factor * term
127
>
term -> factor * term
127
NEWLINE
term -> factor * term
127
!=
term -> factor * term
127
==
term -> factor * term
127
DEDENT
term -> factor * term
127
or
term -> factor * term
127
NAME
term -> factor * term
127
>=
term -> factor * term
127
^
term -> factor * term
127
<=
term -> factor * term
127
-
term -> factor * term
127
<
term -> factor * term
127
|
term -> factor * term
127
+
term -> factor * term
127
&
term -> factor * term
128
>
term -> factor / term
128
+
term -> factor / term
128
>=
term -> factor / term
128
NAME
term -> factor / term
128
==
term -> factor / term
128
<=
term -> factor / term
128
<<
term -> factor / term
128
|
term -> factor / term
128
&
term -> factor / term
128
or
term -> factor / term
128
-
term -> factor / term
128
and
term -> factor / term
128
NEWLINE
term -> factor / term
128
DEDENT
term -> factor / term
128
>>
term -> factor / term
128
<
term -> factor / term
128
^
term -> factor / term
128
!=
term -> factor / term
129
^
term -> factor % term
129
|
term -> factor % term
129
!=
term -> factor % term
129
<<
term -> factor % term
129
DEDENT
term -> factor % term
129
+
term -> factor % term
129
<
term -> factor % term
129
or
term -> factor % term
129
NAME
term -> factor % term
129
>=
term -> factor % term
129
and
term -> factor % term
129
-
term -> factor % term
129
>>
term -> factor % term
129
&
term -> factor % term
129
==
term -> factor % term
129
>
term -> factor % term
129
<=
term -> factor % term
129
NEWLINE
term -> factor % term
130
*
call -> NAME ( )
130
and
call -> NAME ( )
130
!=
call -> NAME ( )
130
>>
call -> NAME ( )
130
<
call -> NAME ( )
130
DEDENT
call -> NAME ( )
130
==
call -> NAME ( )
130
or
call -> NAME ( )
130
//
call -> NAME ( )
130
>=
call -> NAME ( )
130
+
call -> NAME ( )
130
<=
call -> NAME ( )
130
<<
call -> NAME ( )
130
/
call -> NAME ( )
130
NEWLINE
call -> NAME ( )
130
%
call -> NAME ( )
130
**
call -> NAME ( )
130
NAME
call -> NAME ( )
130
>
call -> NAME ( )
130
|
call -> NAME ( )
130
^
call -> NAME ( )
130
&
call -> NAME ( )
130
-
call -> NAME ( )
131
<
power -> atom
131
**
190
131
>>
power -> atom
131
and
power -> atom
131
/
power -> atom
131
>=
power -> atom
131
<=
power -> atom
131
==
power -> atom
131
//
power -> atom
131
<<
power -> atom
131
-
power -> atom
131
%
power -> atom
131
^
power -> atom
131
!=
power -> atom
131
*
power -> atom
131
or
power -> atom
131
)
power -> atom
131
+
power -> atom
131
&
power -> atom
131
>
power -> atom
131
,
power -> atom
131
|
power -> atom
132
==
atom -> False
132
or
atom -> False
132
|
atom -> False
132
%
atom -> False
132
>>
atom -> False
132
-
atom -> False
132
<<
atom -> False
132
**
atom -> False
132
)
atom -> False
132
^
atom -> False
132
and
atom -> False
132
,
atom -> False
132
!=
atom -> False
132
>=
atom -> False
132
>
atom -> False
132
/
atom -> False
132
*
atom -> False
132
<=
atom -> False
132
//
atom -> False
132
&
atom -> False
132
<
atom -> False
132
+
atom -> False
133
*
atom -> STRING
133
<<
atom -> STRING
133
!=
atom -> STRING
133
and
atom -> STRING
133
//
atom -> STRING
133
>=
atom -> STRING
133
&
atom -> STRING
133
,
atom -> STRING
133
-
atom -> STRING
133
+
atom -> STRING
133
)
atom -> STRING
133
**
atom -> STRING
133
>>
atom -> STRING
133
/
atom -> STRING
133
|
atom -> STRING
133
^
atom -> STRING
133
or
atom -> STRING
133
%
atom -> STRING
133
==
atom -> STRING
133
<=
atom -> STRING
133
>
atom -> STRING
133
<
atom -> STRING
134
!=
69
134
==
70
134
<
71
134
<=
72
134
>
73
134
,
comparison -> expr
134
>=
74
134
comp_op
191
134
)
comparison -> expr
134
or
comparison -> expr
134
and
comparison -> expr
135
**
atom -> call
135
&
atom -> call
135
>
atom -> call
135
<
atom -> call
135
and
atom -> call
135
>>
atom -> call
135
>=
atom -> call
135
<<
atom -> call
135
^
atom -> call
135
//
atom -> call
135
%
atom -> call
135
-
atom -> call
135
*
atom -> call
135
<=
atom -> call
135
,
atom -> call
135
or
atom -> call
135
|
atom -> call
135
/
atom -> call
135
==
atom -> call
135
+
atom -> call
135
)
atom -> call
135
!=
atom -> call
136
atom
131
136
NAME
139
136
False
132
136
STRING
133
136
power
140
136
call
135
136
-
136
136
True
154
136
+
141
136
None
142
136
[
150
136
~
146
136
factor
192
136
NUMBER
151
137
^
arith_expr -> term
137
<
arith_expr -> term
137
+
193
137
>=
arith_expr -> term
137
<<
arith_expr -> term
137
&
arith_expr -> term
137
-
194
137
and
arith_expr -> term
137
or
arith_expr -> term
137
>>
arith_expr -> term
137
|
arith_expr -> term
137
>
arith_expr -> term
137
)
arith_expr -> term
137
,
arith_expr -> term
137
<=
arith_expr -> term
137
!=
arith_expr -> term
137
==
arith_expr -> term
138
//
195
138
*
196
138
/
197
138
%
198
138
+
term -> factor
138
<
term -> factor
138
==
term -> factor
138
<<
term -> factor
138
>
term -> factor
138
&
term -> factor
138
^
term -> factor
138
>=
term -> factor
138
or
term -> factor
138
and
term -> factor
138
<=
term -> factor
138
|
term -> factor
138
-
term -> factor
138
,
term -> factor
138
!=
term -> factor
138
)
term -> factor
138
>>
term -> factor
139
&
atom -> NAME
139
>=
atom -> NAME
139
(
199
139
<=
atom -> NAME
139
<
atom -> NAME
139
>
atom -> NAME
139
and
atom -> NAME
139
+
atom -> NAME
139
^
atom -> NAME
139
==
atom -> NAME
139
/
atom -> NAME
139
)
atom -> NAME
139
*
atom -> NAME
139
or
atom -> NAME
139
-
atom -> NAME
139
<<
atom -> NAME
139
%
atom -> NAME
139
,
atom -> NAME
139
**
atom -> NAME
139
>>
atom -> NAME
139
!=
atom -> NAME
139
//
atom -> NAME
139
|
atom -> NAME
140
>=
factor -> power
140
)
factor -> power
140
or
factor -> power
140
==
factor -> power
140
,
factor -> power
140
!=
factor -> power
140
*
factor -> power
140
//
factor -> power
140
-
factor -> power
140
>
factor -> power
140
+
factor -> power
140
^
factor -> power
140
|
factor -> power
140
&
factor -> power
140
%
factor -> power
140
>>
factor -> power
140
<<
factor -> power
140
<
factor -> power
140
/
factor -> power
140
and
factor -> power
140
<=
factor -> power
141
atom
131
141
NAME
139
141
False
132
141
STRING
133
141
power
140
141
call
135
141
-
136
141
True
154
141
+
141
141
None
142
141
[
150
141
~
146
141
factor
200
141
NUMBER
151
142
==
atom -> None
142
/
atom -> None
142
!=
atom -> None
142
>=
atom -> None
142
)
atom -> None
142
>>
atom -> None
142
^
atom -> None
142
,
atom -> None
142
+
atom -> None
142
**
atom -> None
142
<=
atom -> None
142
//
atom -> None
142
|
atom -> None
142
or
atom -> None
142
%
atom -> None
142
>
atom -> None
142
-
atom -> None
142
and
atom -> None
142
&
atom -> None
142
<<
atom -> None
142
*
atom -> None
142
<
atom -> None
143
|
201
143
>=
expr -> xor_expr
143
<=
expr -> xor_expr
143
)
expr -> xor_expr
143
or
expr -> xor_expr
143
>
expr -> xor_expr
143
==
expr -> xor_expr
143
<
expr -> xor_expr
143
,
expr -> xor_expr
143
!=
expr -> xor_expr
143
and
expr -> xor_expr
144
<<
202
144
>>
203
144
<
shift_expr -> arith_expr
144
>
shift_expr -> arith_expr
144
>=
shift_expr -> arith_expr
144
or
shift_expr -> arith_expr
144
&
shift_expr -> arith_expr
144
^
shift_expr -> arith_expr
144
<=
shift_expr -> arith_expr
144
,
shift_expr -> arith_expr
144
and
shift_expr -> arith_expr
144
|
shift_expr -> arith_expr
144
==
shift_expr -> arith_expr
144
)
shift_expr -> arith_expr
144
!=
shift_expr -> arith_expr
145
and
204
145
or
and_test -> not_test
145
,
and_test -> not_test
145
)
and_test -> not_test
146
atom
131
146
NAME
139
146
False
132
146
STRING
133
146
power
140
146
call
135
146
-
136
146
factor
205
146
True
154
146
+
141
146
None
142
146
[
150
146
~
146
146
NUMBER
151
147
^
206
147
<=
xor_expr -> and_expr
147
and
xor_expr -> and_expr
147
!=
xor_expr -> and_expr
147
>
xor_expr -> and_expr
147
or
xor_expr -> and_expr
147
>=
xor_expr -> and_expr
147
)
xor_expr -> and_expr
147
|
xor_expr -> and_expr
147
,
xor_expr -> and_expr
147
==
xor_expr -> and_expr
147
<
xor_expr -> and_expr
148
or
and_expr -> shift_expr
148
&
207
148
>
and_expr -> shift_expr
148
and
and_expr -> shift_expr
148
!=
and_expr -> shift_expr
148
,
and_expr -> shift_expr
148
^
and_expr -> shift_expr
148
|
and_expr -> shift_expr
148
<
and_expr -> shift_expr
148
==
and_expr -> shift_expr
148
>=
and_expr -> shift_expr
148
<=
and_expr -> shift_expr
148
)
and_expr -> shift_expr
149
)
208
150
atom
92
150
False
93
150
STRING
94
150
expr
95
150
call
96
150
-
97
150
term
98
150
factor
99
150
NAME
100
150
power
101
150
+
102
150
None
103
150
test_list
209
150
or_test
104
150
xor_expr
105
150
arith_expr
106
150
not_test
107
150
and_expr
109
150
shift_expr
110
150
~
111
150
[
112
150
NUMBER
113
150
comparison
114
150
True
115
150
not
116
150
and_test
117
150
test
118
151
//
atom -> NUMBER
151
>>
atom -> NUMBER
151
>
atom -> NUMBER
151
and
atom -> NUMBER
151
&
atom -> NUMBER
151
or
atom -> NUMBER
151
)
atom -> NUMBER
151
-
atom -> NUMBER
151
%
atom -> NUMBER
151
<
atom -> NUMBER
151
,
atom -> NUMBER
151
**
atom -> NUMBER
151
!=
atom -> NUMBER
151
*
atom -> NUMBER
151
^
atom -> NUMBER
151
|
atom -> NUMBER
151
+
atom -> NUMBER
151
>=
atom -> NUMBER
151
/
atom -> NUMBER
151
<<
atom -> NUMBER
151
<=
atom -> NUMBER
151
==
atom -> NUMBER
152
or
not_test -> comparison
152
and
not_test -> comparison
152
)
not_test -> comparison
152
,
not_test -> comparison
153
,
test -> or_test
153
)
test -> or_test
154
//
atom -> True
154
)
atom -> True
154
>>
atom -> True
154
or
atom -> True
154
>=
atom -> True
154
>
atom -> True
154
<
atom -> True
154
<<
atom -> True
154
*
atom -> True
154
-
atom -> True
154
,
atom -> True
154
!=
atom -> True
154
%
atom -> True
154
+
atom -> True
154
&
atom -> True
154
and
atom -> True
154
==
atom -> True
154
|
atom -> True
154
^
atom -> True
154
**
atom -> True
154
<=
atom -> True
154
/
atom -> True
155
or
210
155
,
or_test -> and_test
155
)
or_test -> and_test
156
atom
131
156
term
137
156
NAME
139
156
False
132
156
STRING
133
156
expr
134
156
power
140
156
xor_expr
143
156
factor
138
156
-
136
156
call
135
156
shift_expr
148
156
arith_expr
144
156
True
154
156
+
141
156
None
142
156
[
150
156
~
146
156
and_expr
147
156
NUMBER
151
156
comparison
152
156
not_test
211
156
not
156
157
)
test_list -> test
157
,
212
158
or
expr -> xor_expr | expr
158
DEDENT
expr -> xor_expr | expr
158
>=
expr -> xor_expr | expr
158
>
expr -> xor_expr | expr
158
and
expr -> xor_expr | expr
158
<
expr -> xor_expr | expr
158
NEWLINE
expr -> xor_expr | expr
158
!=
expr -> xor_expr | expr
158
<=
expr -> xor_expr | expr
158
NAME
expr -> xor_expr | expr
158
==
expr -> xor_expr | expr
159
and
shift_expr -> arith_expr << shift_expr
159
<
shift_expr -> arith_expr << shift_expr
159
!=
shift_expr -> arith_expr << shift_expr
159
&
shift_expr -> arith_expr << shift_expr
159
^
shift_expr -> arith_expr << shift_expr
159
<=
shift_expr -> arith_expr << shift_expr
159
>=
shift_expr -> arith_expr << shift_expr
159
==
shift_expr -> arith_expr << shift_expr
159
>
shift_expr -> arith_expr << shift_expr
159
or
shift_expr -> arith_expr << shift_expr
159
NAME
shift_expr -> arith_expr << shift_expr
159
|
shift_expr -> arith_expr << shift_expr
159
NEWLINE
shift_expr -> arith_expr << shift_expr
159
DEDENT
shift_expr -> arith_expr << shift_expr
160
<
shift_expr -> arith_expr >> shift_expr
160
<=
shift_expr -> arith_expr >> shift_expr
160
>=
shift_expr -> arith_expr >> shift_expr
160
DEDENT
shift_expr -> arith_expr >> shift_expr
160
&
shift_expr -> arith_expr >> shift_expr
160
NEWLINE
shift_expr -> arith_expr >> shift_expr
160
^
shift_expr -> arith_expr >> shift_expr
160
==
shift_expr -> arith_expr >> shift_expr
160
|
shift_expr -> arith_expr >> shift_expr
160
!=
shift_expr -> arith_expr >> shift_expr
160
or
shift_expr -> arith_expr >> shift_expr
160
and
shift_expr -> arith_expr >> shift_expr
160
>
shift_expr -> arith_expr >> shift_expr
160
NAME
shift_expr -> arith_expr >> shift_expr
161
==
xor_expr -> and_expr ^ xor_expr
161
>=
xor_expr -> and_expr ^ xor_expr
161
NAME
xor_expr -> and_expr ^ xor_expr
161
NEWLINE
xor_expr -> and_expr ^ xor_expr
161
<=
xor_expr -> and_expr ^ xor_expr
161
or
xor_expr -> and_expr ^ xor_expr
161
!=
xor_expr -> and_expr ^ xor_expr
161
<
xor_expr -> and_expr ^ xor_expr
161
|
xor_expr -> and_expr ^ xor_expr
161
>
xor_expr -> and_expr ^ xor_expr
161
DEDENT
xor_expr -> and_expr ^ xor_expr
161
and
xor_expr -> and_expr ^ xor_expr
162
NEWLINE
and_expr -> shift_expr & and_expr
162
or
and_expr -> shift_expr & and_expr
162
and
and_expr -> shift_expr & and_expr
162
<
and_expr -> shift_expr & and_expr
162
DEDENT
and_expr -> shift_expr & and_expr
162
|
and_expr -> shift_expr & and_expr
162
NAME
and_expr -> shift_expr & and_expr
162
<=
and_expr -> shift_expr & and_expr
162
!=
and_expr -> shift_expr & and_expr
162
>=
and_expr -> shift_expr & and_expr
162
^
and_expr -> shift_expr & and_expr
162
>
and_expr -> shift_expr & and_expr
162
==
and_expr -> shift_expr & and_expr
163
NEWLINE
or_test -> and_test or or_test
163
NAME
or_test -> and_test or or_test
163
DEDENT
or_test -> and_test or or_test
164
atom
92
164
False
93
164
STRING
94
164
power
101
164
call
96
164
-
97
164
NAME
100
164
True
115
164
+
102
164
None
103
164
~
111
164
factor
213
164
[
112
164
NUMBER
113
165
atom
92
165
term
98
165
False
93
165
STRING
94
165
expr
95
165
power
101
165
xor_expr
105
165
factor
99
165
-
97
165
comparison
214
165
call
96
165
shift_expr
110
165
NAME
100
165
arith_expr
106
165
True
115
165
+
102
165
None
103
165
~
111
165
and_expr
109
165
[
112
165
NUMBER
113
166
<<
factor -> - factor
166
/
factor -> - factor
166
]
factor -> - factor
166
,
factor -> - factor
166
-
factor -> - factor
166
>
factor -> - factor
166
^
factor -> - factor
166
+
factor -> - factor
166
*
factor -> - factor
166
>=
factor -> - factor
166
<
factor -> - factor
166
|
factor -> - factor
166
and
factor -> - factor
166
==
factor -> - factor
166
<=
factor -> - factor
166
>>
factor -> - factor
166
&
factor -> - factor
166
%
factor -> - factor
166
//
factor -> - factor
166
or
factor -> - factor
166
!=
factor -> - factor
167
atom
92
167
term
98
167
False
93
167
STRING
94
167
power
101
167
call
96
167
-
97
167
factor
99
167
NAME
100
167
True
115
167
arith_expr
215
167
+
102
167
None
103
167
~
111
167
[
112
167
NUMBER
113
168
atom
92
168
term
98
168
False
93
168
STRING
94
168
power
101
168
call
96
168
-
97
168
factor
99
168
NAME
100
168
True
115
168
+
102
168
None
103
168
~
111
168
arith_expr
216
168
[
112
168
NUMBER
113
169
atom
92
169
False
93
169
STRING
94
169
power
101
169
call
96
169
-
97
169
factor
99
169
NAME
100
169
True
115
169
+
102
169
None
103
169
~
111
169
term
217
169
[
112
169
NUMBER
113
170
term
218
170
atom
92
170
False
93
170
STRING
94
170
power
101
170
-
97
170
factor
99
170
call
96
170
NAME
100
170
True
115
170
+
102
170
None
103
170
~
111
170
[
112
170
NUMBER
113
171
atom
92
171
False
93
171
STRING
94
171
power
101
171
call
96
171
-
97
171
factor
99
171
NAME
100
171
True
115
171
+
102
171
None
103
171
~
111
171
term
219
171
[
112
171
NUMBER
113
172
atom
92
172
False
93
172
STRING
94
172
power
101
172
call
96
172
-
97
172
factor
99
172
NAME
100
172
True
115
172
+
102
172
None
103
172
term
220
172
~
111
172
[
112
172
NUMBER
113
173
)
221
173
atom
131
173
False
132
173
STRING
133
173
expr
134
173
call
135
173
-
136
173
term
137
173
factor
138
173
NAME
139
173
power
140
173
+
141
173
None
142
173
xor_expr
143
173
arith_expr
144
173
not_test
145
173
~
146
173
and_expr
147
173
shift_expr
148
173
test_list
222
173
[
150
173
NUMBER
151
173
comparison
152
173
or_test
153
173
True
154
173
and_test
155
173
not
156
173
test
157
174
//
factor -> + factor
174
*
factor -> + factor
174
>=
factor -> + factor
174
|
factor -> + factor
174
,
factor -> + factor
174
<<
factor -> + factor
174
>
factor -> + factor
174
and
factor -> + factor
174
<
factor -> + factor
174
==
factor -> + factor
174
]
factor -> + factor
174
>>
factor -> + factor
174
<=
factor -> + factor
174
/
factor -> + factor
174
^
factor -> + factor
174
or
factor -> + factor
174
&
factor -> + factor
174
%
factor -> + factor
174
-
factor -> + factor
174
+
factor -> + factor
174
!=
factor -> + factor
175
atom
92
175
term
98
175
False
93
175
STRING
94
175
power
101
175
call
96
175
xor_expr
105
175
factor
99
175
-
97
175
NAME
100
175
shift_expr
110
175
expr
223
175
arith_expr
106
175
True
115
175
+
102
175
None
103
175
~
111
175
and_expr
109
175
[
112
175
NUMBER
113
176
atom
92
176
term
98
176
False
93
176
STRING
94
176
power
101
176
shift_expr
224
176
-
97
176
factor
99
176
call
96
176
NAME
100
176
arith_expr
106
176
True
115
176
+
102
176
None
103
176
~
111
176
[
112
176
NUMBER
113
177
atom
92
177
term
98
177
False
93
177
STRING
94
177
shift_expr
225
177
power
101
177
call
96
177
-
97
177
factor
99
177
NAME
100
177
arith_expr
106
177
True
115
177
+
102
177
None
103
177
~
111
177
[
112
177
NUMBER
113
178
atom
92
178
term
98
178
False
93
178
STRING
94
178
expr
95
178
power
101
178
xor_expr
105
178
factor
99
178
-
97
178
call
96
178
shift_expr
110
178
NAME
100
178
arith_expr
106
178
True
115
178
+
102
178
None
103
178
~
111
178
not_test
107
178
and_expr
109
178
[
112
178
NUMBER
113
178
comparison
114
178
and_test
226
178
not
116
179
+
atom -> [ test_list ]
179
-
atom -> [ test_list ]
179
%
atom -> [ test_list ]
179
**
atom -> [ test_list ]
179
<<
atom -> [ test_list ]
179
or
atom -> [ test_list ]
179
DEDENT
atom -> [ test_list ]
179
!=
atom -> [ test_list ]
179
|
atom -> [ test_list ]
179
NEWLINE
atom -> [ test_list ]
179
<
atom -> [ test_list ]
179
>>
atom -> [ test_list ]
179
//
atom -> [ test_list ]
179
&
atom -> [ test_list ]
179
>
atom -> [ test_list ]
179
NAME
atom -> [ test_list ]
179
and
atom -> [ test_list ]
179
<=
atom -> [ test_list ]
179
==
atom -> [ test_list ]
179
/
atom -> [ test_list ]
179
^
atom -> [ test_list ]
179
>=
atom -> [ test_list ]
179
*
atom -> [ test_list ]
180
atom
92
180
term
98
180
xor_expr
227
180
False
93
180
STRING
94
180
power
101
180
call
96
180
-
97
180
factor
99
180
NAME
100
180
shift_expr
110
180
arith_expr
106
180
True
115
180
+
102
180
None
103
180
~
111
180
and_expr
109
180
[
112
180
NUMBER
113
181
atom
92
181
term
98
181
False
93
181
STRING
94
181
power
101
181
call
96
181
-
97
181
factor
99
181
NAME
100
181
shift_expr
110
181
arith_expr
106
181
True
115
181
+
102
181
None
103
181
~
111
181
[
112
181
NUMBER
113
181
and_expr
228
182
<<
factor -> ~ factor
182
]
factor -> ~ factor
182
&
factor -> ~ factor
182
>
factor -> ~ factor
182
,
factor -> ~ factor
182
!=
factor -> ~ factor
182
and
factor -> ~ factor
182
-
factor -> ~ factor
182
or
factor -> ~ factor
182
>>
factor -> ~ factor
182
/
factor -> ~ factor
182
%
factor -> ~ factor
182
^
factor -> ~ factor
182
//
factor -> ~ factor
182
|
factor -> ~ factor
182
+
factor -> ~ factor
182
==
factor -> ~ factor
182
<=
factor -> ~ factor
182
>=
factor -> ~ factor
182
<
factor -> ~ factor
182
*
factor -> ~ factor
183
]
229
184
,
not_test -> not not_test
184
]
not_test -> not not_test
184
and
not_test -> not not_test
184
or
not_test -> not not_test
185
atom
92
185
term
98
185
False
93
185
STRING
94
185
expr
95
185
power
101
185
xor_expr
105
185
factor
99
185
-
97
185
call
96
185
shift_expr
110
185
NAME
100
185
arith_expr
106
185
True
115
185
+
102
185
None
103
185
~
111
185
not_test
107
185
and_expr
109
185
[
112
185
NUMBER
113
185
comparison
114
185
and_test
117
185
not
116
185
or_test
230
186
atom
92
186
term
98
186
False
93
186
STRING
94
186
expr
95
186
test_list
231
186
xor_expr
105
186
factor
99
186
power
101
186
-
97
186
call
96
186
shift_expr
110
186
NAME
100
186
arith_expr
106
186
True
115
186
+
102
186
None
103
186
or_test
104
186
~
111
186
not_test
107
186
and_expr
109
186
[
112
186
NUMBER
113
186
comparison
114
186
and_test
117
186
test
118
186
not
116
187
NAME
and_test -> not_test and and_test
187
or
and_test -> not_test and and_test
187
DEDENT
and_test -> not_test and and_test
187
NEWLINE
and_test -> not_test and and_test
188
INDENT
232
189
NEWLINE
func_def -> NAME ( name_list ) : suite
189
DEDENT
func_def -> NAME ( name_list ) : suite
189
NAME
func_def -> NAME ( name_list ) : suite
190
atom
131
190
NAME
139
190
False
132
190
factor
233
190
STRING
133
190
power
140
190
call
135
190
-
136
190
True
154
190
+
141
190
None
142
190
[
150
190
~
146
190
NUMBER
151
191
atom
131
191
term
137
191
NAME
139
191
False
132
191
STRING
133
191
expr
134
191
power
140
191
xor_expr
143
191
factor
138
191
-
136
191
call
135
191
shift_expr
148
191
arith_expr
144
191
True
154
191
+
141
191
None
142
191
[
150
191
~
146
191
and_expr
147
191
NUMBER
151
191
comparison
234
192
<<
factor -> - factor
192
)
factor -> - factor
192
/
factor -> - factor
192
,
factor -> - factor
192
-
factor -> - factor
192
>
factor -> - factor
192
^
factor -> - factor
192
+
factor -> - factor
192
*
factor -> - factor
192
>=
factor -> - factor
192
<
factor -> - factor
192
|
factor -> - factor
192
and
factor -> - factor
192
==
factor -> - factor
192
<=
factor -> - factor
192
>>
factor -> - factor
192
&
factor -> - factor
192
%
factor -> - factor
192
//
factor -> - factor
192
or
factor -> - factor
192
!=
factor -> - factor
193
atom
131
193
term
137
193
NAME
139
193
False
132
193
STRING
133
193
power
140
193
call
135
193
-
136
193
factor
138
193
True
154
193
+
141
193
None
142
193
[
150
193
~
146
193
arith_expr
235
193
NUMBER
151
194
atom
131
194
term
137
194
NAME
139
194
False
132
194
STRING
133
194
power
140
194
call
135
194
-
136
194
factor
138
194
True
154
194
arith_expr
236
194
+
141
194
None
142
194
[
150
194
~
146
194
NUMBER
151
195
atom
131
195
NAME
139
195
False
132
195
STRING
133
195
power
140
195
call
135
195
-
136
195
factor
138
195
True
154
195
+
141
195
None
142
195
[
150
195
~
146
195
term
237
195
NUMBER
151
196
term
238
196
atom
131
196
NAME
139
196
False
132
196
STRING
133
196
power
140
196
-
136
196
factor
138
196
call
135
196
True
154
196
+
141
196
None
142
196
[
150
196
~
146
196
NUMBER
151
197
atom
131
197
NAME
139
197
False
132
197
STRING
133
197
power
140
197
call
135
197
-
136
197
factor
138
197
term
239
197
True
154
197
+
141
197
None
142
197
[
150
197
~
146
197
NUMBER
151
198
atom
131
198
NAME
139
198
False
132
198
STRING
133
198
power
140
198
call
135
198
-
136
198
factor
138
198
True
154
198
+
141
198
None
142
198
term
240
198
[
150
198
~
146
198
NUMBER
151
199
)
241
199
atom
131
199
False
132
199
STRING
133
199
expr
134
199
call
135
199
-
136
199
term
137
199
factor
138
199
NAME
139
199
power
140
199
+
141
199
None
142
199
xor_expr
143
199
arith_expr
144
199
not_test
145
199
~
146
199
and_expr
147
199
shift_expr
148
199
test_list
242
199
[
150
199
NUMBER
151
199
comparison
152
199
or_test
153
199
True
154
199
and_test
155
199
not
156
199
test
157
200
//
factor -> + factor
200
*
factor -> + factor
200
>=
factor -> + factor
200
|
factor -> + factor
200
,
factor -> + factor
200
<<
factor -> + factor
200
>
factor -> + factor
200
and
factor -> + factor
200
<
factor -> + factor
200
==
factor -> + factor
200
)
factor -> + factor
200
>>
factor -> + factor
200
<=
factor -> + factor
200
/
factor -> + factor
200
^
factor -> + factor
200
or
factor -> + factor
200
&
factor -> + factor
200
%
factor -> + factor
200
-
factor -> + factor
200
+
factor -> + factor
200
!=
factor -> + factor
201
atom
131
201
term
137
201
NAME
139
201
False
132
201
STRING
133
201
power
140
201
call
135
201
xor_expr
143
201
factor
138
201
-
136
201
shift_expr
148
201
expr
243
201
arith_expr
144
201
True
154
201
+
141
201
None
142
201
[
150
201
~
146
201
and_expr
147
201
NUMBER
151
202
atom
131
202
term
137
202
NAME
139
202
False
132
202
STRING
133
202
power
140
202
shift_expr
244
202
-
136
202
factor
138
202
call
135
202
arith_expr
144
202
True
154
202
+
141
202
None
142
202
[
150
202
~
146
202
NUMBER
151
203
atom
131
203
term
137
203
NAME
139
203
False
132
203
STRING
133
203
shift_expr
245
203
power
140
203
call
135
203
-
136
203
factor
138
203
arith_expr
144
203
True
154
203
+
141
203
None
142
203
[
150
203
~
146
203
NUMBER
151
204
atom
131
204
term
137
204
NAME
139
204
False
132
204
STRING
133
204
expr
134
204
power
140
204
xor_expr
143
204
factor
138
204
-
136
204
call
135
204
shift_expr
148
204
arith_expr
144
204
True
154
204
+
141
204
None
142
204
[
150
204
~
146
204
not_test
145
204
and_expr
147
204
NUMBER
151
204
comparison
152
204
and_test
246
204
not
156
205
<<
factor -> ~ factor
205
&
factor -> ~ factor
205
>
factor -> ~ factor
205
,
factor -> ~ factor
205
!=
factor -> ~ factor
205
and
factor -> ~ factor
205
)
factor -> ~ factor
205
-
factor -> ~ factor
205
or
factor -> ~ factor
205
>>
factor -> ~ factor
205
/
factor -> ~ factor
205
%
factor -> ~ factor
205
^
factor -> ~ factor
205
//
factor -> ~ factor
205
|
factor -> ~ factor
205
+
factor -> ~ factor
205
==
factor -> ~ factor
205
<=
factor -> ~ factor
205
>=
factor -> ~ factor
205
<
factor -> ~ factor
205
*
factor -> ~ factor
206
atom
131
206
term
137
206
xor_expr
247
206
NAME
139
206
False
132
206
STRING
133
206
power
140
206
call
135
206
-
136
206
factor
138
206
shift_expr
148
206
arith_expr
144
206
True
154
206
+
141
206
None
142
206
[
150
206
~
146
206
and_expr
147
206
NUMBER
151
207
atom
131
207
term
137
207
NAME
139
207
False
132
207
STRING
133
207
power
140
207
call
135
207
-
136
207
factor
138
207
shift_expr
148
207
arith_expr
144
207
True
154
207
+
141
207
None
142
207
[
150
207
~
146
207
NUMBER
151
207
and_expr
248
208
^
call -> NAME ( test_list )
208
<
call -> NAME ( test_list )
208
/
call -> NAME ( test_list )
208
>=
call -> NAME ( test_list )
208
|
call -> NAME ( test_list )
208
%
call -> NAME ( test_list )
208
>
call -> NAME ( test_list )
208
and
call -> NAME ( test_list )
208
DEDENT
call -> NAME ( test_list )
208
<<
call -> NAME ( test_list )
208
-
call -> NAME ( test_list )
208
NEWLINE
call -> NAME ( test_list )
208
NAME
call -> NAME ( test_list )
208
//
call -> NAME ( test_list )
208
<=
call -> NAME ( test_list )
208
!=
call -> NAME ( test_list )
208
==
call -> NAME ( test_list )
208
*
call -> NAME ( test_list )
208
>>
call -> NAME ( test_list )
208
**
call -> NAME ( test_list )
208
&
call -> NAME ( test_list )
208
or
call -> NAME ( test_list )
208
+
call -> NAME ( test_list )
209
]
249
210
atom
131
210
term
137
210
NAME
139
210
False
132
210
STRING
133
210
expr
134
210
power
140
210
xor_expr
143
210
factor
138
210
-
136
210
call
135
210
shift_expr
148
210
arith_expr
144
210
True
154
210
+
141
210
None
142
210
[
150
210
~
146
210
not_test
145
210
and_expr
147
210
NUMBER
151
210
comparison
152
210
and_test
155
210
not
156
210
or_test
250
211
,
not_test -> not not_test
211
and
not_test -> not not_test
211
)
not_test -> not not_test
211
or
not_test -> not not_test
212
atom
131
212
term
137
212
NAME
139
212
False
132
212
STRING
133
212
expr
134
212
power
140
212
xor_expr
143
212
factor
138
212
-
136
212
call
135
212
shift_expr
148
212
arith_expr
144
212
True
154
212
+
141
212
None
142
212
[
150
212
~
146
212
test
157
212
not_test
145
212
and_expr
147
212
NUMBER
151
212
comparison
152
212
or_test
153
212
and_test
155
212
not
156
212
test_list
251
213
%
power -> atom ** factor
213
<
power -> atom ** factor
213
&
power -> atom ** factor
213
/
power -> atom ** factor
213
^
power -> atom ** factor
213
//
power -> atom ** factor
213
<=
power -> atom ** factor
213
or
power -> atom ** factor
213
and
power -> atom ** factor
213
>
power -> atom ** factor
213
]
power -> atom ** factor
213
>=
power -> atom ** factor
213
,
power -> atom ** factor
213
|
power -> atom ** factor
213
-
power -> atom ** factor
213
==
power -> atom ** factor
213
+
power -> atom ** factor
213
>>
power -> atom ** factor
213
*
power -> atom ** factor
213
<<
power -> atom ** factor
213
!=
power -> atom ** factor
214
and
comparison -> expr comp_op comparison
214
]
comparison -> expr comp_op comparison
214
or
comparison -> expr comp_op comparison
214
,
comparison -> expr comp_op comparison
215
!=
arith_expr -> term - arith_expr
215
,
arith_expr -> term - arith_expr
215
<
arith_expr -> term - arith_expr
215
^
arith_expr -> term - arith_expr
215
<=
arith_expr -> term - arith_expr
215
and
arith_expr -> term - arith_expr
215
>=
arith_expr -> term - arith_expr
215
==
arith_expr -> term - arith_expr
215
>>
arith_expr -> term - arith_expr
215
&
arith_expr -> term - arith_expr
215
>
arith_expr -> term - arith_expr
215
or
arith_expr -> term - arith_expr
215
<<
arith_expr -> term - arith_expr
215
|
arith_expr -> term - arith_expr
215
]
arith_expr -> term - arith_expr
216
>
arith_expr -> term + arith_expr
216
&
arith_expr -> term + arith_expr
216
,
arith_expr -> term + arith_expr
216
|
arith_expr -> term + arith_expr
216
!=
arith_expr -> term + arith_expr
216
<<
arith_expr -> term + arith_expr
216
<=
arith_expr -> term + arith_expr
216
<
arith_expr -> term + arith_expr
216
>>
arith_expr -> term + arith_expr
216
and
arith_expr -> term + arith_expr
216
>=
arith_expr -> term + arith_expr
216
==
arith_expr -> term + arith_expr
216
or
arith_expr -> term + arith_expr
216
]
arith_expr -> term + arith_expr
216
^
arith_expr -> term + arith_expr
217
and
term -> factor // term
217
|
term -> factor // term
217
==
term -> factor // term
217
<=
term -> factor // term
217
>>
term -> factor // term
217
-
term -> factor // term
217
<
term -> factor // term
217
+
term -> factor // term
217
<<
term -> factor // term
217
]
term -> factor // term
217
&
term -> factor // term
217
!=
term -> factor // term
217
,
term -> factor // term
217
or
term -> factor // term
217
>
term -> factor // term
217
^
term -> factor // term
217
>=
term -> factor // term
218
and
term -> factor * term
218
<<
term -> factor * term
218
>>
term -> factor * term
218
>
term -> factor * term
218
==
term -> factor * term
218
!=
term -> factor * term
218
or
term -> factor * term
218
>=
term -> factor * term
218
^
term -> factor * term
218
,
term -> factor * term
218
<=
term -> factor * term
218
-
term -> factor * term
218
<
term -> factor * term
218
]
term -> factor * term
218
|
term -> factor * term
218
+
term -> factor * term
218
&
term -> factor * term
219
>
term -> factor / term
219
+
term -> factor / term
219
>=
term -> factor / term
219
==
term -> factor / term
219
,
term -> factor / term
219
]
term -> factor / term
219
<=
term -> factor / term
219
<<
term -> factor / term
219
|
term -> factor / term
219
&
term -> factor / term
219
-
term -> factor / term
219
and
term -> factor / term
219
or
term -> factor / term
219
>>
term -> factor / term
219
<
term -> factor / term
219
^
term -> factor / term
219
!=
term -> factor / term
220
^
term -> factor % term
220
|
term -> factor % term
220
!=
term -> factor % term
220
<<
term -> factor % term
220
+
term -> factor % term
220
<
term -> factor % term
220
or
term -> factor % term
220
,
term -> factor % term
220
and
term -> factor % term
220
>=
term -> factor % term
220
-
term -> factor % term
220
>>
term -> factor % term
220
&
term -> factor % term
220
==
term -> factor % term
220
]
term -> factor % term
220
>
term -> factor % term
220
<=
term -> factor % term
221
*
call -> NAME ( )
221
,
call -> NAME ( )
221
and
call -> NAME ( )
221
!=
call -> NAME ( )
221
>>
call -> NAME ( )
221
<
call -> NAME ( )
221
]
call -> NAME ( )
221
==
call -> NAME ( )
221
or
call -> NAME ( )
221
//
call -> NAME ( )
221
>=
call -> NAME ( )
221
+
call -> NAME ( )
221
<=
call -> NAME ( )
221
<<
call -> NAME ( )
221
/
call -> NAME ( )
221
%
call -> NAME ( )
221
**
call -> NAME ( )
221
>
call -> NAME ( )
221
|
call -> NAME ( )
221
^
call -> NAME ( )
221
&
call -> NAME ( )
221
-
call -> NAME ( )
222
)
252
223
or
expr -> xor_expr | expr
223
>=
expr -> xor_expr | expr
223
>
expr -> xor_expr | expr
223
and
expr -> xor_expr | expr
223
<
expr -> xor_expr | expr
223
,
expr -> xor_expr | expr
223
!=
expr -> xor_expr | expr
223
<=
expr -> xor_expr | expr
223
]
expr -> xor_expr | expr
223
==
expr -> xor_expr | expr
224
and
shift_expr -> arith_expr << shift_expr
224
<
shift_expr -> arith_expr << shift_expr
224
]
shift_expr -> arith_expr << shift_expr
224
!=
shift_expr -> arith_expr << shift_expr
224
&
shift_expr -> arith_expr << shift_expr
224
,
shift_expr -> arith_expr << shift_expr
224
^
shift_expr -> arith_expr << shift_expr
224
<=
shift_expr -> arith_expr << shift_expr
224
>=
shift_expr -> arith_expr << shift_expr
224
==
shift_expr -> arith_expr << shift_expr
224
>
shift_expr -> arith_expr << shift_expr
224
or
shift_expr -> arith_expr << shift_expr
224
|
shift_expr -> arith_expr << shift_expr
225
<
shift_expr -> arith_expr >> shift_expr
225
]
shift_expr -> arith_expr >> shift_expr
225
<=
shift_expr -> arith_expr >> shift_expr
225
>=
shift_expr -> arith_expr >> shift_expr
225
&
shift_expr -> arith_expr >> shift_expr
225
^
shift_expr -> arith_expr >> shift_expr
225
==
shift_expr -> arith_expr >> shift_expr
225
|
shift_expr -> arith_expr >> shift_expr
225
!=
shift_expr -> arith_expr >> shift_expr
225
,
shift_expr -> arith_expr >> shift_expr
225
and
shift_expr -> arith_expr >> shift_expr
225
>
shift_expr -> arith_expr >> shift_expr
225
or
shift_expr -> arith_expr >> shift_expr
226
]
and_test -> not_test and and_test
226
or
and_test -> not_test and and_test
226
,
and_test -> not_test and and_test
227
==
xor_expr -> and_expr ^ xor_expr
227
,
xor_expr -> and_expr ^ xor_expr
227
>=
xor_expr -> and_expr ^ xor_expr
227
<=
xor_expr -> and_expr ^ xor_expr
227
or
xor_expr -> and_expr ^ xor_expr
227
!=
xor_expr -> and_expr ^ xor_expr
227
<
xor_expr -> and_expr ^ xor_expr
227
]
xor_expr -> and_expr ^ xor_expr
227
|
xor_expr -> and_expr ^ xor_expr
227
>
xor_expr -> and_expr ^ xor_expr
227
and
xor_expr -> and_expr ^ xor_expr
228
or
and_expr -> shift_expr & and_expr
228
and
and_expr -> shift_expr & and_expr
228
<
and_expr -> shift_expr & and_expr
228
|
and_expr -> shift_expr & and_expr
228
<=
and_expr -> shift_expr & and_expr
228
!=
and_expr -> shift_expr & and_expr
228
,
and_expr -> shift_expr & and_expr
228
>=
and_expr -> shift_expr & and_expr
228
]
and_expr -> shift_expr & and_expr
228
^
and_expr -> shift_expr & and_expr
228
>
and_expr -> shift_expr & and_expr
228
==
and_expr -> shift_expr & and_expr
229
+
atom -> [ test_list ]
229
-
atom -> [ test_list ]
229
%
atom -> [ test_list ]
229
**
atom -> [ test_list ]
229
<<
atom -> [ test_list ]
229
or
atom -> [ test_list ]
229
!=
atom -> [ test_list ]
229
|
atom -> [ test_list ]
229
<
atom -> [ test_list ]
229
>>
atom -> [ test_list ]
229
//
atom -> [ test_list ]
229
]
atom -> [ test_list ]
229
&
atom -> [ test_list ]
229
>
atom -> [ test_list ]
229
and
atom -> [ test_list ]
229
<=
atom -> [ test_list ]
229
==
atom -> [ test_list ]
229
/
atom -> [ test_list ]
229
^
atom -> [ test_list ]
229
>=
atom -> [ test_list ]
229
*
atom -> [ test_list ]
229
,
atom -> [ test_list ]
230
,
or_test -> and_test or or_test
230
]
or_test -> and_test or or_test
231
]
test_list -> test , test_list
232
if_stmt
253
232
if
254
232
assign_stmt
255
232
loop
256
232
nextloop
257
232
loop_stmt
258
232
decl_stmt
259
232
flow_stmt
260
232
return_stmt
261
232
return
262
232
NAME
263
232
stmt_list
264
232
DEDENT
stmt_list -> 
232
stmt
265
232
var
266
232
endloop
267
232
NEWLINE
268
233
%
power -> atom ** factor
233
<
power -> atom ** factor
233
&
power -> atom ** factor
233
/
power -> atom ** factor
233
^
power -> atom ** factor
233
//
power -> atom ** factor
233
)
power -> atom ** factor
233
<=
power -> atom ** factor
233
or
power -> atom ** factor
233
and
power -> atom ** factor
233
>
power -> atom ** factor
233
>=
power -> atom ** factor
233
,
power -> atom ** factor
233
|
power -> atom ** factor
233
-
power -> atom ** factor
233
==
power -> atom ** factor
233
+
power -> atom ** factor
233
>>
power -> atom ** factor
233
*
power -> atom ** factor
233
<<
power -> atom ** factor
233
!=
power -> atom ** factor
234
and
comparison -> expr comp_op comparison
234
or
comparison -> expr comp_op comparison
234
)
comparison -> expr comp_op comparison
234
,
comparison -> expr comp_op comparison
235
>
arith_expr -> term + arith_expr
235
&
arith_expr -> term + arith_expr
235
,
arith_expr -> term + arith_expr
235
|
arith_expr -> term + arith_expr
235
!=
arith_expr -> term + arith_expr
235
<<
arith_expr -> term + arith_expr
235
<=
arith_expr -> term + arith_expr
235
)
arith_expr -> term + arith_expr
235
<
arith_expr -> term + arith_expr
235
>>
arith_expr -> term + arith_expr
235
and
arith_expr -> term + arith_expr
235
>=
arith_expr -> term + arith_expr
235
==
arith_expr -> term + arith_expr
235
or
arith_expr -> term + arith_expr
235
^
arith_expr -> term + arith_expr
236
!=
arith_expr -> term - arith_expr
236
,
arith_expr -> term - arith_expr
236
<
arith_expr -> term - arith_expr
236
^
arith_expr -> term - arith_expr
236
<=
arith_expr -> term - arith_expr
236
and
arith_expr -> term - arith_expr
236
>=
arith_expr -> term - arith_expr
236
==
arith_expr -> term - arith_expr
236
>>
arith_expr -> term - arith_expr
236
&
arith_expr -> term - arith_expr
236
>
arith_expr -> term - arith_expr
236
or
arith_expr -> term - arith_expr
236
)
arith_expr -> term - arith_expr
236
<<
arith_expr -> term - arith_expr
236
|
arith_expr -> term - arith_expr
237
and
term -> factor // term
237
|
term -> factor // term
237
)
term -> factor // term
237
==
term -> factor // term
237
>>
term -> factor // term
237
<=
term -> factor // term
237
-
term -> factor // term
237
<
term -> factor // term
237
+
term -> factor // term
237
<<
term -> factor // term
237
&
term -> factor // term
237
!=
term -> factor // term
237
,
term -> factor // term
237
or
term -> factor // term
237
>
term -> factor // term
237
^
term -> factor // term
237
>=
term -> factor // term
238
and
term -> factor * term
238
<<
term -> factor * term
238
>>
term -> factor * term
238
>
term -> factor * term
238
==
term -> factor * term
238
!=
term -> factor * term
238
or
term -> factor * term
238
>=
term -> factor * term
238
^
term -> factor * term
238
,
term -> factor * term
238
)
term -> factor * term
238
<=
term -> factor * term
238
-
term -> factor * term
238
<
term -> factor * term
238
|
term -> factor * term
238
+
term -> factor * term
238
&
term -> factor * term
239
>
term -> factor / term
239
+
term -> factor / term
239
>=
term -> factor / term
239
==
term -> factor / term
239
,
term -> factor / term
239
<=
term -> factor / term
239
)
term -> factor / term
239
<<
term -> factor / term
239
|
term -> factor / term
239
&
term -> factor / term
239
-
term -> factor / term
239
and
term -> factor / term
239
or
term -> factor / term
239
>>
term -> factor / term
239
<
term -> factor / term
239
^
term -> factor / term
239
!=
term -> factor / term
240
^
term -> factor % term
240
|
term -> factor % term
240
!=
term -> factor % term
240
<<
term -> factor % term
240
+
term -> factor % term
240
<
term -> factor % term
240
or
term -> factor % term
240
,
term -> factor % term
240
)
term -> factor % term
240
and
term -> factor % term
240
>=
term -> factor % term
240
-
term -> factor % term
240
>>
term -> factor % term
240
&
term -> factor % term
240
==
term -> factor % term
240
>
term -> factor % term
240
<=
term -> factor % term
241
*
call -> NAME ( )
241
,
call -> NAME ( )
241
and
call -> NAME ( )
241
!=
call -> NAME ( )
241
)
call -> NAME ( )
241
>>
call -> NAME ( )
241
<
call -> NAME ( )
241
==
call -> NAME ( )
241
or
call -> NAME ( )
241
//
call -> NAME ( )
241
>=
call -> NAME ( )
241
+
call -> NAME ( )
241
<=
call -> NAME ( )
241
<<
call -> NAME ( )
241
/
call -> NAME ( )
241
%
call -> NAME ( )
241
**
call -> NAME ( )
241
>
call -> NAME ( )
241
|
call -> NAME ( )
241
^
call -> NAME ( )
241
&
call -> NAME ( )
241
-
call -> NAME ( )
242
)
269
243
or
expr -> xor_expr | expr
243
>=
expr -> xor_expr | expr
243
>
expr -> xor_expr | expr
243
and
expr -> xor_expr | expr
243
)
expr -> xor_expr | expr
243
<
expr -> xor_expr | expr
243
,
expr -> xor_expr | expr
243
!=
expr -> xor_expr | expr
243
<=
expr -> xor_expr | expr
243
==
expr -> xor_expr | expr
244
and
shift_expr -> arith_expr << shift_expr
244
<
shift_expr -> arith_expr << shift_expr
244
!=
shift_expr -> arith_expr << shift_expr
244
&
shift_expr -> arith_expr << shift_expr
244
,
shift_expr -> arith_expr << shift_expr
244
^
shift_expr -> arith_expr << shift_expr
244
<=
shift_expr -> arith_expr << shift_expr
244
>=
shift_expr -> arith_expr << shift_expr
244
==
shift_expr -> arith_expr << shift_expr
244
>
shift_expr -> arith_expr << shift_expr
244
or
shift_expr -> arith_expr << shift_expr
244
|
shift_expr -> arith_expr << shift_expr
244
)
shift_expr -> arith_expr << shift_expr
245
<
shift_expr -> arith_expr >> shift_expr
245
<=
shift_expr -> arith_expr >> shift_expr
245
>=
shift_expr -> arith_expr >> shift_expr
245
&
shift_expr -> arith_expr >> shift_expr
245
^
shift_expr -> arith_expr >> shift_expr
245
==
shift_expr -> arith_expr >> shift_expr
245
|
shift_expr -> arith_expr >> shift_expr
245
!=
shift_expr -> arith_expr >> shift_expr
245
,
shift_expr -> arith_expr >> shift_expr
245
and
shift_expr -> arith_expr >> shift_expr
245
>
shift_expr -> arith_expr >> shift_expr
245
or
shift_expr -> arith_expr >> shift_expr
245
)
shift_expr -> arith_expr >> shift_expr
246
or
and_test -> not_test and and_test
246
,
and_test -> not_test and and_test
246
)
and_test -> not_test and and_test
247
==
xor_expr -> and_expr ^ xor_expr
247
,
xor_expr -> and_expr ^ xor_expr
247
>=
xor_expr -> and_expr ^ xor_expr
247
)
xor_expr -> and_expr ^ xor_expr
247
<=
xor_expr -> and_expr ^ xor_expr
247
or
xor_expr -> and_expr ^ xor_expr
247
!=
xor_expr -> and_expr ^ xor_expr
247
<
xor_expr -> and_expr ^ xor_expr
247
|
xor_expr -> and_expr ^ xor_expr
247
>
xor_expr -> and_expr ^ xor_expr
247
and
xor_expr -> and_expr ^ xor_expr
248
)
and_expr -> shift_expr & and_expr
248
>
and_expr -> shift_expr & and_expr
248
or
and_expr -> shift_expr & and_expr
248
and
and_expr -> shift_expr & and_expr
248
<
and_expr -> shift_expr & and_expr
248
|
and_expr -> shift_expr & and_expr
248
<=
and_expr -> shift_expr & and_expr
248
!=
and_expr -> shift_expr & and_expr
248
>=
and_expr -> shift_expr & and_expr
248
^
and_expr -> shift_expr & and_expr
248
,
and_expr -> shift_expr & and_expr
248
==
and_expr -> shift_expr & and_expr
249
+
atom -> [ test_list ]
249
-
atom -> [ test_list ]
249
%
atom -> [ test_list ]
249
**
atom -> [ test_list ]
249
<<
atom -> [ test_list ]
249
or
atom -> [ test_list ]
249
)
atom -> [ test_list ]
249
!=
atom -> [ test_list ]
249
|
atom -> [ test_list ]
249
<
atom -> [ test_list ]
249
>>
atom -> [ test_list ]
249
//
atom -> [ test_list ]
249
&
atom -> [ test_list ]
249
>
atom -> [ test_list ]
249
and
atom -> [ test_list ]
249
<=
atom -> [ test_list ]
249
==
atom -> [ test_list ]
249
/
atom -> [ test_list ]
249
^
atom -> [ test_list ]
249
>=
atom -> [ test_list ]
249
*
atom -> [ test_list ]
249
,
atom -> [ test_list ]
250
)
or_test -> and_test or or_test
250
,
or_test -> and_test or or_test
251
)
test_list -> test , test_list
252
^
call -> NAME ( test_list )
252
<
call -> NAME ( test_list )
252
/
call -> NAME ( test_list )
252
>=
call -> NAME ( test_list )
252
|
call -> NAME ( test_list )
252
%
call -> NAME ( test_list )
252
>
call -> NAME ( test_list )
252
and
call -> NAME ( test_list )
252
<<
call -> NAME ( test_list )
252
-
call -> NAME ( test_list )
252
]
call -> NAME ( test_list )
252
//
call -> NAME ( test_list )
252
<=
call -> NAME ( test_list )
252
!=
call -> NAME ( test_list )
252
==
call -> NAME ( test_list )
252
*
call -> NAME ( test_list )
252
>>
call -> NAME ( test_list )
252
**
call -> NAME ( test_list )
252
&
call -> NAME ( test_list )
252
or
call -> NAME ( test_list )
252
,
call -> NAME ( test_list )
252
+
call -> NAME ( test_list )
253
return
stmt -> if_stmt
253
var
stmt -> if_stmt
253
endloop
stmt -> if_stmt
253
NEWLINE
stmt -> if_stmt
253
if
stmt -> if_stmt
253
nextloop
stmt -> if_stmt
253
NAME
stmt -> if_stmt
253
DEDENT
stmt -> if_stmt
253
loop
stmt -> if_stmt
254
atom
270
254
term
271
254
factor
272
254
False
273
254
STRING
274
254
expr
275
254
power
276
254
xor_expr
277
254
-
278
254
call
279
254
NAME
280
254
shift_expr
281
254
arith_expr
282
254
True
283
254
+
284
254
~
285
254
None
286
254
test
287
254
and_expr
288
254
[
289
254
NUMBER
290
254
comparison
291
254
not
292
254
not_test
293
254
and_test
294
254
or_test
295
255
var
stmt -> assign_stmt
255
return
stmt -> assign_stmt
255
loop
stmt -> assign_stmt
255
NEWLINE
stmt -> assign_stmt
255
NAME
stmt -> assign_stmt
255
endloop
stmt -> assign_stmt
255
if
stmt -> assign_stmt
255
DEDENT
stmt -> assign_stmt
255
nextloop
stmt -> assign_stmt
256
NAME
296
256
:
297
257
var
flow_stmt -> nextloop
257
return
flow_stmt -> nextloop
257
endloop
flow_stmt -> nextloop
257
NEWLINE
flow_stmt -> nextloop
257
if
flow_stmt -> nextloop
257
loop
flow_stmt -> nextloop
257
DEDENT
flow_stmt -> nextloop
257
NAME
flow_stmt -> nextloop
257
nextloop
flow_stmt -> nextloop
258
if
stmt -> loop_stmt
258
endloop
stmt -> loop_stmt
258
NAME
stmt -> loop_stmt
258
DEDENT
stmt -> loop_stmt
258
var
stmt -> loop_stmt
258
return
stmt -> loop_stmt
258
loop
stmt -> loop_stmt
258
NEWLINE
stmt -> loop_stmt
258
nextloop
stmt -> loop_stmt
259
NEWLINE
stmt -> decl_stmt
259
NAME
stmt -> decl_stmt
259
loop
stmt -> decl_stmt
259
return
stmt -> decl_stmt
259
nextloop
stmt -> decl_stmt
259
endloop
stmt -> decl_stmt
259
if
stmt -> decl_stmt
259
DEDENT
stmt -> decl_stmt
259
var
stmt -> decl_stmt
260
endloop
stmt -> flow_stmt
260
DEDENT
stmt -> flow_stmt
260
loop
stmt -> flow_stmt
260
if
stmt -> flow_stmt
260
var
stmt -> flow_stmt
260
return
stmt -> flow_stmt
260
NEWLINE
stmt -> flow_stmt
260
nextloop
stmt -> flow_stmt
260
NAME
stmt -> flow_stmt
261
NAME
stmt -> return_stmt
261
loop
stmt -> return_stmt
261
var
stmt -> return_stmt
261
if
stmt -> return_stmt
261
nextloop
stmt -> return_stmt
261
DEDENT
stmt -> return_stmt
261
endloop
stmt -> return_stmt
261
NEWLINE
stmt -> return_stmt
261
return
stmt -> return_stmt
262
expr
298
262
atom
299
262
test
300
262
False
301
262
STRING
302
262
call
303
262
-
304
262
arith_expr
305
262
factor
306
262
term
307
262
+
308
262
NAME
309
262
power
310
262
xor_expr
311
262
True
312
262
None
313
262
~
314
262
and_expr
315
262
shift_expr
316
262
and_test
317
262
[
318
262
NUMBER
319
262
comparison
320
262
not
321
262
not_test
322
262
or_test
323
263
=
324
264
DEDENT
325
265
if_stmt
253
265
if
254
265
assign_stmt
255
265
loop
256
265
nextloop
257
265
loop_stmt
258
265
decl_stmt
259
265
flow_stmt
260
265
return_stmt
261
265
return
262
265
NAME
263
265
stmt_list
326
265
DEDENT
stmt_list -> 
265
stmt
265
265
var
266
265
endloop
267
265
NEWLINE
268
266
NAME
327
267
var
flow_stmt -> endloop
267
endloop
flow_stmt -> endloop
267
loop
flow_stmt -> endloop
267
nextloop
flow_stmt -> endloop
267
NAME
flow_stmt -> endloop
267
if
flow_stmt -> endloop
267
NEWLINE
flow_stmt -> endloop
267
return
flow_stmt -> endloop
267
DEDENT
flow_stmt -> endloop
268
if_stmt
253
268
if
254
268
assign_stmt
255
268
loop
256
268
nextloop
257
268
loop_stmt
258
268
decl_stmt
259
268
flow_stmt
260
268
return_stmt
261
268
return
262
268
NAME
263
268
DEDENT
stmt_list -> 
268
stmt
265
268
var
266
268
endloop
267
268
stmt_list
328
268
NEWLINE
268
269
^
call -> NAME ( test_list )
269
<
call -> NAME ( test_list )
269
/
call -> NAME ( test_list )
269
>=
call -> NAME ( test_list )
269
|
call -> NAME ( test_list )
269
%
call -> NAME ( test_list )
269
>
call -> NAME ( test_list )
269
and
call -> NAME ( test_list )
269
<<
call -> NAME ( test_list )
269
-
call -> NAME ( test_list )
269
//
call -> NAME ( test_list )
269
<=
call -> NAME ( test_list )
269
!=
call -> NAME ( test_list )
269
==
call -> NAME ( test_list )
269
*
call -> NAME ( test_list )
269
>>
call -> NAME ( test_list )
269
**
call -> NAME ( test_list )
269
&
call -> NAME ( test_list )
269
)
call -> NAME ( test_list )
269
or
call -> NAME ( test_list )
269
,
call -> NAME ( test_list )
269
+
call -> NAME ( test_list )
270
<
power -> atom
270
>>
power -> atom
270
**
329
270
and
power -> atom
270
/
power -> atom
270
>=
power -> atom
270
<=
power -> atom
270
==
power -> atom
270
//
power -> atom
270
<<
power -> atom
270
-
power -> atom
270
:
power -> atom
270
%
power -> atom
270
^
power -> atom
270
!=
power -> atom
270
or
power -> atom
270
*
power -> atom
270
+
power -> atom
270
&
power -> atom
270
>
power -> atom
270
|
power -> atom
271
^
arith_expr -> term
271
<
arith_expr -> term
271
+
330
271
>=
arith_expr -> term
271
-
331
271
<<
arith_expr -> term
271
&
arith_expr -> term
271
and
arith_expr -> term
271
or
arith_expr -> term
271
>>
arith_expr -> term
271
|
arith_expr -> term
271
>
arith_expr -> term
271
:
arith_expr -> term
271
<=
arith_expr -> term
271
!=
arith_expr -> term
271
==
arith_expr -> term
272
//
332
272
*
333
272
/
334
272
%
335
272
+
term -> factor
272
<
term -> factor
272
==
term -> factor
272
<<
term -> factor
272
>
term -> factor
272
&
term -> factor
272
^
term -> factor
272
>=
term -> factor
272
or
term -> factor
272
and
term -> factor
272
<=
term -> factor
272
|
term -> factor
272
:
term -> factor
272
-
term -> factor
272
!=
term -> factor
272
>>
term -> factor
273
==
atom -> False
273
or
atom -> False
273
|
atom -> False
273
%
atom -> False
273
>>
atom -> False
273
-
atom -> False
273
<<
atom -> False
273
**
atom -> False
273
^
atom -> False
273
and
atom -> False
273
!=
atom -> False
273
>=
atom -> False
273
>
atom -> False
273
/
atom -> False
273
*
atom -> False
273
<=
atom -> False
273
//
atom -> False
273
&
atom -> False
273
<
atom -> False
273
+
atom -> False
273
:
atom -> False
274
*
atom -> STRING
274
<<
atom -> STRING
274
!=
atom -> STRING
274
and
atom -> STRING
274
//
atom -> STRING
274
>=
atom -> STRING
274
&
atom -> STRING
274
-
atom -> STRING
274
+
atom -> STRING
274
**
atom -> STRING
274
>>
atom -> STRING
274
:
atom -> STRING
274
/
atom -> STRING
274
|
atom -> STRING
274
^
atom -> STRING
274
or
atom -> STRING
274
%
atom -> STRING
274
==
atom -> STRING
274
<=
atom -> STRING
274
>
atom -> STRING
274
<
atom -> STRING
275
!=
69
275
==
70
275
<
71
275
<=
72
275
>
73
275
>=
74
275
comp_op
336
275
:
comparison -> expr
275
or
comparison -> expr
275
and
comparison -> expr
276
>=
factor -> power
276
or
factor -> power
276
==
factor -> power
276
!=
factor -> power
276
*
factor -> power
276
//
factor -> power
276
-
factor -> power
276
>
factor -> power
276
:
factor -> power
276
+
factor -> power
276
^
factor -> power
276
|
factor -> power
276
&
factor -> power
276
%
factor -> power
276
>>
factor -> power
276
<<
factor -> power
276
/
factor -> power
276
<
factor -> power
276
and
factor -> power
276
<=
factor -> power
277
<=
expr -> xor_expr
277
!=
expr -> xor_expr
277
>
expr -> xor_expr
277
|
337
277
:
expr -> xor_expr
277
>=
expr -> xor_expr
277
<
expr -> xor_expr
277
or
expr -> xor_expr
277
and
expr -> xor_expr
277
==
expr -> xor_expr
278
atom
270
278
False
273
278
STRING
274
278
power
276
278
call
279
278
-
278
278
NAME
280
278
True
283
278
+
284
278
~
285
278
None
286
278
[
289
278
factor
338
278
NUMBER
290
279
**
atom -> call
279
&
atom -> call
279
>
atom -> call
279
<
atom -> call
279
and
atom -> call
279
>>
atom -> call
279
>=
atom -> call
279
<<
atom -> call
279
^
atom -> call
279
//
atom -> call
279
%
atom -> call
279
-
atom -> call
279
*
atom -> call
279
<=
atom -> call
279
|
atom -> call
279
or
atom -> call
279
/
atom -> call
279
:
atom -> call
279
==
atom -> call
279
+
atom -> call
279
!=
atom -> call
280
&
atom -> NAME
280
(
339
280
>=
atom -> NAME
280
<=
atom -> NAME
280
<
atom -> NAME
280
>
atom -> NAME
280
and
atom -> NAME
280
+
atom -> NAME
280
^
atom -> NAME
280
/
atom -> NAME
280
==
atom -> NAME
280
*
atom -> NAME
280
or
atom -> NAME
280
-
atom -> NAME
280
<<
atom -> NAME
280
%
atom -> NAME
280
:
atom -> NAME
280
**
atom -> NAME
280
>>
atom -> NAME
280
!=
atom -> NAME
280
//
atom -> NAME
280
|
atom -> NAME
281
or
and_expr -> shift_expr
281
&
340
281
>
and_expr -> shift_expr
281
and
and_expr -> shift_expr
281
!=
and_expr -> shift_expr
281
^
and_expr -> shift_expr
281
|
and_expr -> shift_expr
281
<
and_expr -> shift_expr
281
==
and_expr -> shift_expr
281
>=
and_expr -> shift_expr
281
:
and_expr -> shift_expr
281
<=
and_expr -> shift_expr
282
<<
341
282
>>
342
282
<
shift_expr -> arith_expr
282
>
shift_expr -> arith_expr
282
>=
shift_expr -> arith_expr
282
or
shift_expr -> arith_expr
282
&
shift_expr -> arith_expr
282
^
shift_expr -> arith_expr
282
<=
shift_expr -> arith_expr
282
and
shift_expr -> arith_expr
282
|
shift_expr -> arith_expr
282
==
shift_expr -> arith_expr
282
:
shift_expr -> arith_expr
282
!=
shift_expr -> arith_expr
283
//
atom -> True
283
>>
atom -> True
283
or
atom -> True
283
>=
atom -> True
283
>
atom -> True
283
<
atom -> True
283
<<
atom -> True
283
*
atom -> True
283
-
atom -> True
283
:
atom -> True
283
!=
atom -> True
283
%
atom -> True
283
+
atom -> True
283
&
atom -> True
283
and
atom -> True
283
==
atom -> True
283
|
atom -> True
283
^
atom -> True
283
**
atom -> True
283
<=
atom -> True
283
/
atom -> True
284
atom
270
284
False
273
284
STRING
274
284
power
276
284
call
279
284
-
278
284
NAME
280
284
True
283
284
+
284
284
~
285
284
None
286
284
[
289
284
factor
343
284
NUMBER
290
285
atom
270
285
False
273
285
STRING
274
285
power
276
285
call
279
285
-
278
285
factor
344
285
NAME
280
285
True
283
285
+
284
285
~
285
285
None
286
285
[
289
285
NUMBER
290
286
==
atom -> None
286
/
atom -> None
286
!=
atom -> None
286
>=
atom -> None
286
>>
atom -> None
286
^
atom -> None
286
+
atom -> None
286
**
atom -> None
286
<=
atom -> None
286
//
atom -> None
286
|
atom -> None
286
:
atom -> None
286
or
atom -> None
286
%
atom -> None
286
>
atom -> None
286
-
atom -> None
286
and
atom -> None
286
&
atom -> None
286
<<
atom -> None
286
*
atom -> None
286
<
atom -> None
287
:
345
288
^
346
288
<=
xor_expr -> and_expr
288
and
xor_expr -> and_expr
288
!=
xor_expr -> and_expr
288
>
xor_expr -> and_expr
288
or
xor_expr -> and_expr
288
>=
xor_expr -> and_expr
288
:
xor_expr -> and_expr
288
|
xor_expr -> and_expr
288
==
xor_expr -> and_expr
288
<
xor_expr -> and_expr
289
atom
92
289
False
93
289
STRING
94
289
expr
95
289
call
96
289
-
97
289
term
98
289
factor
99
289
NAME
100
289
power
101
289
+
102
289
None
103
289
or_test
104
289
xor_expr
105
289
arith_expr
106
289
not_test
107
289
test_list
347
289
and_expr
109
289
shift_expr
110
289
~
111
289
[
112
289
NUMBER
113
289
comparison
114
289
True
115
289
not
116
289
and_test
117
289
test
118
290
//
atom -> NUMBER
290
>>
atom -> NUMBER
290
>
atom -> NUMBER
290
and
atom -> NUMBER
290
&
atom -> NUMBER
290
or
atom -> NUMBER
290
-
atom -> NUMBER
290
%
atom -> NUMBER
290
<
atom -> NUMBER
290
**
atom -> NUMBER
290
*
atom -> NUMBER
290
!=
atom -> NUMBER
290
^
atom -> NUMBER
290
|
atom -> NUMBER
290
+
atom -> NUMBER
290
>=
atom -> NUMBER
290
/
atom -> NUMBER
290
<<
atom -> NUMBER
290
<=
atom -> NUMBER
290
:
atom -> NUMBER
290
==
atom -> NUMBER
291
:
not_test -> comparison
291
and
not_test -> comparison
291
or
not_test -> comparison
292
atom
270
292
term
271
292
factor
272
292
False
273
292
STRING
274
292
expr
275
292
power
276
292
xor_expr
277
292
-
278
292
call
279
292
NAME
280
292
shift_expr
281
292
arith_expr
282
292
True
283
292
+
284
292
~
285
292
None
286
292
and_expr
288
292
[
289
292
NUMBER
290
292
comparison
291
292
not
292
292
not_test
348
293
or
and_test -> not_test
293
:
and_test -> not_test
293
and
349
294
:
or_test -> and_test
294
or
350
295
:
test -> or_test
296
from
351
296
:
352
297
NEWLINE
353
297
suite
354
298
!=
69
298
==
70
298
<
71
298
if
comparison -> expr
298
<=
72
298
comp_op
355
298
>
73
298
>=
74
298
var
comparison -> expr
298
nextloop
comparison -> expr
298
return
comparison -> expr
298
DEDENT
comparison -> expr
298
or
comparison -> expr
298
loop
comparison -> expr
298
endloop
comparison -> expr
298
NEWLINE
comparison -> expr
298
and
comparison -> expr
298
NAME
comparison -> expr
299
<
power -> atom
299
**
356
299
>>
power -> atom
299
DEDENT
power -> atom
299
nextloop
power -> atom
299
and
power -> atom
299
/
power -> atom
299
>=
power -> atom
299
<=
power -> atom
299
==
power -> atom
299
loop
power -> atom
299
NEWLINE
power -> atom
299
var
power -> atom
299
//
power -> atom
299
<<
power -> atom
299
-
power -> atom
299
endloop
power -> atom
299
%
power -> atom
299
^
power -> atom
299
!=
power -> atom
299
*
power -> atom
299
or
power -> atom
299
NAME
power -> atom
299
+
power -> atom
299
&
power -> atom
299
>
power -> atom
299
if
power -> atom
299
return
power -> atom
299
|
power -> atom
300
if
return_stmt -> return test
300
var
return_stmt -> return test
300
NAME
return_stmt -> return test
300
DEDENT
return_stmt -> return test
300
loop
return_stmt -> return test
300
NEWLINE
return_stmt -> return test
300
return
return_stmt -> return test
300
nextloop
return_stmt -> return test
300
endloop
return_stmt -> return test
301
nextloop
atom -> False
301
==
atom -> False
301
var
atom -> False
301
return
atom -> False
301
or
atom -> False
301
|
atom -> False
301
%
atom -> False
301
>>
atom -> False
301
NEWLINE
atom -> False
301
DEDENT
atom -> False
301
-
atom -> False
301
<<
atom -> False
301
loop
atom -> False
301
**
atom -> False
301
^
atom -> False
301
and
atom -> False
301
!=
atom -> False
301
>=
atom -> False
301
if
atom -> False
301
>
atom -> False
301
endloop
atom -> False
301
/
atom -> False
301
*
atom -> False
301
<=
atom -> False
301
//
atom -> False
301
&
atom -> False
301
<
atom -> False
301
+
atom -> False
301
NAME
atom -> False
302
NAME
atom -> STRING
302
if
atom -> STRING
302
*
atom -> STRING
302
<<
atom -> STRING
302
!=
atom -> STRING
302
and
atom -> STRING
302
NEWLINE
atom -> STRING
302
//
atom -> STRING
302
>=
atom -> STRING
302
&
atom -> STRING
302
-
atom -> STRING
302
+
atom -> STRING
302
endloop
atom -> STRING
302
**
atom -> STRING
302
var
atom -> STRING
302
>>
atom -> STRING
302
DEDENT
atom -> STRING
302
/
atom -> STRING
302
nextloop
atom -> STRING
302
|
atom -> STRING
302
^
atom -> STRING
302
or
atom -> STRING
302
%
atom -> STRING
302
return
atom -> STRING
302
==
atom -> STRING
302
loop
atom -> STRING
302
<=
atom -> STRING
302
>
atom -> STRING
302
<
atom -> STRING
303
**
atom -> call
303
&
atom -> call
303
loop
atom -> call
303
>
atom -> call
303
NEWLINE
atom -> call
303
<
atom -> call
303
and
atom -> call
303
endloop
atom -> call
303
>>
atom -> call
303
return
atom -> call
303
>=
atom -> call
303
<<
atom -> call
303
^
atom -> call
303
//
atom -> call
303
%
atom -> call
303
-
atom -> call
303
*
atom -> call
303
NAME
atom -> call
303
<=
atom -> call
303
|
atom -> call
303
or
atom -> call
303
nextloop
atom -> call
303
/
atom -> call
303
==
atom -> call
303
+
atom -> call
303
DEDENT
atom -> call
303
if
atom -> call
303
var
atom -> call
303
!=
atom -> call
304
atom
299
304
-
304
304
False
301
304
STRING
302
304
power
310
304
call
303
304
+
308
304
NAME
309
304
True
312
304
None
313
304
~
314
304
[
318
304
factor
357
304
NUMBER
319
305
<<
358
305
if
shift_expr -> arith_expr
305
>>
359
305
DEDENT
shift_expr -> arith_expr
305
<
shift_expr -> arith_expr
305
NEWLINE
shift_expr -> arith_expr
305
>
shift_expr -> arith_expr
305
>=
shift_expr -> arith_expr
305
or
shift_expr -> arith_expr
305
endloop
shift_expr -> arith_expr
305
&
shift_expr -> arith_expr
305
nextloop
shift_expr -> arith_expr
305
^
shift_expr -> arith_expr
305
<=
shift_expr -> arith_expr
305
and
shift_expr -> arith_expr
305
NAME
shift_expr -> arith_expr
305
|
shift_expr -> arith_expr
305
var
shift_expr -> arith_expr
305
==
shift_expr -> arith_expr
305
return
shift_expr -> arith_expr
305
!=
shift_expr -> arith_expr
305
loop
shift_expr -> arith_expr
306
NEWLINE
term -> factor
306
//
360
306
*
361
306
/
362
306
%
363
306
nextloop
term -> factor
306
+
term -> factor
306
<
term -> factor
306
==
term -> factor
306
<<
term -> factor
306
>
term -> factor
306
&
term -> factor
306
endloop
term -> factor
306
loop
term -> factor
306
^
term -> factor
306
NAME
term -> factor
306
>=
term -> factor
306
or
term -> factor
306
var
term -> factor
306
and
term -> factor
306
return
term -> factor
306
<=
term -> factor
306
if
term -> factor
306
|
term -> factor
306
-
term -> factor
306
!=
term -> factor
306
>>
term -> factor
306
DEDENT
term -> factor
307
^
arith_expr -> term
307
<
arith_expr -> term
307
-
364
307
loop
arith_expr -> term
307
+
365
307
>=
arith_expr -> term
307
<<
arith_expr -> term
307
&
arith_expr -> term
307
return
arith_expr -> term
307
DEDENT
arith_expr -> term
307
and
arith_expr -> term
307
or
arith_expr -> term
307
if
arith_expr -> term
307
>>
arith_expr -> term
307
NAME
arith_expr -> term
307
|
arith_expr -> term
307
>
arith_expr -> term
307
endloop
arith_expr -> term
307
NEWLINE
arith_expr -> term
307
<=
arith_expr -> term
307
!=
arith_expr -> term
307
nextloop
arith_expr -> term
307
==
arith_expr -> term
307
var
arith_expr -> term
308
factor
366
308
-
304
308
atom
299
308
False
301
308
STRING
302
308
power
310
308
call
303
308
+
308
308
NAME
309
308
True
312
308
None
313
308
~
314
308
[
318
308
NUMBER
319
309
>=
atom -> NAME
309
(
367
309
<
atom -> NAME
309
>
atom -> NAME
309
NEWLINE
atom -> NAME
309
if
atom -> NAME
309
/
atom -> NAME
309
or
atom -> NAME
309
<<
atom -> NAME
309
//
atom -> NAME
309
&
atom -> NAME
309
nextloop
atom -> NAME
309
NAME
atom -> NAME
309
^
atom -> NAME
309
loop
atom -> NAME
309
*
atom -> NAME
309
var
atom -> NAME
309
DEDENT
atom -> NAME
309
**
atom -> NAME
309
!=
atom -> NAME
309
endloop
atom -> NAME
309
+
atom -> NAME
309
-
atom -> NAME
309
>>
atom -> NAME
309
<=
atom -> NAME
309
and
atom -> NAME
309
==
atom -> NAME
309
return
atom -> NAME
309
%
atom -> NAME
309
|
atom -> NAME
310
>=
factor -> power
310
if
factor -> power
310
loop
factor -> power
310
or
factor -> power
310
==
factor -> power
310
var
factor -> power
310
NAME
factor -> power
310
!=
factor -> power
310
*
factor -> power
310
//
factor -> power
310
endloop
factor -> power
310
-
factor -> power
310
>
factor -> power
310
+
factor -> power
310
DEDENT
factor -> power
310
^
factor -> power
310
|
factor -> power
310
&
factor -> power
310
%
factor -> power
310
nextloop
factor -> power
310
>>
factor -> power
310
<<
factor -> power
310
<
factor -> power
310
/
factor -> power
310
and
factor -> power
310
<=
factor -> power
310
NEWLINE
factor -> power
310
return
factor -> power
311
|
368
311
>=
expr -> xor_expr
311
NAME
expr -> xor_expr
311
return
expr -> xor_expr
311
<=
expr -> xor_expr
311
DEDENT
expr -> xor_expr
311
or
expr -> xor_expr
311
==
expr -> xor_expr
311
>
expr -> xor_expr
311
<
expr -> xor_expr
311
endloop
expr -> xor_expr
311
var
expr -> xor_expr
311
loop
expr -> xor_expr
311
!=
expr -> xor_expr
311
NEWLINE
expr -> xor_expr
311
if
expr -> xor_expr
311
nextloop
expr -> xor_expr
311
and
expr -> xor_expr
312
//
atom -> True
312
>>
atom -> True
312
or
atom -> True
312
>=
atom -> True
312
>
atom -> True
312
loop
atom -> True
312
<
atom -> True
312
if
atom -> True
312
<<
atom -> True
312
endloop
atom -> True
312
*
atom -> True
312
-
atom -> True
312
return
atom -> True
312
var
atom -> True
312
NAME
atom -> True
312
!=
atom -> True
312
%
atom -> True
312
+
atom -> True
312
&
atom -> True
312
nextloop
atom -> True
312
and
atom -> True
312
==
atom -> True
312
NEWLINE
atom -> True
312
|
atom -> True
312
^
atom -> True
312
DEDENT
atom -> True
312
**
atom -> True
312
<=
atom -> True
312
/
atom -> True
313
nextloop
atom -> None
313
==
atom -> None
313
NAME
atom -> None
313
/
atom -> None
313
!=
atom -> None
313
>=
atom -> None
313
>>
atom -> None
313
if
atom -> None
313
^
atom -> None
313
loop
atom -> None
313
DEDENT
atom -> None
313
+
atom -> None
313
**
atom -> None
313
endloop
atom -> None
313
<=
atom -> None
313
NEWLINE
atom -> None
313
return
atom -> None
313
//
atom -> None
313
|
atom -> None
313
var
atom -> None
313
or
atom -> None
313
%
atom -> None
313
>
atom -> None
313
-
atom -> None
313
and
atom -> None
313
&
atom -> None
313
<<
atom -> None
313
*
atom -> None
313
<
atom -> None
314
atom
299
314
-
304
314
False
301
314
STRING
302
314
power
310
314
call
303
314
+
308
314
factor
369
314
NAME
309
314
True
312
314
None
313
314
~
314
314
[
318
314
NUMBER
319
315
^
370
315
<=
xor_expr -> and_expr
315
and
xor_expr -> and_expr
315
!=
xor_expr -> and_expr
315
NAME
xor_expr -> and_expr
315
>
xor_expr -> and_expr
315
loop
xor_expr -> and_expr
315
endloop
xor_expr -> and_expr
315
NEWLINE
xor_expr -> and_expr
315
if
xor_expr -> and_expr
315
or
xor_expr -> and_expr
315
>=
xor_expr -> and_expr
315
return
xor_expr -> and_expr
315
DEDENT
xor_expr -> and_expr
315
|
xor_expr -> and_expr
315
nextloop
xor_expr -> and_expr
315
var
xor_expr -> and_expr
315
==
xor_expr -> and_expr
315
<
xor_expr -> and_expr
316
or
and_expr -> shift_expr
316
DEDENT
and_expr -> shift_expr
316
&
371
316
var
and_expr -> shift_expr
316
>
and_expr -> shift_expr
316
return
and_expr -> shift_expr
316
and
and_expr -> shift_expr
316
!=
and_expr -> shift_expr
316
^
and_expr -> shift_expr
316
|
and_expr -> shift_expr
316
<
and_expr -> shift_expr
316
NAME
and_expr -> shift_expr
316
==
and_expr -> shift_expr
316
NEWLINE
and_expr -> shift_expr
316
>=
and_expr -> shift_expr
316
loop
and_expr -> shift_expr
316
<=
and_expr -> shift_expr
316
endloop
and_expr -> shift_expr
316
nextloop
and_expr -> shift_expr
316
if
and_expr -> shift_expr
317
return
or_test -> and_test
317
loop
or_test -> and_test
317
var
or_test -> and_test
317
or
372
317
endloop
or_test -> and_test
317
nextloop
or_test -> and_test
317
NAME
or_test -> and_test
317
DEDENT
or_test -> and_test
317
NEWLINE
or_test -> and_test
317
if
or_test -> and_test
318
atom
92
318
False
93
318
STRING
94
318
expr
95
318
call
96
318
-
97
318
term
98
318
factor
99
318
NAME
100
318
power
101
318
+
102
318
None
103
318
or_test
104
318
xor_expr
105
318
arith_expr
106
318
not_test
107
318
test_list
373
318
and_expr
109
318
shift_expr
110
318
~
111
318
[
112
318
NUMBER
113
318
comparison
114
318
True
115
318
not
116
318
and_test
117
318
test
118
319
//
atom -> NUMBER
319
DEDENT
atom -> NUMBER
319
>>
atom -> NUMBER
319
>
atom -> NUMBER
319
and
atom -> NUMBER
319
&
atom -> NUMBER
319
or
atom -> NUMBER
319
-
atom -> NUMBER
319
%
atom -> NUMBER
319
<
atom -> NUMBER
319
NAME
atom -> NUMBER
319
NEWLINE
atom -> NUMBER
319
**
atom -> NUMBER
319
!=
atom -> NUMBER
319
*
atom -> NUMBER
319
var
atom -> NUMBER
319
nextloop
atom -> NUMBER
319
loop
atom -> NUMBER
319
^
atom -> NUMBER
319
|
atom -> NUMBER
319
+
atom -> NUMBER
319
endloop
atom -> NUMBER
319
>=
atom -> NUMBER
319
/
atom -> NUMBER
319
<<
atom -> NUMBER
319
<=
atom -> NUMBER
319
return
atom -> NUMBER
319
if
atom -> NUMBER
319
==
atom -> NUMBER
320
NAME
not_test -> comparison
320
or
not_test -> comparison
320
DEDENT
not_test -> comparison
320
NEWLINE
not_test -> comparison
320
return
not_test -> comparison
320
loop
not_test -> comparison
320
endloop
not_test -> comparison
320
var
not_test -> comparison
320
and
not_test -> comparison
320
if
not_test -> comparison
320
nextloop
not_test -> comparison
321
expr
298
321
atom
299
321
False
301
321
STRING
302
321
call
303
321
-
304
321
arith_expr
305
321
factor
306
321
term
307
321
+
308
321
NAME
309
321
power
310
321
xor_expr
311
321
True
312
321
None
313
321
~
314
321
and_expr
315
321
shift_expr
316
321
[
318
321
NUMBER
319
321
comparison
320
321
not_test
374
321
not
321
322
and
375
322
DEDENT
and_test -> not_test
322
return
and_test -> not_test
322
NAME
and_test -> not_test
322
if
and_test -> not_test
322
loop
and_test -> not_test
322
NEWLINE
and_test -> not_test
322
var
and_test -> not_test
322
or
and_test -> not_test
322
nextloop
and_test -> not_test
322
endloop
and_test -> not_test
323
loop
test -> or_test
323
NAME
test -> or_test
323
if
test -> or_test
323
endloop
test -> or_test
323
var
test -> or_test
323
nextloop
test -> or_test
323
return
test -> or_test
323
DEDENT
test -> or_test
323
NEWLINE
test -> or_test
324
expr
298
324
atom
299
324
False
301
324
STRING
302
324
call
303
324
-
304
324
arith_expr
305
324
factor
306
324
term
307
324
+
308
324
NAME
309
324
power
310
324
xor_expr
311
324
True
312
324
None
313
324
~
314
324
and_expr
315
324
shift_expr
316
324
and_test
317
324
[
318
324
NUMBER
319
324
comparison
320
324
not
321
324
not_test
322
324
or_test
323
324
test
376
325
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
325
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
325
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
326
DEDENT
stmt_list -> stmt stmt_list
327
=
377
328
DEDENT
stmt_list -> NEWLINE stmt_list
329
atom
270
329
False
273
329
STRING
274
329
power
276
329
call
279
329
-
278
329
NAME
280
329
True
283
329
~
285
329
+
284
329
None
286
329
factor
378
329
[
289
329
NUMBER
290
330
atom
270
330
term
271
330
factor
272
330
False
273
330
STRING
274
330
power
276
330
call
279
330
-
278
330
NAME
280
330
True
283
330
+
284
330
~
285
330
None
286
330
arith_expr
379
330
[
289
330
NUMBER
290
331
atom
270
331
term
271
331
factor
272
331
False
273
331
STRING
274
331
power
276
331
call
279
331
-
278
331
NAME
280
331
True
283
331
arith_expr
380
331
+
284
331
~
285
331
None
286
331
[
289
331
NUMBER
290
332
atom
270
332
factor
272
332
False
273
332
STRING
274
332
power
276
332
call
279
332
-
278
332
NAME
280
332
True
283
332
~
285
332
+
284
332
None
286
332
term
381
332
[
289
332
NUMBER
290
333
term
382
333
atom
270
333
factor
272
333
False
273
333
STRING
274
333
power
276
333
-
278
333
call
279
333
NAME
280
333
True
283
333
~
285
333
+
284
333
None
286
333
[
289
333
NUMBER
290
334
atom
270
334
factor
272
334
False
273
334
STRING
274
334
power
276
334
call
279
334
-
278
334
NAME
280
334
True
283
334
~
285
334
+
284
334
None
286
334
term
383
334
[
289
334
NUMBER
290
335
atom
270
335
factor
272
335
False
273
335
STRING
274
335
power
276
335
call
279
335
-
278
335
NAME
280
335
True
283
335
~
285
335
+
284
335
None
286
335
term
384
335
[
289
335
NUMBER
290
336
atom
270
336
term
271
336
factor
272
336
False
273
336
STRING
274
336
expr
275
336
power
276
336
xor_expr
277
336
-
278
336
call
279
336
NAME
280
336
shift_expr
281
336
arith_expr
282
336
True
283
336
+
284
336
~
285
336
None
286
336
and_expr
288
336
[
289
336
NUMBER
290
336
comparison
385
337
atom
270
337
term
271
337
factor
272
337
False
273
337
STRING
274
337
power
276
337
call
279
337
xor_expr
277
337
-
278
337
NAME
280
337
shift_expr
281
337
arith_expr
282
337
True
283
337
+
284
337
~
285
337
expr
386
337
None
286
337
and_expr
288
337
[
289
337
NUMBER
290
338
<<
factor -> - factor
338
/
factor -> - factor
338
:
factor -> - factor
338
-
factor -> - factor
338
>
factor -> - factor
338
^
factor -> - factor
338
+
factor -> - factor
338
*
factor -> - factor
338
>=
factor -> - factor
338
<
factor -> - factor
338
|
factor -> - factor
338
and
factor -> - factor
338
==
factor -> - factor
338
<=
factor -> - factor
338
>>
factor -> - factor
338
&
factor -> - factor
338
%
factor -> - factor
338
//
factor -> - factor
338
or
factor -> - factor
338
!=
factor -> - factor
339
)
387
339
atom
131
339
False
132
339
STRING
133
339
expr
134
339
call
135
339
-
136
339
term
137
339
factor
138
339
NAME
139
339
power
140
339
+
141
339
None
142
339
xor_expr
143
339
arith_expr
144
339
not_test
145
339
~
146
339
and_expr
147
339
shift_expr
148
339
test_list
388
339
[
150
339
NUMBER
151
339
comparison
152
339
or_test
153
339
True
154
339
and_test
155
339
not
156
339
test
157
340
atom
270
340
term
271
340
factor
272
340
False
273
340
STRING
274
340
power
276
340
call
279
340
-
278
340
NAME
280
340
shift_expr
281
340
arith_expr
282
340
True
283
340
+
284
340
~
285
340
None
286
340
[
289
340
NUMBER
290
340
and_expr
389
341
atom
270
341
term
271
341
factor
272
341
False
273
341
STRING
274
341
power
276
341
shift_expr
390
341
-
278
341
call
279
341
NAME
280
341
arith_expr
282
341
True
283
341
+
284
341
~
285
341
None
286
341
[
289
341
NUMBER
290
342
atom
270
342
term
271
342
factor
272
342
False
273
342
STRING
274
342
shift_expr
391
342
power
276
342
call
279
342
-
278
342
NAME
280
342
arith_expr
282
342
True
283
342
+
284
342
~
285
342
None
286
342
[
289
342
NUMBER
290
343
//
factor -> + factor
343
*
factor -> + factor
343
>=
factor -> + factor
343
|
factor -> + factor
343
<<
factor -> + factor
343
>
factor -> + factor
343
and
factor -> + factor
343
<
factor -> + factor
343
==
factor -> + factor
343
>>
factor -> + factor
343
<=
factor -> + factor
343
/
factor -> + factor
343
^
factor -> + factor
343
or
factor -> + factor
343
&
factor -> + factor
343
%
factor -> + factor
343
-
factor -> + factor
343
:
factor -> + factor
343
+
factor -> + factor
343
!=
factor -> + factor
344
:
factor -> ~ factor
344
<<
factor -> ~ factor
344
&
factor -> ~ factor
344
>
factor -> ~ factor
344
!=
factor -> ~ factor
344
and
factor -> ~ factor
344
-
factor -> ~ factor
344
or
factor -> ~ factor
344
>>
factor -> ~ factor
344
/
factor -> ~ factor
344
%
factor -> ~ factor
344
^
factor -> ~ factor
344
//
factor -> ~ factor
344
|
factor -> ~ factor
344
+
factor -> ~ factor
344
==
factor -> ~ factor
344
<=
factor -> ~ factor
344
>=
factor -> ~ factor
344
<
factor -> ~ factor
344
*
factor -> ~ factor
345
NEWLINE
392
345
suite
393
346
atom
270
346
term
271
346
xor_expr
394
346
factor
272
346
False
273
346
STRING
274
346
power
276
346
call
279
346
-
278
346
shift_expr
281
346
NAME
280
346
arith_expr
282
346
True
283
346
+
284
346
~
285
346
None
286
346
and_expr
288
346
[
289
346
NUMBER
290
347
]
395
348
:
not_test -> not not_test
348
and
not_test -> not not_test
348
or
not_test -> not not_test
349
atom
270
349
term
271
349
factor
272
349
False
273
349
STRING
274
349
expr
275
349
power
276
349
xor_expr
277
349
-
278
349
call
279
349
NAME
280
349
shift_expr
281
349
arith_expr
282
349
True
283
349
+
284
349
~
285
349
None
286
349
and_expr
288
349
[
289
349
NUMBER
290
349
comparison
291
349
not
292
349
and_test
396
349
not_test
293
350
atom
270
350
term
271
350
factor
272
350
False
273
350
STRING
274
350
expr
275
350
power
276
350
xor_expr
277
350
-
278
350
call
279
350
NAME
280
350
shift_expr
281
350
arith_expr
282
350
True
283
350
+
284
350
~
285
350
None
286
350
and_expr
288
350
[
289
350
NUMBER
290
350
comparison
291
350
not
292
350
or_test
397
350
not_test
293
350
and_test
294
351
not_test
398
351
atom
399
351
xor_expr
400
351
False
401
351
STRING
402
351
expr
403
351
call
404
351
-
405
351
term
406
351
factor
407
351
NAME
408
351
test
409
351
power
410
351
+
411
351
~
412
351
None
413
351
arith_expr
414
351
and_expr
415
351
shift_expr
416
351
[
417
351
NUMBER
418
351
comparison
419
351
True
420
351
and_test
421
351
or_test
422
351
not
423
352
NEWLINE
353
352
suite
424
353
INDENT
425
354
return
loop_stmt -> loop : suite
354
DEDENT
loop_stmt -> loop : suite
354
if
loop_stmt -> loop : suite
354
NAME
loop_stmt -> loop : suite
354
NEWLINE
loop_stmt -> loop : suite
354
loop
loop_stmt -> loop : suite
354
nextloop
loop_stmt -> loop : suite
354
var
loop_stmt -> loop : suite
354
endloop
loop_stmt -> loop : suite
355
expr
298
355
atom
299
355
False
301
355
STRING
302
355
call
303
355
-
304
355
arith_expr
305
355
factor
306
355
term
307
355
+
308
355
NAME
309
355
power
310
355
xor_expr
311
355
True
312
355
None
313
355
~
314
355
and_expr
315
355
shift_expr
316
355
[
318
355
NUMBER
319
355
comparison
426
356
atom
299
356
-
304
356
False
301
356
STRING
302
356
power
310
356
factor
427
356
call
303
356
+
308
356
NAME
309
356
True
312
356
None
313
356
~
314
356
[
318
356
NUMBER
319
357
<<
factor -> - factor
357
NAME
factor -> - factor
357
/
factor -> - factor
357
var
factor -> - factor
357
DEDENT
factor -> - factor
357
-
factor -> - factor
357
>
factor -> - factor
357
^
factor -> - factor
357
+
factor -> - factor
357
*
factor -> - factor
357
nextloop
factor -> - factor
357
return
factor -> - factor
357
>=
factor -> - factor
357
<
factor -> - factor
357
|
factor -> - factor
357
and
factor -> - factor
357
NEWLINE
factor -> - factor
357
if
factor -> - factor
357
==
factor -> - factor
357
<=
factor -> - factor
357
>>
factor -> - factor
357
&
factor -> - factor
357
%
factor -> - factor
357
//
factor -> - factor
357
loop
factor -> - factor
357
endloop
factor -> - factor
357
or
factor -> - factor
357
!=
factor -> - factor
358
atom
299
358
False
301
358
STRING
302
358
call
303
358
shift_expr
428
358
-
304
358
arith_expr
305
358
factor
306
358
term
307
358
+
308
358
NAME
309
358
power
310
358
True
312
358
None
313
358
~
314
358
[
318
358
NUMBER
319
359
atom
299
359
False
301
359
STRING
302
359
call
303
359
-
304
359
arith_expr
305
359
shift_expr
429
359
factor
306
359
term
307
359
+
308
359
NAME
309
359
power
310
359
True
312
359
None
313
359
~
314
359
[
318
359
NUMBER
319
360
atom
299
360
-
304
360
False
301
360
STRING
302
360
power
310
360
call
303
360
factor
306
360
+
308
360
NAME
309
360
True
312
360
None
313
360
~
314
360
term
430
360
[
318
360
NUMBER
319
361
term
431
361
atom
299
361
-
304
361
False
301
361
power
310
361
factor
306
361
+
308
361
call
303
361
NAME
309
361
True
312
361
None
313
361
~
314
361
[
318
361
STRING
302
361
NUMBER
319
362
atom
299
362
-
304
362
False
301
362
STRING
302
362
power
310
362
call
303
362
term
432
362
factor
306
362
+
308
362
NAME
309
362
True
312
362
None
313
362
~
314
362
[
318
362
NUMBER
319
363
atom
299
363
-
304
363
False
301
363
STRING
302
363
power
310
363
call
303
363
factor
306
363
+
308
363
NAME
309
363
True
312
363
None
313
363
term
433
363
~
314
363
[
318
363
NUMBER
319
364
atom
299
364
False
301
364
STRING
302
364
call
303
364
-
304
364
factor
306
364
term
307
364
+
308
364
NAME
309
364
power
310
364
True
312
364
None
313
364
~
314
364
arith_expr
434
364
[
318
364
NUMBER
319
365
atom
299
365
False
301
365
STRING
302
365
call
303
365
-
304
365
factor
306
365
term
307
365
+
308
365
NAME
309
365
power
310
365
True
312
365
None
313
365
arith_expr
435
365
~
314
365
[
318
365
NUMBER
319
366
//
factor -> + factor
366
return
factor -> + factor
366
*
factor -> + factor
366
DEDENT
factor -> + factor
366
>=
factor -> + factor
366
|
factor -> + factor
366
NEWLINE
factor -> + factor
366
if
factor -> + factor
366
nextloop
factor -> + factor
366
<<
factor -> + factor
366
>
factor -> + factor
366
and
factor -> + factor
366
<
factor -> + factor
366
==
factor -> + factor
366
NAME
factor -> + factor
366
<=
factor -> + factor
366
>>
factor -> + factor
366
/
factor -> + factor
366
^
factor -> + factor
366
or
factor -> + factor
366
loop
factor -> + factor
366
endloop
factor -> + factor
366
&
factor -> + factor
366
%
factor -> + factor
366
var
factor -> + factor
366
-
factor -> + factor
366
+
factor -> + factor
366
!=
factor -> + factor
367
)
436
367
atom
131
367
False
132
367
STRING
133
367
expr
134
367
call
135
367
-
136
367
term
137
367
factor
138
367
NAME
139
367
power
140
367
+
141
367
None
142
367
xor_expr
143
367
arith_expr
144
367
not_test
145
367
~
146
367
and_expr
147
367
shift_expr
148
367
test_list
437
367
[
150
367
NUMBER
151
367
comparison
152
367
or_test
153
367
True
154
367
and_test
155
367
not
156
367
test
157
368
atom
299
368
False
301
368
STRING
302
368
call
303
368
-
304
368
arith_expr
305
368
factor
306
368
term
307
368
+
308
368
NAME
309
368
expr
438
368
power
310
368
xor_expr
311
368
True
312
368
None
313
368
~
314
368
and_expr
315
368
shift_expr
316
368
[
318
368
NUMBER
319
369
endloop
factor -> ~ factor
369
NEWLINE
factor -> ~ factor
369
<<
factor -> ~ factor
369
&
factor -> ~ factor
369
return
factor -> ~ factor
369
>
factor -> ~ factor
369
!=
factor -> ~ factor
369
and
factor -> ~ factor
369
-
factor -> ~ factor
369
or
factor -> ~ factor
369
>>
factor -> ~ factor
369
nextloop
factor -> ~ factor
369
/
factor -> ~ factor
369
%
factor -> ~ factor
369
^
factor -> ~ factor
369
//
factor -> ~ factor
369
NAME
factor -> ~ factor
369
|
factor -> ~ factor
369
+
factor -> ~ factor
369
==
factor -> ~ factor
369
<=
factor -> ~ factor
369
var
factor -> ~ factor
369
>=
factor -> ~ factor
369
DEDENT
factor -> ~ factor
369
loop
factor -> ~ factor
369
if
factor -> ~ factor
369
<
factor -> ~ factor
369
*
factor -> ~ factor
370
atom
299
370
False
301
370
STRING
302
370
call
303
370
-
304
370
arith_expr
305
370
factor
306
370
term
307
370
+
308
370
xor_expr
439
370
NAME
309
370
power
310
370
True
312
370
None
313
370
~
314
370
and_expr
315
370
shift_expr
316
370
[
318
370
NUMBER
319
371
atom
299
371
False
301
371
STRING
302
371
call
303
371
-
304
371
arith_expr
305
371
factor
306
371
term
307
371
+
308
371
NAME
309
371
power
310
371
True
312
371
None
313
371
~
314
371
shift_expr
316
371
[
318
371
NUMBER
319
371
and_expr
440
372
expr
298
372
atom
299
372
False
301
372
STRING
302
372
call
303
372
-
304
372
arith_expr
305
372
factor
306
372
term
307
372
+
308
372
NAME
309
372
power
310
372
xor_expr
311
372
True
312
372
None
313
372
~
314
372
and_expr
315
372
shift_expr
316
372
and_test
317
372
[
318
372
NUMBER
319
372
comparison
320
372
not
321
372
not_test
322
372
or_test
441
373
]
442
374
NAME
not_test -> not not_test
374
and
not_test -> not not_test
374
NEWLINE
not_test -> not not_test
374
var
not_test -> not not_test
374
DEDENT
not_test -> not not_test
374
if
not_test -> not not_test
374
endloop
not_test -> not not_test
374
nextloop
not_test -> not not_test
374
return
not_test -> not not_test
374
loop
not_test -> not not_test
374
or
not_test -> not not_test
375
expr
298
375
atom
299
375
False
301
375
STRING
302
375
call
303
375
-
304
375
arith_expr
305
375
factor
306
375
term
307
375
+
308
375
NAME
309
375
power
310
375
xor_expr
311
375
True
312
375
None
313
375
~
314
375
and_expr
315
375
shift_expr
316
375
[
318
375
NUMBER
319
375
comparison
320
375
and_test
443
375
not
321
375
not_test
322
376
return
assign_stmt -> NAME = test
376
nextloop
assign_stmt -> NAME = test
376
var
assign_stmt -> NAME = test
376
DEDENT
assign_stmt -> NAME = test
376
if
assign_stmt -> NAME = test
376
endloop
assign_stmt -> NAME = test
376
NEWLINE
assign_stmt -> NAME = test
376
NAME
assign_stmt -> NAME = test
376
loop
assign_stmt -> NAME = test
377
expr
298
377
atom
299
377
False
301
377
STRING
302
377
call
303
377
-
304
377
arith_expr
305
377
factor
306
377
term
307
377
+
308
377
NAME
309
377
power
310
377
xor_expr
311
377
True
312
377
None
313
377
~
314
377
and_expr
315
377
shift_expr
316
377
and_test
317
377
[
318
377
NUMBER
319
377
comparison
320
377
not
321
377
test
444
377
not_test
322
377
or_test
323
378
%
power -> atom ** factor
378
<
power -> atom ** factor
378
&
power -> atom ** factor
378
/
power -> atom ** factor
378
^
power -> atom ** factor
378
//
power -> atom ** factor
378
or
power -> atom ** factor
378
<=
power -> atom ** factor
378
and
power -> atom ** factor
378
>
power -> atom ** factor
378
>=
power -> atom ** factor
378
|
power -> atom ** factor
378
-
power -> atom ** factor
378
==
power -> atom ** factor
378
:
power -> atom ** factor
378
+
power -> atom ** factor
378
>>
power -> atom ** factor
378
*
power -> atom ** factor
378
<<
power -> atom ** factor
378
!=
power -> atom ** factor
379
>
arith_expr -> term + arith_expr
379
&
arith_expr -> term + arith_expr
379
:
arith_expr -> term + arith_expr
379
!=
arith_expr -> term + arith_expr
379
|
arith_expr -> term + arith_expr
379
<<
arith_expr -> term + arith_expr
379
<=
arith_expr -> term + arith_expr
379
<
arith_expr -> term + arith_expr
379
>>
arith_expr -> term + arith_expr
379
and
arith_expr -> term + arith_expr
379
>=
arith_expr -> term + arith_expr
379
==
arith_expr -> term + arith_expr
379
or
arith_expr -> term + arith_expr
379
^
arith_expr -> term + arith_expr
380
!=
arith_expr -> term - arith_expr
380
<
arith_expr -> term - arith_expr
380
^
arith_expr -> term - arith_expr
380
<=
arith_expr -> term - arith_expr
380
and
arith_expr -> term - arith_expr
380
>=
arith_expr -> term - arith_expr
380
==
arith_expr -> term - arith_expr
380
>>
arith_expr -> term - arith_expr
380
&
arith_expr -> term - arith_expr
380
>
arith_expr -> term - arith_expr
380
or
arith_expr -> term - arith_expr
380
:
arith_expr -> term - arith_expr
380
<<
arith_expr -> term - arith_expr
380
|
arith_expr -> term - arith_expr
381
and
term -> factor // term
381
|
term -> factor // term
381
==
term -> factor // term
381
<=
term -> factor // term
381
>>
term -> factor // term
381
-
term -> factor // term
381
<
term -> factor // term
381
+
term -> factor // term
381
:
term -> factor // term
381
<<
term -> factor // term
381
&
term -> factor // term
381
!=
term -> factor // term
381
or
term -> factor // term
381
>
term -> factor // term
381
^
term -> factor // term
381
>=
term -> factor // term
382
and
term -> factor * term
382
<<
term -> factor * term
382
>>
term -> factor * term
382
>
term -> factor * term
382
==
term -> factor * term
382
!=
term -> factor * term
382
or
term -> factor * term
382
>=
term -> factor * term
382
^
term -> factor * term
382
:
term -> factor * term
382
<=
term -> factor * term
382
-
term -> factor * term
382
<
term -> factor * term
382
|
term -> factor * term
382
+
term -> factor * term
382
&
term -> factor * term
383
>
term -> factor / term
383
+
term -> factor / term
383
>=
term -> factor / term
383
==
term -> factor / term
383
<=
term -> factor / term
383
:
term -> factor / term
383
<<
term -> factor / term
383
|
term -> factor / term
383
&
term -> factor / term
383
-
term -> factor / term
383
and
term -> factor / term
383
or
term -> factor / term
383
>>
term -> factor / term
383
<
term -> factor / term
383
^
term -> factor / term
383
!=
term -> factor / term
384
^
term -> factor % term
384
|
term -> factor % term
384
!=
term -> factor % term
384
<<
term -> factor % term
384
+
term -> factor % term
384
:
term -> factor % term
384
<
term -> factor % term
384
or
term -> factor % term
384
>=
term -> factor % term
384
and
term -> factor % term
384
-
term -> factor % term
384
>>
term -> factor % term
384
&
term -> factor % term
384
==
term -> factor % term
384
>
term -> factor % term
384
<=
term -> factor % term
385
and
comparison -> expr comp_op comparison
385
or
comparison -> expr comp_op comparison
385
:
comparison -> expr comp_op comparison
386
or
expr -> xor_expr | expr
386
>=
expr -> xor_expr | expr
386
>
expr -> xor_expr | expr
386
and
expr -> xor_expr | expr
386
<
expr -> xor_expr | expr
386
!=
expr -> xor_expr | expr
386
<=
expr -> xor_expr | expr
386
==
expr -> xor_expr | expr
386
:
expr -> xor_expr | expr
387
*
call -> NAME ( )
387
and
call -> NAME ( )
387
!=
call -> NAME ( )
387
>>
call -> NAME ( )
387
<
call -> NAME ( )
387
==
call -> NAME ( )
387
or
call -> NAME ( )
387
:
call -> NAME ( )
387
//
call -> NAME ( )
387
>=
call -> NAME ( )
387
+
call -> NAME ( )
387
<=
call -> NAME ( )
387
<<
call -> NAME ( )
387
/
call -> NAME ( )
387
%
call -> NAME ( )
387
**
call -> NAME ( )
387
>
call -> NAME ( )
387
|
call -> NAME ( )
387
^
call -> NAME ( )
387
&
call -> NAME ( )
387
-
call -> NAME ( )
388
)
445
389
or
and_expr -> shift_expr & and_expr
389
and
and_expr -> shift_expr & and_expr
389
:
and_expr -> shift_expr & and_expr
389
<
and_expr -> shift_expr & and_expr
389
|
and_expr -> shift_expr & and_expr
389
<=
and_expr -> shift_expr & and_expr
389
!=
and_expr -> shift_expr & and_expr
389
>=
and_expr -> shift_expr & and_expr
389
^
and_expr -> shift_expr & and_expr
389
>
and_expr -> shift_expr & and_expr
389
==
and_expr -> shift_expr & and_expr
390
and
shift_expr -> arith_expr << shift_expr
390
<
shift_expr -> arith_expr << shift_expr
390
!=
shift_expr -> arith_expr << shift_expr
390
&
shift_expr -> arith_expr << shift_expr
390
:
shift_expr -> arith_expr << shift_expr
390
^
shift_expr -> arith_expr << shift_expr
390
<=
shift_expr -> arith_expr << shift_expr
390
>=
shift_expr -> arith_expr << shift_expr
390
==
shift_expr -> arith_expr << shift_expr
390
>
shift_expr -> arith_expr << shift_expr
390
or
shift_expr -> arith_expr << shift_expr
390
|
shift_expr -> arith_expr << shift_expr
391
<
shift_expr -> arith_expr >> shift_expr
391
:
shift_expr -> arith_expr >> shift_expr
391
<=
shift_expr -> arith_expr >> shift_expr
391
>=
shift_expr -> arith_expr >> shift_expr
391
&
shift_expr -> arith_expr >> shift_expr
391
^
shift_expr -> arith_expr >> shift_expr
391
==
shift_expr -> arith_expr >> shift_expr
391
|
shift_expr -> arith_expr >> shift_expr
391
!=
shift_expr -> arith_expr >> shift_expr
391
>
shift_expr -> arith_expr >> shift_expr
391
and
shift_expr -> arith_expr >> shift_expr
391
or
shift_expr -> arith_expr >> shift_expr
392
INDENT
446
393
var
if_stmt -> if test : suite
393
NEWLINE
if_stmt -> if test : suite
393
else
447
393
DEDENT
if_stmt -> if test : suite
393
if
if_stmt -> if test : suite
393
nextloop
if_stmt -> if test : suite
393
endloop
if_stmt -> if test : suite
393
NAME
if_stmt -> if test : suite
393
loop
if_stmt -> if test : suite
393
return
if_stmt -> if test : suite
394
==
xor_expr -> and_expr ^ xor_expr
394
>=
xor_expr -> and_expr ^ xor_expr
394
<=
xor_expr -> and_expr ^ xor_expr
394
or
xor_expr -> and_expr ^ xor_expr
394
!=
xor_expr -> and_expr ^ xor_expr
394
<
xor_expr -> and_expr ^ xor_expr
394
:
xor_expr -> and_expr ^ xor_expr
394
|
xor_expr -> and_expr ^ xor_expr
394
>
xor_expr -> and_expr ^ xor_expr
394
and
xor_expr -> and_expr ^ xor_expr
395
+
atom -> [ test_list ]
395
-
atom -> [ test_list ]
395
%
atom -> [ test_list ]
395
**
atom -> [ test_list ]
395
<<
atom -> [ test_list ]
395
or
atom -> [ test_list ]
395
!=
atom -> [ test_list ]
395
|
atom -> [ test_list ]
395
<
atom -> [ test_list ]
395
>>
atom -> [ test_list ]
395
//
atom -> [ test_list ]
395
&
atom -> [ test_list ]
395
>
atom -> [ test_list ]
395
:
atom -> [ test_list ]
395
and
atom -> [ test_list ]
395
<=
atom -> [ test_list ]
395
==
atom -> [ test_list ]
395
/
atom -> [ test_list ]
395
^
atom -> [ test_list ]
395
>=
atom -> [ test_list ]
395
*
atom -> [ test_list ]
396
or
and_test -> not_test and and_test
396
:
and_test -> not_test and and_test
397
:
or_test -> and_test or or_test
398
to
and_test -> not_test
398
and
448
398
:
and_test -> not_test
398
or
and_test -> not_test
399
<
power -> atom
399
**
449
399
>>
power -> atom
399
and
power -> atom
399
/
power -> atom
399
>=
power -> atom
399
<=
power -> atom
399
==
power -> atom
399
//
power -> atom
399
<<
power -> atom
399
-
power -> atom
399
:
power -> atom
399
to
power -> atom
399
%
power -> atom
399
^
power -> atom
399
!=
power -> atom
399
*
power -> atom
399
or
power -> atom
399
+
power -> atom
399
&
power -> atom
399
>
power -> atom
399
|
power -> atom
400
|
450
400
:
expr -> xor_expr
400
>=
expr -> xor_expr
400
<=
expr -> xor_expr
400
or
expr -> xor_expr
400
>
expr -> xor_expr
400
==
expr -> xor_expr
400
<
expr -> xor_expr
400
!=
expr -> xor_expr
400
to
expr -> xor_expr
400
and
expr -> xor_expr
401
==
atom -> False
401
or
atom -> False
401
|
atom -> False
401
%
atom -> False
401
>>
atom -> False
401
-
atom -> False
401
<<
atom -> False
401
**
atom -> False
401
^
atom -> False
401
and
atom -> False
401
!=
atom -> False
401
>=
atom -> False
401
>
atom -> False
401
/
atom -> False
401
*
atom -> False
401
<=
atom -> False
401
//
atom -> False
401
&
atom -> False
401
<
atom -> False
401
to
atom -> False
401
+
atom -> False
401
:
atom -> False
402
*
atom -> STRING
402
to
atom -> STRING
402
<<
atom -> STRING
402
!=
atom -> STRING
402
and
atom -> STRING
402
//
atom -> STRING
402
>=
atom -> STRING
402
&
atom -> STRING
402
-
atom -> STRING
402
+
atom -> STRING
402
**
atom -> STRING
402
>>
atom -> STRING
402
:
atom -> STRING
402
/
atom -> STRING
402
|
atom -> STRING
402
^
atom -> STRING
402
or
atom -> STRING
402
%
atom -> STRING
402
==
atom -> STRING
402
<=
atom -> STRING
402
>
atom -> STRING
402
<
atom -> STRING
403
!=
69
403
==
70
403
<
71
403
<=
72
403
>
73
403
>=
74
403
comp_op
451
403
to
comparison -> expr
403
:
comparison -> expr
403
or
comparison -> expr
403
and
comparison -> expr
404
**
atom -> call
404
&
atom -> call
404
>
atom -> call
404
<
atom -> call
404
and
atom -> call
404
>>
atom -> call
404
>=
atom -> call
404
<<
atom -> call
404
^
atom -> call
404
//
atom -> call
404
%
atom -> call
404
-
atom -> call
404
*
atom -> call
404
<=
atom -> call
404
|
atom -> call
404
or
atom -> call
404
/
atom -> call
404
:
atom -> call
404
==
atom -> call
404
+
atom -> call
404
to
atom -> call
404
!=
atom -> call
405
atom
399
405
False
401
405
STRING
402
405
power
410
405
call
404
405
-
405
405
NAME
408
405
True
420
405
+
411
405
~
412
405
None
413
405
[
417
405
factor
452
405
NUMBER
418
406
^
arith_expr -> term
406
<
arith_expr -> term
406
+
453
406
>=
arith_expr -> term
406
-
454
406
<<
arith_expr -> term
406
&
arith_expr -> term
406
and
arith_expr -> term
406
or
arith_expr -> term
406
>>
arith_expr -> term
406
to
arith_expr -> term
406
|
arith_expr -> term
406
>
arith_expr -> term
406
:
arith_expr -> term
406
<=
arith_expr -> term
406
!=
arith_expr -> term
406
==
arith_expr -> term
407
//
455
407
*
456
407
/
457
407
%
458
407
+
term -> factor
407
<
term -> factor
407
==
term -> factor
407
<<
term -> factor
407
>
term -> factor
407
&
term -> factor
407
to
term -> factor
407
^
term -> factor
407
>=
term -> factor
407
or
term -> factor
407
and
term -> factor
407
<=
term -> factor
407
|
term -> factor
407
:
term -> factor
407
-
term -> factor
407
!=
term -> factor
407
>>
term -> factor
408
&
atom -> NAME
408
>=
atom -> NAME
408
(
459
408
<=
atom -> NAME
408
<
atom -> NAME
408
>
atom -> NAME
408
and
atom -> NAME
408
+
atom -> NAME
408
^
atom -> NAME
408
/
atom -> NAME
408
==
atom -> NAME
408
*
atom -> NAME
408
or
atom -> NAME
408
-
atom -> NAME
408
<<
atom -> NAME
408
%
atom -> NAME
408
:
atom -> NAME
408
**
atom -> NAME
408
to
atom -> NAME
408
>>
atom -> NAME
408
!=
atom -> NAME
408
//
atom -> NAME
408
|
atom -> NAME
409
:
460
409
to
461
410
>=
factor -> power
410
or
factor -> power
410
==
factor -> power
410
!=
factor -> power
410
*
factor -> power
410
//
factor -> power
410
-
factor -> power
410
>
factor -> power
410
:
factor -> power
410
+
factor -> power
410
^
factor -> power
410
|
factor -> power
410
&
factor -> power
410
to
factor -> power
410
%
factor -> power
410
>>
factor -> power
410
<<
factor -> power
410
<
factor -> power
410
/
factor -> power
410
and
factor -> power
410
<=
factor -> power
411
atom
399
411
False
401
411
STRING
402
411
power
410
411
call
404
411
-
405
411
NAME
408
411
True
420
411
+
411
411
~
412
411
None
413
411
[
417
411
factor
462
411
NUMBER
418
412
atom
399
412
False
401
412
STRING
402
412
power
410
412
call
404
412
-
405
412
factor
463
412
NAME
408
412
True
420
412
+
411
412
~
412
412
None
413
412
[
417
412
NUMBER
418
413
==
atom -> None
413
/
atom -> None
413
!=
atom -> None
413
to
atom -> None
413
>=
atom -> None
413
>>
atom -> None
413
^
atom -> None
413
+
atom -> None
413
**
atom -> None
413
<=
atom -> None
413
//
atom -> None
413
|
atom -> None
413
:
atom -> None
413
or
atom -> None
413
%
atom -> None
413
>
atom -> None
413
-
atom -> None
413
and
atom -> None
413
&
atom -> None
413
<<
atom -> None
413
*
atom -> None
413
<
atom -> None
414
<<
464
414
>>
465
414
<
shift_expr -> arith_expr
414
>
shift_expr -> arith_expr
414
>=
shift_expr -> arith_expr
414
or
shift_expr -> arith_expr
414
&
shift_expr -> arith_expr
414
^
shift_expr -> arith_expr
414
<=
shift_expr -> arith_expr
414
and
shift_expr -> arith_expr
414
|
shift_expr -> arith_expr
414
==
shift_expr -> arith_expr
414
to
shift_expr -> arith_expr
414
:
shift_expr -> arith_expr
414
!=
shift_expr -> arith_expr
415
^
466
415
<=
xor_expr -> and_expr
415
and
xor_expr -> and_expr
415
!=
xor_expr -> and_expr
415
>
xor_expr -> and_expr
415
or
xor_expr -> and_expr
415
>=
xor_expr -> and_expr
415
:
xor_expr -> and_expr
415
to
xor_expr -> and_expr
415
|
xor_expr -> and_expr
415
==
xor_expr -> and_expr
415
<
xor_expr -> and_expr
416
or
and_expr -> shift_expr
416
&
467
416
>
and_expr -> shift_expr
416
to
and_expr -> shift_expr
416
and
and_expr -> shift_expr
416
!=
and_expr -> shift_expr
416
^
and_expr -> shift_expr
416
|
and_expr -> shift_expr
416
<
and_expr -> shift_expr
416
==
and_expr -> shift_expr
416
>=
and_expr -> shift_expr
416
:
and_expr -> shift_expr
416
<=
and_expr -> shift_expr
417
atom
92
417
False
93
417
STRING
94
417
expr
95
417
call
96
417
-
97
417
term
98
417
factor
99
417
NAME
100
417
power
101
417
+
102
417
None
103
417
or_test
104
417
xor_expr
105
417
arith_expr
106
417
not_test
107
417
test_list
468
417
and_expr
109
417
shift_expr
110
417
~
111
417
[
112
417
NUMBER
113
417
comparison
114
417
True
115
417
not
116
417
and_test
117
417
test
118
418
//
atom -> NUMBER
418
>>
atom -> NUMBER
418
>
atom -> NUMBER
418
and
atom -> NUMBER
418
&
atom -> NUMBER
418
or
atom -> NUMBER
418
-
atom -> NUMBER
418
%
atom -> NUMBER
418
<
atom -> NUMBER
418
**
atom -> NUMBER
418
!=
atom -> NUMBER
418
*
atom -> NUMBER
418
^
atom -> NUMBER
418
|
atom -> NUMBER
418
+
atom -> NUMBER
418
>=
atom -> NUMBER
418
/
atom -> NUMBER
418
<<
atom -> NUMBER
418
to
atom -> NUMBER
418
<=
atom -> NUMBER
418
:
atom -> NUMBER
418
==
atom -> NUMBER
419
:
not_test -> comparison
419
and
not_test -> comparison
419
or
not_test -> comparison
419
to
not_test -> comparison
420
//
atom -> True
420
>>
atom -> True
420
or
atom -> True
420
>=
atom -> True
420
>
atom -> True
420
to
atom -> True
420
<
atom -> True
420
<<
atom -> True
420
*
atom -> True
420
-
atom -> True
420
:
atom -> True
420
!=
atom -> True
420
%
atom -> True
420
+
atom -> True
420
&
atom -> True
420
and
atom -> True
420
==
atom -> True
420
|
atom -> True
420
^
atom -> True
420
**
atom -> True
420
<=
atom -> True
420
/
atom -> True
421
or
469
421
:
or_test -> and_test
421
to
or_test -> and_test
422
to
test -> or_test
422
:
test -> or_test
423
atom
399
423
term
406
423
xor_expr
400
423
factor
407
423
False
401
423
STRING
402
423
expr
403
423
arith_expr
414
423
power
410
423
-
405
423
and_expr
415
423
call
404
423
shift_expr
416
423
NAME
408
423
True
420
423
+
411
423
~
412
423
None
413
423
[
417
423
NUMBER
418
423
comparison
419
423
not
423
423
not_test
470
424
NAME
loop_stmt -> loop NAME : suite
424
nextloop
loop_stmt -> loop NAME : suite
424
loop
loop_stmt -> loop NAME : suite
424
NEWLINE
loop_stmt -> loop NAME : suite
424
DEDENT
loop_stmt -> loop NAME : suite
424
if
loop_stmt -> loop NAME : suite
424
var
loop_stmt -> loop NAME : suite
424
return
loop_stmt -> loop NAME : suite
424
endloop
loop_stmt -> loop NAME : suite
425
if_stmt
253
425
if
254
425
assign_stmt
255
425
loop
256
425
nextloop
257
425
loop_stmt
258
425
decl_stmt
259
425
flow_stmt
260
425
return_stmt
261
425
return
262
425
stmt_list
471
425
NAME
263
425
DEDENT
stmt_list -> 
425
stmt
265
425
var
266
425
endloop
267
425
NEWLINE
268
426
and
comparison -> expr comp_op comparison
426
loop
comparison -> expr comp_op comparison
426
DEDENT
comparison -> expr comp_op comparison
426
return
comparison -> expr comp_op comparison
426
or
comparison -> expr comp_op comparison
426
NEWLINE
comparison -> expr comp_op comparison
426
endloop
comparison -> expr comp_op comparison
426
var
comparison -> expr comp_op comparison
426
NAME
comparison -> expr comp_op comparison
426
nextloop
comparison -> expr comp_op comparison
426
if
comparison -> expr comp_op comparison
427
%
power -> atom ** factor
427
<
power -> atom ** factor
427
&
power -> atom ** factor
427
/
power -> atom ** factor
427
^
power -> atom ** factor
427
//
power -> atom ** factor
427
<=
power -> atom ** factor
427
or
power -> atom ** factor
427
loop
power -> atom ** factor
427
if
power -> atom ** factor
427
!=
power -> atom ** factor
427
and
power -> atom ** factor
427
DEDENT
power -> atom ** factor
427
>
power -> atom ** factor
427
>=
power -> atom ** factor
427
NAME
power -> atom ** factor
427
|
power -> atom ** factor
427
-
power -> atom ** factor
427
==
power -> atom ** factor
427
+
power -> atom ** factor
427
>>
power -> atom ** factor
427
NEWLINE
power -> atom ** factor
427
var
power -> atom ** factor
427
nextloop
power -> atom ** factor
427
*
power -> atom ** factor
427
<<
power -> atom ** factor
427
return
power -> atom ** factor
427
endloop
power -> atom ** factor
428
&
shift_expr -> arith_expr << shift_expr
428
return
shift_expr -> arith_expr << shift_expr
428
NEWLINE
shift_expr -> arith_expr << shift_expr
428
var
shift_expr -> arith_expr << shift_expr
428
and
shift_expr -> arith_expr << shift_expr
428
loop
shift_expr -> arith_expr << shift_expr
428
endloop
shift_expr -> arith_expr << shift_expr
428
|
shift_expr -> arith_expr << shift_expr
428
DEDENT
shift_expr -> arith_expr << shift_expr
428
nextloop
shift_expr -> arith_expr << shift_expr
428
>=
shift_expr -> arith_expr << shift_expr
428
>
shift_expr -> arith_expr << shift_expr
428
^
shift_expr -> arith_expr << shift_expr
428
if
shift_expr -> arith_expr << shift_expr
428
NAME
shift_expr -> arith_expr << shift_expr
428
<
shift_expr -> arith_expr << shift_expr
428
!=
shift_expr -> arith_expr << shift_expr
428
<=
shift_expr -> arith_expr << shift_expr
428
==
shift_expr -> arith_expr << shift_expr
428
or
shift_expr -> arith_expr << shift_expr
429
<
shift_expr -> arith_expr >> shift_expr
429
DEDENT
shift_expr -> arith_expr >> shift_expr
429
NEWLINE
shift_expr -> arith_expr >> shift_expr
429
endloop
shift_expr -> arith_expr >> shift_expr
429
if
shift_expr -> arith_expr >> shift_expr
429
^
shift_expr -> arith_expr >> shift_expr
429
==
shift_expr -> arith_expr >> shift_expr
429
!=
shift_expr -> arith_expr >> shift_expr
429
nextloop
shift_expr -> arith_expr >> shift_expr
429
or
shift_expr -> arith_expr >> shift_expr
429
>=
shift_expr -> arith_expr >> shift_expr
429
return
shift_expr -> arith_expr >> shift_expr
429
&
shift_expr -> arith_expr >> shift_expr
429
var
shift_expr -> arith_expr >> shift_expr
429
>
shift_expr -> arith_expr >> shift_expr
429
and
shift_expr -> arith_expr >> shift_expr
429
loop
shift_expr -> arith_expr >> shift_expr
429
NAME
shift_expr -> arith_expr >> shift_expr
429
<=
shift_expr -> arith_expr >> shift_expr
429
|
shift_expr -> arith_expr >> shift_expr
430
<<
term -> factor // term
430
if
term -> factor // term
430
NEWLINE
term -> factor // term
430
or
term -> factor // term
430
|
term -> factor // term
430
-
term -> factor // term
430
&
term -> factor // term
430
<
term -> factor // term
430
>
term -> factor // term
430
>=
term -> factor // term
430
and
term -> factor // term
430
>>
term -> factor // term
430
loop
term -> factor // term
430
nextloop
term -> factor // term
430
+
term -> factor // term
430
return
term -> factor // term
430
==
term -> factor // term
430
<=
term -> factor // term
430
endloop
term -> factor // term
430
NAME
term -> factor // term
430
DEDENT
term -> factor // term
430
var
term -> factor // term
430
!=
term -> factor // term
430
^
term -> factor // term
431
nextloop
term -> factor * term
431
==
term -> factor * term
431
NEWLINE
term -> factor * term
431
NAME
term -> factor * term
431
if
term -> factor * term
431
DEDENT
term -> factor * term
431
>
term -> factor * term
431
^
term -> factor * term
431
<=
term -> factor * term
431
<
term -> factor * term
431
return
term -> factor * term
431
&
term -> factor * term
431
and
term -> factor * term
431
<<
term -> factor * term
431
>>
term -> factor * term
431
or
term -> factor * term
431
|
term -> factor * term
431
>=
term -> factor * term
431
!=
term -> factor * term
431
endloop
term -> factor * term
431
-
term -> factor * term
431
var
term -> factor * term
431
loop
term -> factor * term
431
+
term -> factor * term
432
+
term -> factor / term
432
<=
term -> factor / term
432
|
term -> factor / term
432
if
term -> factor / term
432
==
term -> factor / term
432
>
term -> factor / term
432
>=
term -> factor / term
432
NAME
term -> factor / term
432
loop
term -> factor / term
432
return
term -> factor / term
432
&
term -> factor / term
432
var
term -> factor / term
432
endloop
term -> factor / term
432
-
term -> factor / term
432
or
term -> factor / term
432
NEWLINE
term -> factor / term
432
DEDENT
term -> factor / term
432
>>
term -> factor / term
432
<<
term -> factor / term
432
^
term -> factor / term
432
nextloop
term -> factor / term
432
and
term -> factor / term
432
<
term -> factor / term
432
!=
term -> factor / term
433
<<
term -> factor % term
433
DEDENT
term -> factor % term
433
-
term -> factor % term
433
<=
term -> factor % term
433
NEWLINE
term -> factor % term
433
<
term -> factor % term
433
NAME
term -> factor % term
433
and
term -> factor % term
433
var
term -> factor % term
433
if
term -> factor % term
433
&
term -> factor % term
433
nextloop
term -> factor % term
433
>
term -> factor % term
433
^
term -> factor % term
433
|
term -> factor % term
433
!=
term -> factor % term
433
or
term -> factor % term
433
endloop
term -> factor % term
433
+
term -> factor % term
433
>=
term -> factor % term
433
>>
term -> factor % term
433
==
term -> factor % term
433
loop
term -> factor % term
433
return
term -> factor % term
434
!=
arith_expr -> term - arith_expr
434
<
arith_expr -> term - arith_expr
434
^
arith_expr -> term - arith_expr
434
or
arith_expr -> term - arith_expr
434
DEDENT
arith_expr -> term - arith_expr
434
>=
arith_expr -> term - arith_expr
434
==
arith_expr -> term - arith_expr
434
>>
arith_expr -> term - arith_expr
434
>
arith_expr -> term - arith_expr
434
NEWLINE
arith_expr -> term - arith_expr
434
<<
arith_expr -> term - arith_expr
434
if
arith_expr -> term - arith_expr
434
nextloop
arith_expr -> term - arith_expr
434
&
arith_expr -> term - arith_expr
434
return
arith_expr -> term - arith_expr
434
var
arith_expr -> term - arith_expr
434
|
arith_expr -> term - arith_expr
434
NAME
arith_expr -> term - arith_expr
434
<=
arith_expr -> term - arith_expr
434
and
arith_expr -> term - arith_expr
434
loop
arith_expr -> term - arith_expr
434
endloop
arith_expr -> term - arith_expr
435
loop
arith_expr -> term + arith_expr
435
&
arith_expr -> term + arith_expr
435
DEDENT
arith_expr -> term + arith_expr
435
var
arith_expr -> term + arith_expr
435
>=
arith_expr -> term + arith_expr
435
|
arith_expr -> term + arith_expr
435
<<
arith_expr -> term + arith_expr
435
NAME
arith_expr -> term + arith_expr
435
<
arith_expr -> term + arith_expr
435
if
arith_expr -> term + arith_expr
435
NEWLINE
arith_expr -> term + arith_expr
435
^
arith_expr -> term + arith_expr
435
!=
arith_expr -> term + arith_expr
435
>>
arith_expr -> term + arith_expr
435
and
arith_expr -> term + arith_expr
435
nextloop
arith_expr -> term + arith_expr
435
>
arith_expr -> term + arith_expr
435
<=
arith_expr -> term + arith_expr
435
==
arith_expr -> term + arith_expr
435
endloop
arith_expr -> term + arith_expr
435
return
arith_expr -> term + arith_expr
435
or
arith_expr -> term + arith_expr
436
*
call -> NAME ( )
436
endloop
call -> NAME ( )
436
if
call -> NAME ( )
436
and
call -> NAME ( )
436
!=
call -> NAME ( )
436
>>
call -> NAME ( )
436
<
call -> NAME ( )
436
DEDENT
call -> NAME ( )
436
==
call -> NAME ( )
436
var
call -> NAME ( )
436
or
call -> NAME ( )
436
//
call -> NAME ( )
436
>=
call -> NAME ( )
436
+
call -> NAME ( )
436
<=
call -> NAME ( )
436
<<
call -> NAME ( )
436
/
call -> NAME ( )
436
NEWLINE
call -> NAME ( )
436
%
call -> NAME ( )
436
>
call -> NAME ( )
436
NAME
call -> NAME ( )
436
**
call -> NAME ( )
436
nextloop
call -> NAME ( )
436
return
call -> NAME ( )
436
|
call -> NAME ( )
436
^
call -> NAME ( )
436
&
call -> NAME ( )
436
-
call -> NAME ( )
436
loop
call -> NAME ( )
437
)
472
438
NAME
expr -> xor_expr | expr
438
or
expr -> xor_expr | expr
438
DEDENT
expr -> xor_expr | expr
438
>=
expr -> xor_expr | expr
438
>
expr -> xor_expr | expr
438
and
expr -> xor_expr | expr
438
nextloop
expr -> xor_expr | expr
438
<
expr -> xor_expr | expr
438
NEWLINE
expr -> xor_expr | expr
438
var
expr -> xor_expr | expr
438
!=
expr -> xor_expr | expr
438
<=
expr -> xor_expr | expr
438
loop
expr -> xor_expr | expr
438
if
expr -> xor_expr | expr
438
return
expr -> xor_expr | expr
438
endloop
expr -> xor_expr | expr
438
==
expr -> xor_expr | expr
439
==
xor_expr -> and_expr ^ xor_expr
439
>=
xor_expr -> and_expr ^ xor_expr
439
NAME
xor_expr -> and_expr ^ xor_expr
439
return
xor_expr -> and_expr ^ xor_expr
439
NEWLINE
xor_expr -> and_expr ^ xor_expr
439
<=
xor_expr -> and_expr ^ xor_expr
439
loop
xor_expr -> and_expr ^ xor_expr
439
or
xor_expr -> and_expr ^ xor_expr
439
!=
xor_expr -> and_expr ^ xor_expr
439
endloop
xor_expr -> and_expr ^ xor_expr
439
<
xor_expr -> and_expr ^ xor_expr
439
var
xor_expr -> and_expr ^ xor_expr
439
if
xor_expr -> and_expr ^ xor_expr
439
DEDENT
xor_expr -> and_expr ^ xor_expr
439
>
xor_expr -> and_expr ^ xor_expr
439
nextloop
xor_expr -> and_expr ^ xor_expr
439
|
xor_expr -> and_expr ^ xor_expr
439
and
xor_expr -> and_expr ^ xor_expr
440
NEWLINE
and_expr -> shift_expr & and_expr
440
return
and_expr -> shift_expr & and_expr
440
<
and_expr -> shift_expr & and_expr
440
DEDENT
and_expr -> shift_expr & and_expr
440
>=
and_expr -> shift_expr & and_expr
440
endloop
and_expr -> shift_expr & and_expr
440
>
and_expr -> shift_expr & and_expr
440
if
and_expr -> shift_expr & and_expr
440
and
and_expr -> shift_expr & and_expr
440
nextloop
and_expr -> shift_expr & and_expr
440
NAME
and_expr -> shift_expr & and_expr
440
!=
and_expr -> shift_expr & and_expr
440
var
and_expr -> shift_expr & and_expr
440
^
and_expr -> shift_expr & and_expr
440
or
and_expr -> shift_expr & and_expr
440
|
and_expr -> shift_expr & and_expr
440
loop
and_expr -> shift_expr & and_expr
440
<=
and_expr -> shift_expr & and_expr
440
==
and_expr -> shift_expr & and_expr
441
return
or_test -> and_test or or_test
441
loop
or_test -> and_test or or_test
441
DEDENT
or_test -> and_test or or_test
441
if
or_test -> and_test or or_test
441
nextloop
or_test -> and_test or or_test
441
NAME
or_test -> and_test or or_test
441
var
or_test -> and_test or or_test
441
NEWLINE
or_test -> and_test or or_test
441
endloop
or_test -> and_test or or_test
442
+
atom -> [ test_list ]
442
-
atom -> [ test_list ]
442
%
atom -> [ test_list ]
442
**
atom -> [ test_list ]
442
endloop
atom -> [ test_list ]
442
var
atom -> [ test_list ]
442
loop
atom -> [ test_list ]
442
<<
atom -> [ test_list ]
442
or
atom -> [ test_list ]
442
return
atom -> [ test_list ]
442
DEDENT
atom -> [ test_list ]
442
!=
atom -> [ test_list ]
442
|
atom -> [ test_list ]
442
NEWLINE
atom -> [ test_list ]
442
<
atom -> [ test_list ]
442
if
atom -> [ test_list ]
442
>>
atom -> [ test_list ]
442
//
atom -> [ test_list ]
442
&
atom -> [ test_list ]
442
>
atom -> [ test_list ]
442
NAME
atom -> [ test_list ]
442
and
atom -> [ test_list ]
442
<=
atom -> [ test_list ]
442
==
atom -> [ test_list ]
442
/
atom -> [ test_list ]
442
^
atom -> [ test_list ]
442
>=
atom -> [ test_list ]
442
*
atom -> [ test_list ]
442
nextloop
atom -> [ test_list ]
443
nextloop
and_test -> not_test and and_test
443
NAME
and_test -> not_test and and_test
443
var
and_test -> not_test and and_test
443
endloop
and_test -> not_test and and_test
443
DEDENT
and_test -> not_test and and_test
443
loop
and_test -> not_test and and_test
443
or
and_test -> not_test and and_test
443
if
and_test -> not_test and and_test
443
return
and_test -> not_test and and_test
443
NEWLINE
and_test -> not_test and and_test
444
if
decl_stmt -> var NAME = test
444
nextloop
decl_stmt -> var NAME = test
444
var
decl_stmt -> var NAME = test
444
return
decl_stmt -> var NAME = test
444
NAME
decl_stmt -> var NAME = test
444
loop
decl_stmt -> var NAME = test
444
NEWLINE
decl_stmt -> var NAME = test
444
endloop
decl_stmt -> var NAME = test
444
DEDENT
decl_stmt -> var NAME = test
445
^
call -> NAME ( test_list )
445
<
call -> NAME ( test_list )
445
/
call -> NAME ( test_list )
445
>=
call -> NAME ( test_list )
445
:
call -> NAME ( test_list )
445
|
call -> NAME ( test_list )
445
%
call -> NAME ( test_list )
445
>
call -> NAME ( test_list )
445
and
call -> NAME ( test_list )
445
<<
call -> NAME ( test_list )
445
-
call -> NAME ( test_list )
445
//
call -> NAME ( test_list )
445
<=
call -> NAME ( test_list )
445
!=
call -> NAME ( test_list )
445
==
call -> NAME ( test_list )
445
*
call -> NAME ( test_list )
445
>>
call -> NAME ( test_list )
445
**
call -> NAME ( test_list )
445
&
call -> NAME ( test_list )
445
or
call -> NAME ( test_list )
445
+
call -> NAME ( test_list )
446
if_stmt
253
446
if
254
446
assign_stmt
255
446
loop
256
446
nextloop
257
446
loop_stmt
258
446
decl_stmt
259
446
flow_stmt
260
446
return_stmt
261
446
return
262
446
stmt_list
473
446
NAME
263
446
DEDENT
stmt_list -> 
446
stmt
265
446
var
266
446
endloop
267
446
NEWLINE
268
447
:
474
448
not_test
398
448
term
406
448
atom
399
448
xor_expr
400
448
factor
407
448
False
401
448
STRING
402
448
expr
403
448
arith_expr
414
448
power
410
448
-
405
448
and_expr
415
448
call
404
448
shift_expr
416
448
NAME
408
448
True
420
448
+
411
448
~
412
448
None
413
448
[
417
448
NUMBER
418
448
and_test
475
448
comparison
419
448
not
423
449
atom
399
449
False
401
449
STRING
402
449
power
410
449
call
404
449
-
405
449
NAME
408
449
True
420
449
~
412
449
+
411
449
None
413
449
factor
476
449
[
417
449
NUMBER
418
450
atom
399
450
term
406
450
xor_expr
400
450
factor
407
450
False
401
450
STRING
402
450
arith_expr
414
450
power
410
450
-
405
450
call
404
450
and_expr
415
450
shift_expr
416
450
NAME
408
450
True
420
450
+
411
450
~
412
450
expr
477
450
None
413
450
[
417
450
NUMBER
418
451
atom
399
451
term
406
451
xor_expr
400
451
factor
407
451
False
401
451
STRING
402
451
expr
403
451
arith_expr
414
451
power
410
451
-
405
451
and_expr
415
451
call
404
451
shift_expr
416
451
NAME
408
451
True
420
451
+
411
451
~
412
451
None
413
451
[
417
451
NUMBER
418
451
comparison
478
452
<<
factor -> - factor
452
to
factor -> - factor
452
/
factor -> - factor
452
:
factor -> - factor
452
-
factor -> - factor
452
>
factor -> - factor
452
^
factor -> - factor
452
+
factor -> - factor
452
*
factor -> - factor
452
>=
factor -> - factor
452
<
factor -> - factor
452
|
factor -> - factor
452
and
factor -> - factor
452
==
factor -> - factor
452
<=
factor -> - factor
452
>>
factor -> - factor
452
&
factor -> - factor
452
%
factor -> - factor
452
//
factor -> - factor
452
or
factor -> - factor
452
!=
factor -> - factor
453
atom
399
453
term
406
453
factor
407
453
False
401
453
STRING
402
453
power
410
453
call
404
453
-
405
453
NAME
408
453
True
420
453
+
411
453
~
412
453
None
413
453
arith_expr
479
453
[
417
453
NUMBER
418
454
atom
399
454
term
406
454
factor
407
454
False
401
454
STRING
402
454
power
410
454
call
404
454
-
405
454
NAME
408
454
True
420
454
arith_expr
480
454
+
411
454
~
412
454
None
413
454
[
417
454
NUMBER
418
455
atom
399
455
factor
407
455
False
401
455
STRING
402
455
power
410
455
call
404
455
-
405
455
NAME
408
455
True
420
455
~
412
455
+
411
455
None
413
455
term
481
455
[
417
455
NUMBER
418
456
term
482
456
atom
399
456
factor
407
456
False
401
456
STRING
402
456
power
410
456
-
405
456
call
404
456
NAME
408
456
True
420
456
~
412
456
+
411
456
None
413
456
[
417
456
NUMBER
418
457
atom
399
457
factor
407
457
False
401
457
STRING
402
457
power
410
457
call
404
457
-
405
457
NAME
408
457
True
420
457
~
412
457
+
411
457
None
413
457
term
483
457
[
417
457
NUMBER
418
458
atom
399
458
factor
407
458
False
401
458
STRING
402
458
power
410
458
call
404
458
-
405
458
NAME
408
458
True
420
458
~
412
458
+
411
458
None
413
458
term
484
458
[
417
458
NUMBER
418
459
)
485
459
atom
131
459
False
132
459
STRING
133
459
expr
134
459
call
135
459
-
136
459
test_list
486
459
term
137
459
factor
138
459
NAME
139
459
power
140
459
+
141
459
None
142
459
xor_expr
143
459
arith_expr
144
459
not_test
145
459
~
146
459
and_expr
147
459
shift_expr
148
459
[
150
459
NUMBER
151
459
comparison
152
459
or_test
153
459
True
154
459
and_test
155
459
not
156
459
test
157
460
NEWLINE
353
460
suite
487
461
atom
488
461
False
489
461
STRING
490
461
expr
491
461
call
492
461
-
493
461
term
494
461
factor
495
461
NAME
496
461
power
497
461
+
498
461
~
499
461
None
500
461
xor_expr
501
461
arith_expr
502
461
test
503
461
and_expr
504
461
shift_expr
505
461
[
506
461
NUMBER
507
461
comparison
508
461
True
509
461
not_test
510
461
and_test
511
461
or_test
512
461
not
513
462
//
factor -> + factor
462
*
factor -> + factor
462
>=
factor -> + factor
462
|
factor -> + factor
462
<<
factor -> + factor
462
>
factor -> + factor
462
and
factor -> + factor
462
<
factor -> + factor
462
==
factor -> + factor
462
>>
factor -> + factor
462
<=
factor -> + factor
462
/
factor -> + factor
462
^
factor -> + factor
462
or
factor -> + factor
462
&
factor -> + factor
462
%
factor -> + factor
462
-
factor -> + factor
462
:
factor -> + factor
462
to
factor -> + factor
462
+
factor -> + factor
462
!=
factor -> + factor
463
:
factor -> ~ factor
463
<<
factor -> ~ factor
463
&
factor -> ~ factor
463
>
factor -> ~ factor
463
!=
factor -> ~ factor
463
and
factor -> ~ factor
463
to
factor -> ~ factor
463
-
factor -> ~ factor
463
or
factor -> ~ factor
463
>>
factor -> ~ factor
463
/
factor -> ~ factor
463
%
factor -> ~ factor
463
^
factor -> ~ factor
463
//
factor -> ~ factor
463
|
factor -> ~ factor
463
+
factor -> ~ factor
463
==
factor -> ~ factor
463
<=
factor -> ~ factor
463
>=
factor -> ~ factor
463
<
factor -> ~ factor
463
*
factor -> ~ factor
464
atom
399
464
term
406
464
factor
407
464
False
401
464
STRING
402
464
arith_expr
414
464
shift_expr
514
464
power
410
464
-
405
464
call
404
464
NAME
408
464
True
420
464
+
411
464
~
412
464
None
413
464
[
417
464
NUMBER
418
465
atom
399
465
term
406
465
factor
407
465
False
401
465
STRING
402
465
shift_expr
515
465
arith_expr
414
465
power
410
465
-
405
465
call
404
465
NAME
408
465
True
420
465
+
411
465
~
412
465
None
413
465
[
417
465
NUMBER
418
466
atom
399
466
term
406
466
xor_expr
516
466
factor
407
466
False
401
466
STRING
402
466
arith_expr
414
466
power
410
466
-
405
466
call
404
466
and_expr
415
466
shift_expr
416
466
NAME
408
466
True
420
466
+
411
466
~
412
466
None
413
466
[
417
466
NUMBER
418
467
atom
399
467
term
406
467
factor
407
467
False
401
467
STRING
402
467
arith_expr
414
467
power
410
467
-
405
467
call
404
467
NAME
408
467
shift_expr
416
467
True
420
467
+
411
467
~
412
467
None
413
467
[
417
467
NUMBER
418
467
and_expr
517
468
]
518
469
not_test
398
469
term
406
469
atom
399
469
xor_expr
400
469
factor
407
469
False
401
469
STRING
402
469
expr
403
469
arith_expr
414
469
power
410
469
-
405
469
and_expr
415
469
call
404
469
shift_expr
416
469
NAME
408
469
True
420
469
+
411
469
~
412
469
None
413
469
[
417
469
NUMBER
418
469
comparison
419
469
not
423
469
and_test
421
469
or_test
519
470
:
not_test -> not not_test
470
to
not_test -> not not_test
470
and
not_test -> not not_test
470
or
not_test -> not not_test
471
DEDENT
520
472
^
call -> NAME ( test_list )
472
<
call -> NAME ( test_list )
472
/
call -> NAME ( test_list )
472
>=
call -> NAME ( test_list )
472
return
call -> NAME ( test_list )
472
nextloop
call -> NAME ( test_list )
472
|
call -> NAME ( test_list )
472
%
call -> NAME ( test_list )
472
>
call -> NAME ( test_list )
472
and
call -> NAME ( test_list )
472
var
call -> NAME ( test_list )
472
DEDENT
call -> NAME ( test_list )
472
<<
call -> NAME ( test_list )
472
-
call -> NAME ( test_list )
472
loop
call -> NAME ( test_list )
472
NEWLINE
call -> NAME ( test_list )
472
endloop
call -> NAME ( test_list )
472
NAME
call -> NAME ( test_list )
472
//
call -> NAME ( test_list )
472
<=
call -> NAME ( test_list )
472
!=
call -> NAME ( test_list )
472
==
call -> NAME ( test_list )
472
*
call -> NAME ( test_list )
472
>>
call -> NAME ( test_list )
472
**
call -> NAME ( test_list )
472
&
call -> NAME ( test_list )
472
or
call -> NAME ( test_list )
472
if
call -> NAME ( test_list )
472
+
call -> NAME ( test_list )
473
DEDENT
521
474
NEWLINE
353
474
suite
522
475
to
and_test -> not_test and and_test
475
or
and_test -> not_test and and_test
475
:
and_test -> not_test and and_test
476
%
power -> atom ** factor
476
<
power -> atom ** factor
476
&
power -> atom ** factor
476
/
power -> atom ** factor
476
^
power -> atom ** factor
476
to
power -> atom ** factor
476
//
power -> atom ** factor
476
<=
power -> atom ** factor
476
or
power -> atom ** factor
476
and
power -> atom ** factor
476
>
power -> atom ** factor
476
>=
power -> atom ** factor
476
|
power -> atom ** factor
476
-
power -> atom ** factor
476
==
power -> atom ** factor
476
:
power -> atom ** factor
476
+
power -> atom ** factor
476
>>
power -> atom ** factor
476
*
power -> atom ** factor
476
<<
power -> atom ** factor
476
!=
power -> atom ** factor
477
to
expr -> xor_expr | expr
477
or
expr -> xor_expr | expr
477
>=
expr -> xor_expr | expr
477
>
expr -> xor_expr | expr
477
and
expr -> xor_expr | expr
477
<
expr -> xor_expr | expr
477
!=
expr -> xor_expr | expr
477
<=
expr -> xor_expr | expr
477
==
expr -> xor_expr | expr
477
:
expr -> xor_expr | expr
478
and
comparison -> expr comp_op comparison
478
or
comparison -> expr comp_op comparison
478
:
comparison -> expr comp_op comparison
478
to
comparison -> expr comp_op comparison
479
>
arith_expr -> term + arith_expr
479
&
arith_expr -> term + arith_expr
479
:
arith_expr -> term + arith_expr
479
to
arith_expr -> term + arith_expr
479
|
arith_expr -> term + arith_expr
479
!=
arith_expr -> term + arith_expr
479
<<
arith_expr -> term + arith_expr
479
<=
arith_expr -> term + arith_expr
479
<
arith_expr -> term + arith_expr
479
>>
arith_expr -> term + arith_expr
479
and
arith_expr -> term + arith_expr
479
>=
arith_expr -> term + arith_expr
479
==
arith_expr -> term + arith_expr
479
or
arith_expr -> term + arith_expr
479
^
arith_expr -> term + arith_expr
480
!=
arith_expr -> term - arith_expr
480
to
arith_expr -> term - arith_expr
480
<
arith_expr -> term - arith_expr
480
^
arith_expr -> term - arith_expr
480
<=
arith_expr -> term - arith_expr
480
>=
arith_expr -> term - arith_expr
480
and
arith_expr -> term - arith_expr
480
==
arith_expr -> term - arith_expr
480
>>
arith_expr -> term - arith_expr
480
&
arith_expr -> term - arith_expr
480
>
arith_expr -> term - arith_expr
480
or
arith_expr -> term - arith_expr
480
:
arith_expr -> term - arith_expr
480
<<
arith_expr -> term - arith_expr
480
|
arith_expr -> term - arith_expr
481
and
term -> factor // term
481
|
term -> factor // term
481
==
term -> factor // term
481
<=
term -> factor // term
481
>>
term -> factor // term
481
-
term -> factor // term
481
to
term -> factor // term
481
<
term -> factor // term
481
+
term -> factor // term
481
:
term -> factor // term
481
<<
term -> factor // term
481
&
term -> factor // term
481
!=
term -> factor // term
481
or
term -> factor // term
481
>
term -> factor // term
481
^
term -> factor // term
481
>=
term -> factor // term
482
and
term -> factor * term
482
<<
term -> factor * term
482
>>
term -> factor * term
482
>
term -> factor * term
482
==
term -> factor * term
482
!=
term -> factor * term
482
or
term -> factor * term
482
to
term -> factor * term
482
>=
term -> factor * term
482
^
term -> factor * term
482
:
term -> factor * term
482
<=
term -> factor * term
482
-
term -> factor * term
482
<
term -> factor * term
482
|
term -> factor * term
482
+
term -> factor * term
482
&
term -> factor * term
483
>
term -> factor / term
483
+
term -> factor / term
483
>=
term -> factor / term
483
==
term -> factor / term
483
<=
term -> factor / term
483
:
term -> factor / term
483
<<
term -> factor / term
483
|
term -> factor / term
483
&
term -> factor / term
483
-
term -> factor / term
483
and
term -> factor / term
483
or
term -> factor / term
483
>>
term -> factor / term
483
<
term -> factor / term
483
to
term -> factor / term
483
^
term -> factor / term
483
!=
term -> factor / term
484
^
term -> factor % term
484
|
term -> factor % term
484
!=
term -> factor % term
484
<<
term -> factor % term
484
+
term -> factor % term
484
:
term -> factor % term
484
<
term -> factor % term
484
or
term -> factor % term
484
>=
term -> factor % term
484
and
term -> factor % term
484
-
term -> factor % term
484
>>
term -> factor % term
484
&
term -> factor % term
484
==
term -> factor % term
484
to
term -> factor % term
484
>
term -> factor % term
484
<=
term -> factor % term
485
*
call -> NAME ( )
485
and
call -> NAME ( )
485
!=
call -> NAME ( )
485
>>
call -> NAME ( )
485
<
call -> NAME ( )
485
==
call -> NAME ( )
485
or
call -> NAME ( )
485
:
call -> NAME ( )
485
//
call -> NAME ( )
485
>=
call -> NAME ( )
485
+
call -> NAME ( )
485
<=
call -> NAME ( )
485
<<
call -> NAME ( )
485
/
call -> NAME ( )
485
%
call -> NAME ( )
485
**
call -> NAME ( )
485
>
call -> NAME ( )
485
|
call -> NAME ( )
485
to
call -> NAME ( )
485
^
call -> NAME ( )
485
&
call -> NAME ( )
485
-
call -> NAME ( )
486
)
523
487
DEDENT
loop_stmt -> loop NAME from test : suite
487
if
loop_stmt -> loop NAME from test : suite
487
loop
loop_stmt -> loop NAME from test : suite
487
return
loop_stmt -> loop NAME from test : suite
487
var
loop_stmt -> loop NAME from test : suite
487
NAME
loop_stmt -> loop NAME from test : suite
487
endloop
loop_stmt -> loop NAME from test : suite
487
NEWLINE
loop_stmt -> loop NAME from test : suite
487
nextloop
loop_stmt -> loop NAME from test : suite
488
<
power -> atom
488
**
524
488
>>
power -> atom
488
by
power -> atom
488
and
power -> atom
488
/
power -> atom
488
>=
power -> atom
488
<=
power -> atom
488
==
power -> atom
488
//
power -> atom
488
<<
power -> atom
488
-
power -> atom
488
:
power -> atom
488
%
power -> atom
488
^
power -> atom
488
!=
power -> atom
488
*
power -> atom
488
or
power -> atom
488
+
power -> atom
488
&
power -> atom
488
>
power -> atom
488
|
power -> atom
489
==
atom -> False
489
or
atom -> False
489
|
atom -> False
489
%
atom -> False
489
>>
atom -> False
489
by
atom -> False
489
-
atom -> False
489
<<
atom -> False
489
**
atom -> False
489
^
atom -> False
489
and
atom -> False
489
!=
atom -> False
489
>=
atom -> False
489
>
atom -> False
489
/
atom -> False
489
*
atom -> False
489
<=
atom -> False
489
//
atom -> False
489
&
atom -> False
489
<
atom -> False
489
+
atom -> False
489
:
atom -> False
490
by
atom -> STRING
490
*
atom -> STRING
490
<<
atom -> STRING
490
!=
atom -> STRING
490
and
atom -> STRING
490
//
atom -> STRING
490
>=
atom -> STRING
490
&
atom -> STRING
490
-
atom -> STRING
490
+
atom -> STRING
490
**
atom -> STRING
490
>>
atom -> STRING
490
:
atom -> STRING
490
/
atom -> STRING
490
|
atom -> STRING
490
^
atom -> STRING
490
or
atom -> STRING
490
%
atom -> STRING
490
==
atom -> STRING
490
<=
atom -> STRING
490
>
atom -> STRING
490
<
atom -> STRING
491
!=
69
491
==
70
491
<
71
491
<=
72
491
>
73
491
>=
74
491
comp_op
525
491
by
comparison -> expr
491
:
comparison -> expr
491
or
comparison -> expr
491
and
comparison -> expr
492
**
atom -> call
492
&
atom -> call
492
>
atom -> call
492
<
atom -> call
492
and
atom -> call
492
>>
atom -> call
492
>=
atom -> call
492
<<
atom -> call
492
^
atom -> call
492
//
atom -> call
492
%
atom -> call
492
-
atom -> call
492
by
atom -> call
492
*
atom -> call
492
<=
atom -> call
492
|
atom -> call
492
or
atom -> call
492
/
atom -> call
492
:
atom -> call
492
==
atom -> call
492
+
atom -> call
492
!=
atom -> call
493
atom
488
493
False
489
493
STRING
490
493
power
497
493
call
492
493
-
493
493
NAME
496
493
True
509
493
+
498
493
~
499
493
None
500
493
[
506
493
factor
526
493
NUMBER
507
494
^
arith_expr -> term
494
<
arith_expr -> term
494
+
527
494
>=
arith_expr -> term
494
-
528
494
<<
arith_expr -> term
494
&
arith_expr -> term
494
and
arith_expr -> term
494
or
arith_expr -> term
494
>>
arith_expr -> term
494
|
arith_expr -> term
494
>
arith_expr -> term
494
:
arith_expr -> term
494
by
arith_expr -> term
494
<=
arith_expr -> term
494
!=
arith_expr -> term
494
==
arith_expr -> term
495
//
529
495
*
530
495
/
531
495
%
532
495
+
term -> factor
495
by
term -> factor
495
<
term -> factor
495
==
term -> factor
495
<<
term -> factor
495
>
term -> factor
495
&
term -> factor
495
^
term -> factor
495
>=
term -> factor
495
or
term -> factor
495
and
term -> factor
495
<=
term -> factor
495
|
term -> factor
495
:
term -> factor
495
-
term -> factor
495
!=
term -> factor
495
>>
term -> factor
496
&
atom -> NAME
496
>=
atom -> NAME
496
(
533
496
<=
atom -> NAME
496
by
atom -> NAME
496
<
atom -> NAME
496
>
atom -> NAME
496
and
atom -> NAME
496
+
atom -> NAME
496
^
atom -> NAME
496
/
atom -> NAME
496
==
atom -> NAME
496
*
atom -> NAME
496
or
atom -> NAME
496
-
atom -> NAME
496
<<
atom -> NAME
496
%
atom -> NAME
496
:
atom -> NAME
496
**
atom -> NAME
496
>>
atom -> NAME
496
!=
atom -> NAME
496
//
atom -> NAME
496
|
atom -> NAME
497
>=
factor -> power
497
or
factor -> power
497
==
factor -> power
497
!=
factor -> power
497
*
factor -> power
497
//
factor -> power
497
by
factor -> power
497
-
factor -> power
497
>
factor -> power
497
:
factor -> power
497
+
factor -> power
497
^
factor -> power
497
|
factor -> power
497
&
factor -> power
497
%
factor -> power
497
>>
factor -> power
497
<<
factor -> power
497
<
factor -> power
497
/
factor -> power
497
and
factor -> power
497
<=
factor -> power
498
atom
488
498
False
489
498
STRING
490
498
power
497
498
call
492
498
-
493
498
NAME
496
498
True
509
498
+
498
498
~
499
498
None
500
498
[
506
498
factor
534
498
NUMBER
507
499
atom
488
499
False
489
499
STRING
490
499
power
497
499
call
492
499
-
493
499
factor
535
499
NAME
496
499
True
509
499
+
498
499
~
499
499
None
500
499
[
506
499
NUMBER
507
500
by
atom -> None
500
==
atom -> None
500
/
atom -> None
500
!=
atom -> None
500
>=
atom -> None
500
>>
atom -> None
500
^
atom -> None
500
+
atom -> None
500
**
atom -> None
500
<=
atom -> None
500
//
atom -> None
500
|
atom -> None
500
:
atom -> None
500
or
atom -> None
500
%
atom -> None
500
>
atom -> None
500
-
atom -> None
500
and
atom -> None
500
&
atom -> None
500
<<
atom -> None
500
*
atom -> None
500
<
atom -> None
501
|
536
501
:
expr -> xor_expr
501
>=
expr -> xor_expr
501
<=
expr -> xor_expr
501
or
expr -> xor_expr
501
>
expr -> xor_expr
501
==
expr -> xor_expr
501
<
expr -> xor_expr
501
by
expr -> xor_expr
501
!=
expr -> xor_expr
501
and
expr -> xor_expr
502
<<
537
502
>>
538
502
<
shift_expr -> arith_expr
502
>
shift_expr -> arith_expr
502
>=
shift_expr -> arith_expr
502
or
shift_expr -> arith_expr
502
&
shift_expr -> arith_expr
502
by
shift_expr -> arith_expr
502
^
shift_expr -> arith_expr
502
<=
shift_expr -> arith_expr
502
and
shift_expr -> arith_expr
502
|
shift_expr -> arith_expr
502
==
shift_expr -> arith_expr
502
:
shift_expr -> arith_expr
502
!=
shift_expr -> arith_expr
503
:
539
503
by
540
504
^
541
504
<=
xor_expr -> and_expr
504
and
xor_expr -> and_expr
504
!=
xor_expr -> and_expr
504
>
xor_expr -> and_expr
504
or
xor_expr -> and_expr
504
>=
xor_expr -> and_expr
504
:
xor_expr -> and_expr
504
|
xor_expr -> and_expr
504
==
xor_expr -> and_expr
504
by
xor_expr -> and_expr
504
<
xor_expr -> and_expr
505
or
and_expr -> shift_expr
505
&
542
505
>
and_expr -> shift_expr
505
and
and_expr -> shift_expr
505
!=
and_expr -> shift_expr
505
^
and_expr -> shift_expr
505
|
and_expr -> shift_expr
505
<
and_expr -> shift_expr
505
==
and_expr -> shift_expr
505
>=
and_expr -> shift_expr
505
:
and_expr -> shift_expr
505
<=
and_expr -> shift_expr
505
by
and_expr -> shift_expr
506
atom
92
506
False
93
506
STRING
94
506
expr
95
506
call
96
506
-
97
506
term
98
506
factor
99
506
NAME
100
506
power
101
506
+
102
506
None
103
506
or_test
104
506
xor_expr
105
506
arith_expr
106
506
not_test
107
506
test_list
543
506
and_expr
109
506
shift_expr
110
506
~
111
506
[
112
506
NUMBER
113
506
comparison
114
506
True
115
506
not
116
506
and_test
117
506
test
118
507
//
atom -> NUMBER
507
>>
atom -> NUMBER
507
>
atom -> NUMBER
507
and
atom -> NUMBER
507
&
atom -> NUMBER
507
or
atom -> NUMBER
507
-
atom -> NUMBER
507
%
atom -> NUMBER
507
<
atom -> NUMBER
507
**
atom -> NUMBER
507
!=
atom -> NUMBER
507
*
atom -> NUMBER
507
^
atom -> NUMBER
507
|
atom -> NUMBER
507
+
atom -> NUMBER
507
>=
atom -> NUMBER
507
/
atom -> NUMBER
507
<<
atom -> NUMBER
507
<=
atom -> NUMBER
507
:
atom -> NUMBER
507
by
atom -> NUMBER
507
==
atom -> NUMBER
508
:
not_test -> comparison
508
and
not_test -> comparison
508
or
not_test -> comparison
508
by
not_test -> comparison
509
//
atom -> True
509
>>
atom -> True
509
or
atom -> True
509
>=
atom -> True
509
>
atom -> True
509
<
atom -> True
509
by
atom -> True
509
<<
atom -> True
509
*
atom -> True
509
-
atom -> True
509
:
atom -> True
509
!=
atom -> True
509
%
atom -> True
509
+
atom -> True
509
&
atom -> True
509
and
atom -> True
509
==
atom -> True
509
|
atom -> True
509
^
atom -> True
509
**
atom -> True
509
<=
atom -> True
509
/
atom -> True
510
by
and_test -> not_test
510
and
544
510
:
and_test -> not_test
510
or
and_test -> not_test
511
:
or_test -> and_test
511
or
545
511
by
or_test -> and_test
512
by
test -> or_test
512
:
test -> or_test
513
atom
488
513
term
494
513
factor
495
513
False
489
513
STRING
490
513
expr
491
513
power
497
513
xor_expr
501
513
-
493
513
call
492
513
NAME
496
513
shift_expr
505
513
arith_expr
502
513
True
509
513
+
498
513
~
499
513
None
500
513
and_expr
504
513
[
506
513
not
513
513
NUMBER
507
513
comparison
508
513
not_test
546
514
and
shift_expr -> arith_expr << shift_expr
514
<
shift_expr -> arith_expr << shift_expr
514
!=
shift_expr -> arith_expr << shift_expr
514
&
shift_expr -> arith_expr << shift_expr
514
to
shift_expr -> arith_expr << shift_expr
514
:
shift_expr -> arith_expr << shift_expr
514
^
shift_expr -> arith_expr << shift_expr
514
<=
shift_expr -> arith_expr << shift_expr
514
>=
shift_expr -> arith_expr << shift_expr
514
==
shift_expr -> arith_expr << shift_expr
514
>
shift_expr -> arith_expr << shift_expr
514
or
shift_expr -> arith_expr << shift_expr
514
|
shift_expr -> arith_expr << shift_expr
515
<
shift_expr -> arith_expr >> shift_expr
515
:
shift_expr -> arith_expr >> shift_expr
515
<=
shift_expr -> arith_expr >> shift_expr
515
>=
shift_expr -> arith_expr >> shift_expr
515
&
shift_expr -> arith_expr >> shift_expr
515
^
shift_expr -> arith_expr >> shift_expr
515
==
shift_expr -> arith_expr >> shift_expr
515
|
shift_expr -> arith_expr >> shift_expr
515
!=
shift_expr -> arith_expr >> shift_expr
515
>
shift_expr -> arith_expr >> shift_expr
515
and
shift_expr -> arith_expr >> shift_expr
515
to
shift_expr -> arith_expr >> shift_expr
515
or
shift_expr -> arith_expr >> shift_expr
516
==
xor_expr -> and_expr ^ xor_expr
516
to
xor_expr -> and_expr ^ xor_expr
516
>=
xor_expr -> and_expr ^ xor_expr
516
<=
xor_expr -> and_expr ^ xor_expr
516
or
xor_expr -> and_expr ^ xor_expr
516
!=
xor_expr -> and_expr ^ xor_expr
516
<
xor_expr -> and_expr ^ xor_expr
516
:
xor_expr -> and_expr ^ xor_expr
516
|
xor_expr -> and_expr ^ xor_expr
516
>
xor_expr -> and_expr ^ xor_expr
516
and
xor_expr -> and_expr ^ xor_expr
517
or
and_expr -> shift_expr & and_expr
517
and
and_expr -> shift_expr & and_expr
517
:
and_expr -> shift_expr & and_expr
517
<
and_expr -> shift_expr & and_expr
517
to
and_expr -> shift_expr & and_expr
517
|
and_expr -> shift_expr & and_expr
517
<=
and_expr -> shift_expr & and_expr
517
!=
and_expr -> shift_expr & and_expr
517
>=
and_expr -> shift_expr & and_expr
517
^
and_expr -> shift_expr & and_expr
517
>
and_expr -> shift_expr & and_expr
517
==
and_expr -> shift_expr & and_expr
518
to
atom -> [ test_list ]
518
+
atom -> [ test_list ]
518
-
atom -> [ test_list ]
518
%
atom -> [ test_list ]
518
**
atom -> [ test_list ]
518
<<
atom -> [ test_list ]
518
or
atom -> [ test_list ]
518
!=
atom -> [ test_list ]
518
|
atom -> [ test_list ]
518
<
atom -> [ test_list ]
518
>>
atom -> [ test_list ]
518
//
atom -> [ test_list ]
518
&
atom -> [ test_list ]
518
>
atom -> [ test_list ]
518
:
atom -> [ test_list ]
518
and
atom -> [ test_list ]
518
<=
atom -> [ test_list ]
518
==
atom -> [ test_list ]
518
/
atom -> [ test_list ]
518
^
atom -> [ test_list ]
518
>=
atom -> [ test_list ]
518
*
atom -> [ test_list ]
519
to
or_test -> and_test or or_test
519
:
or_test -> and_test or or_test
520
nextloop
suite -> NEWLINE INDENT stmt_list DEDENT
520
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
520
var
suite -> NEWLINE INDENT stmt_list DEDENT
520
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
520
loop
suite -> NEWLINE INDENT stmt_list DEDENT
520
endloop
suite -> NEWLINE INDENT stmt_list DEDENT
520
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
520
if
suite -> NEWLINE INDENT stmt_list DEDENT
520
return
suite -> NEWLINE INDENT stmt_list DEDENT
521
nextloop
suite -> NEWLINE INDENT stmt_list DEDENT
521
else
suite -> NEWLINE INDENT stmt_list DEDENT
521
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
521
var
suite -> NEWLINE INDENT stmt_list DEDENT
521
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
521
loop
suite -> NEWLINE INDENT stmt_list DEDENT
521
endloop
suite -> NEWLINE INDENT stmt_list DEDENT
521
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
521
if
suite -> NEWLINE INDENT stmt_list DEDENT
521
return
suite -> NEWLINE INDENT stmt_list DEDENT
522
DEDENT
if_stmt -> if test : suite else : suite
522
return
if_stmt -> if test : suite else : suite
522
NAME
if_stmt -> if test : suite else : suite
522
var
if_stmt -> if test : suite else : suite
522
NEWLINE
if_stmt -> if test : suite else : suite
522
endloop
if_stmt -> if test : suite else : suite
522
if
if_stmt -> if test : suite else : suite
522
loop
if_stmt -> if test : suite else : suite
522
nextloop
if_stmt -> if test : suite else : suite
523
^
call -> NAME ( test_list )
523
<
call -> NAME ( test_list )
523
/
call -> NAME ( test_list )
523
>=
call -> NAME ( test_list )
523
:
call -> NAME ( test_list )
523
|
call -> NAME ( test_list )
523
%
call -> NAME ( test_list )
523
>
call -> NAME ( test_list )
523
and
call -> NAME ( test_list )
523
<<
call -> NAME ( test_list )
523
-
call -> NAME ( test_list )
523
//
call -> NAME ( test_list )
523
<=
call -> NAME ( test_list )
523
!=
call -> NAME ( test_list )
523
==
call -> NAME ( test_list )
523
to
call -> NAME ( test_list )
523
*
call -> NAME ( test_list )
523
>>
call -> NAME ( test_list )
523
**
call -> NAME ( test_list )
523
&
call -> NAME ( test_list )
523
or
call -> NAME ( test_list )
523
+
call -> NAME ( test_list )
524
atom
488
524
False
489
524
STRING
490
524
power
497
524
call
492
524
-
493
524
NAME
496
524
True
509
524
~
499
524
+
498
524
None
500
524
factor
547
524
[
506
524
NUMBER
507
525
atom
488
525
term
494
525
factor
495
525
False
489
525
STRING
490
525
expr
491
525
power
497
525
xor_expr
501
525
-
493
525
call
492
525
NAME
496
525
shift_expr
505
525
arith_expr
502
525
True
509
525
+
498
525
~
499
525
None
500
525
and_expr
504
525
[
506
525
NUMBER
507
525
comparison
548
526
<<
factor -> - factor
526
/
factor -> - factor
526
:
factor -> - factor
526
-
factor -> - factor
526
by
factor -> - factor
526
>
factor -> - factor
526
^
factor -> - factor
526
+
factor -> - factor
526
*
factor -> - factor
526
>=
factor -> - factor
526
<
factor -> - factor
526
|
factor -> - factor
526
and
factor -> - factor
526
==
factor -> - factor
526
<=
factor -> - factor
526
>>
factor -> - factor
526
&
factor -> - factor
526
%
factor -> - factor
526
//
factor -> - factor
526
or
factor -> - factor
526
!=
factor -> - factor
527
atom
488
527
term
494
527
factor
495
527
False
489
527
STRING
490
527
power
497
527
call
492
527
-
493
527
NAME
496
527
True
509
527
+
498
527
~
499
527
None
500
527
arith_expr
549
527
[
506
527
NUMBER
507
528
atom
488
528
term
494
528
factor
495
528
False
489
528
STRING
490
528
power
497
528
call
492
528
-
493
528
NAME
496
528
True
509
528
arith_expr
550
528
+
498
528
~
499
528
None
500
528
[
506
528
NUMBER
507
529
atom
488
529
factor
495
529
False
489
529
STRING
490
529
power
497
529
call
492
529
-
493
529
NAME
496
529
True
509
529
~
499
529
+
498
529
None
500
529
term
551
529
[
506
529
NUMBER
507
530
term
552
530
atom
488
530
factor
495
530
False
489
530
STRING
490
530
power
497
530
-
493
530
call
492
530
NAME
496
530
True
509
530
~
499
530
+
498
530
None
500
530
[
506
530
NUMBER
507
531
atom
488
531
factor
495
531
False
489
531
STRING
490
531
power
497
531
call
492
531
-
493
531
NAME
496
531
True
509
531
~
499
531
+
498
531
None
500
531
term
553
531
[
506
531
NUMBER
507
532
atom
488
532
factor
495
532
False
489
532
STRING
490
532
power
497
532
call
492
532
-
493
532
NAME
496
532
True
509
532
~
499
532
+
498
532
None
500
532
term
554
532
[
506
532
NUMBER
507
533
)
555
533
atom
131
533
False
132
533
STRING
133
533
expr
134
533
call
135
533
-
136
533
term
137
533
factor
138
533
NAME
139
533
power
140
533
+
141
533
None
142
533
xor_expr
143
533
arith_expr
144
533
not_test
145
533
~
146
533
and_expr
147
533
shift_expr
148
533
test_list
556
533
[
150
533
NUMBER
151
533
comparison
152
533
or_test
153
533
True
154
533
and_test
155
533
not
156
533
test
157
534
//
factor -> + factor
534
*
factor -> + factor
534
>=
factor -> + factor
534
|
factor -> + factor
534
by
factor -> + factor
534
<<
factor -> + factor
534
>
factor -> + factor
534
and
factor -> + factor
534
<
factor -> + factor
534
==
factor -> + factor
534
>>
factor -> + factor
534
<=
factor -> + factor
534
/
factor -> + factor
534
^
factor -> + factor
534
or
factor -> + factor
534
&
factor -> + factor
534
%
factor -> + factor
534
-
factor -> + factor
534
:
factor -> + factor
534
+
factor -> + factor
534
!=
factor -> + factor
535
:
factor -> ~ factor
535
<<
factor -> ~ factor
535
&
factor -> ~ factor
535
>
factor -> ~ factor
535
!=
factor -> ~ factor
535
and
factor -> ~ factor
535
-
factor -> ~ factor
535
or
factor -> ~ factor
535
>>
factor -> ~ factor
535
/
factor -> ~ factor
535
%
factor -> ~ factor
535
^
factor -> ~ factor
535
//
factor -> ~ factor
535
|
factor -> ~ factor
535
+
factor -> ~ factor
535
==
factor -> ~ factor
535
<=
factor -> ~ factor
535
>=
factor -> ~ factor
535
by
factor -> ~ factor
535
<
factor -> ~ factor
535
*
factor -> ~ factor
536
atom
488
536
term
494
536
factor
495
536
False
489
536
STRING
490
536
power
497
536
call
492
536
xor_expr
501
536
-
493
536
NAME
496
536
shift_expr
505
536
arith_expr
502
536
True
509
536
+
498
536
~
499
536
expr
557
536
None
500
536
and_expr
504
536
[
506
536
NUMBER
507
537
atom
488
537
term
494
537
factor
495
537
False
489
537
STRING
490
537
power
497
537
shift_expr
558
537
-
493
537
call
492
537
NAME
496
537
arith_expr
502
537
True
509
537
+
498
537
~
499
537
None
500
537
[
506
537
NUMBER
507
538
atom
488
538
term
494
538
factor
495
538
False
489
538
STRING
490
538
shift_expr
559
538
power
497
538
call
492
538
-
493
538
NAME
496
538
arith_expr
502
538
True
509
538
+
498
538
~
499
538
None
500
538
[
506
538
NUMBER
507
539
NEWLINE
353
539
suite
560
540
atom
270
540
term
271
540
factor
272
540
False
273
540
STRING
274
540
expr
275
540
power
276
540
xor_expr
277
540
-
278
540
call
279
540
NAME
280
540
shift_expr
281
540
test
561
540
arith_expr
282
540
True
283
540
+
284
540
~
285
540
None
286
540
and_expr
288
540
[
289
540
NUMBER
290
540
comparison
291
540
not
292
540
not_test
293
540
and_test
294
540
or_test
295
541
atom
488
541
term
494
541
xor_expr
562
541
factor
495
541
False
489
541
STRING
490
541
power
497
541
call
492
541
-
493
541
NAME
496
541
shift_expr
505
541
arith_expr
502
541
True
509
541
+
498
541
~
499
541
None
500
541
and_expr
504
541
[
506
541
NUMBER
507
542
atom
488
542
term
494
542
and_expr
563
542
factor
495
542
False
489
542
STRING
490
542
power
497
542
call
492
542
-
493
542
NAME
496
542
shift_expr
505
542
arith_expr
502
542
True
509
542
+
498
542
~
499
542
None
500
542
[
506
542
NUMBER
507
543
]
564
544
atom
488
544
term
494
544
factor
495
544
False
489
544
STRING
490
544
expr
491
544
power
497
544
xor_expr
501
544
-
493
544
call
492
544
NAME
496
544
shift_expr
505
544
arith_expr
502
544
True
509
544
+
498
544
~
499
544
None
500
544
and_expr
504
544
[
506
544
not
513
544
NUMBER
507
544
comparison
508
544
not_test
510
544
and_test
565
545
atom
488
545
term
494
545
factor
495
545
False
489
545
STRING
490
545
expr
491
545
power
497
545
xor_expr
501
545
-
493
545
call
492
545
NAME
496
545
shift_expr
505
545
arith_expr
502
545
True
509
545
+
498
545
~
499
545
None
500
545
and_expr
504
545
[
506
545
not
513
545
and_test
511
545
NUMBER
507
545
comparison
508
545
or_test
566
545
not_test
510
546
:
not_test -> not not_test
546
and
not_test -> not not_test
546
by
not_test -> not not_test
546
or
not_test -> not not_test
547
%
power -> atom ** factor
547
<
power -> atom ** factor
547
&
power -> atom ** factor
547
/
power -> atom ** factor
547
^
power -> atom ** factor
547
//
power -> atom ** factor
547
<=
power -> atom ** factor
547
or
power -> atom ** factor
547
and
power -> atom ** factor
547
>
power -> atom ** factor
547
>=
power -> atom ** factor
547
|
power -> atom ** factor
547
-
power -> atom ** factor
547
==
power -> atom ** factor
547
by
power -> atom ** factor
547
:
power -> atom ** factor
547
+
power -> atom ** factor
547
>>
power -> atom ** factor
547
*
power -> atom ** factor
547
<<
power -> atom ** factor
547
!=
power -> atom ** factor
548
and
comparison -> expr comp_op comparison
548
by
comparison -> expr comp_op comparison
548
or
comparison -> expr comp_op comparison
548
:
comparison -> expr comp_op comparison
549
>
arith_expr -> term + arith_expr
549
&
arith_expr -> term + arith_expr
549
:
arith_expr -> term + arith_expr
549
!=
arith_expr -> term + arith_expr
549
|
arith_expr -> term + arith_expr
549
<<
arith_expr -> term + arith_expr
549
<=
arith_expr -> term + arith_expr
549
<
arith_expr -> term + arith_expr
549
>>
arith_expr -> term + arith_expr
549
and
arith_expr -> term + arith_expr
549
>=
arith_expr -> term + arith_expr
549
==
arith_expr -> term + arith_expr
549
or
arith_expr -> term + arith_expr
549
by
arith_expr -> term + arith_expr
549
^
arith_expr -> term + arith_expr
550
!=
arith_expr -> term - arith_expr
550
<
arith_expr -> term - arith_expr
550
^
arith_expr -> term - arith_expr
550
<=
arith_expr -> term - arith_expr
550
and
arith_expr -> term - arith_expr
550
>=
arith_expr -> term - arith_expr
550
==
arith_expr -> term - arith_expr
550
>>
arith_expr -> term - arith_expr
550
&
arith_expr -> term - arith_expr
550
>
arith_expr -> term - arith_expr
550
by
arith_expr -> term - arith_expr
550
or
arith_expr -> term - arith_expr
550
:
arith_expr -> term - arith_expr
550
<<
arith_expr -> term - arith_expr
550
|
arith_expr -> term - arith_expr
551
and
term -> factor // term
551
|
term -> factor // term
551
==
term -> factor // term
551
<=
term -> factor // term
551
>>
term -> factor // term
551
-
term -> factor // term
551
<
term -> factor // term
551
+
term -> factor // term
551
:
term -> factor // term
551
<<
term -> factor // term
551
by
term -> factor // term
551
&
term -> factor // term
551
!=
term -> factor // term
551
or
term -> factor // term
551
>
term -> factor // term
551
^
term -> factor // term
551
>=
term -> factor // term
552
and
term -> factor * term
552
by
term -> factor * term
552
<<
term -> factor * term
552
>>
term -> factor * term
552
>
term -> factor * term
552
==
term -> factor * term
552
!=
term -> factor * term
552
or
term -> factor * term
552
>=
term -> factor * term
552
^
term -> factor * term
552
:
term -> factor * term
552
<=
term -> factor * term
552
-
term -> factor * term
552
<
term -> factor * term
552
|
term -> factor * term
552
+
term -> factor * term
552
&
term -> factor * term
553
>
term -> factor / term
553
+
term -> factor / term
553
>=
term -> factor / term
553
==
term -> factor / term
553
by
term -> factor / term
553
<=
term -> factor / term
553
:
term -> factor / term
553
<<
term -> factor / term
553
|
term -> factor / term
553
&
term -> factor / term
553
-
term -> factor / term
553
and
term -> factor / term
553
or
term -> factor / term
553
>>
term -> factor / term
553
<
term -> factor / term
553
^
term -> factor / term
553
!=
term -> factor / term
554
^
term -> factor % term
554
|
term -> factor % term
554
!=
term -> factor % term
554
by
term -> factor % term
554
<<
term -> factor % term
554
+
term -> factor % term
554
:
term -> factor % term
554
<
term -> factor % term
554
or
term -> factor % term
554
>=
term -> factor % term
554
and
term -> factor % term
554
-
term -> factor % term
554
>>
term -> factor % term
554
&
term -> factor % term
554
==
term -> factor % term
554
>
term -> factor % term
554
<=
term -> factor % term
555
*
call -> NAME ( )
555
and
call -> NAME ( )
555
!=
call -> NAME ( )
555
>>
call -> NAME ( )
555
<
call -> NAME ( )
555
==
call -> NAME ( )
555
or
call -> NAME ( )
555
:
call -> NAME ( )
555
//
call -> NAME ( )
555
>=
call -> NAME ( )
555
+
call -> NAME ( )
555
<=
call -> NAME ( )
555
<<
call -> NAME ( )
555
/
call -> NAME ( )
555
by
call -> NAME ( )
555
%
call -> NAME ( )
555
**
call -> NAME ( )
555
>
call -> NAME ( )
555
|
call -> NAME ( )
555
^
call -> NAME ( )
555
&
call -> NAME ( )
555
-
call -> NAME ( )
556
)
567
557
or
expr -> xor_expr | expr
557
>=
expr -> xor_expr | expr
557
>
expr -> xor_expr | expr
557
and
expr -> xor_expr | expr
557
<
expr -> xor_expr | expr
557
!=
expr -> xor_expr | expr
557
<=
expr -> xor_expr | expr
557
by
expr -> xor_expr | expr
557
==
expr -> xor_expr | expr
557
:
expr -> xor_expr | expr
558
and
shift_expr -> arith_expr << shift_expr
558
<
shift_expr -> arith_expr << shift_expr
558
!=
shift_expr -> arith_expr << shift_expr
558
&
shift_expr -> arith_expr << shift_expr
558
by
shift_expr -> arith_expr << shift_expr
558
:
shift_expr -> arith_expr << shift_expr
558
^
shift_expr -> arith_expr << shift_expr
558
<=
shift_expr -> arith_expr << shift_expr
558
>=
shift_expr -> arith_expr << shift_expr
558
==
shift_expr -> arith_expr << shift_expr
558
>
shift_expr -> arith_expr << shift_expr
558
or
shift_expr -> arith_expr << shift_expr
558
|
shift_expr -> arith_expr << shift_expr
559
<
shift_expr -> arith_expr >> shift_expr
559
:
shift_expr -> arith_expr >> shift_expr
559
<=
shift_expr -> arith_expr >> shift_expr
559
>=
shift_expr -> arith_expr >> shift_expr
559
by
shift_expr -> arith_expr >> shift_expr
559
&
shift_expr -> arith_expr >> shift_expr
559
^
shift_expr -> arith_expr >> shift_expr
559
==
shift_expr -> arith_expr >> shift_expr
559
|
shift_expr -> arith_expr >> shift_expr
559
!=
shift_expr -> arith_expr >> shift_expr
559
>
shift_expr -> arith_expr >> shift_expr
559
and
shift_expr -> arith_expr >> shift_expr
559
or
shift_expr -> arith_expr >> shift_expr
560
NEWLINE
loop_stmt -> loop NAME from test to test : suite
560
if
loop_stmt -> loop NAME from test to test : suite
560
NAME
loop_stmt -> loop NAME from test to test : suite
560
loop
loop_stmt -> loop NAME from test to test : suite
560
nextloop
loop_stmt -> loop NAME from test to test : suite
560
var
loop_stmt -> loop NAME from test to test : suite
560
endloop
loop_stmt -> loop NAME from test to test : suite
560
DEDENT
loop_stmt -> loop NAME from test to test : suite
560
return
loop_stmt -> loop NAME from test to test : suite
561
:
568
562
==
xor_expr -> and_expr ^ xor_expr
562
>=
xor_expr -> and_expr ^ xor_expr
562
<=
xor_expr -> and_expr ^ xor_expr
562
or
xor_expr -> and_expr ^ xor_expr
562
!=
xor_expr -> and_expr ^ xor_expr
562
<
xor_expr -> and_expr ^ xor_expr
562
:
xor_expr -> and_expr ^ xor_expr
562
by
xor_expr -> and_expr ^ xor_expr
562
|
xor_expr -> and_expr ^ xor_expr
562
>
xor_expr -> and_expr ^ xor_expr
562
and
xor_expr -> and_expr ^ xor_expr
563
or
and_expr -> shift_expr & and_expr
563
and
and_expr -> shift_expr & and_expr
563
:
and_expr -> shift_expr & and_expr
563
<
and_expr -> shift_expr & and_expr
563
|
and_expr -> shift_expr & and_expr
563
<=
and_expr -> shift_expr & and_expr
563
by
and_expr -> shift_expr & and_expr
563
!=
and_expr -> shift_expr & and_expr
563
>=
and_expr -> shift_expr & and_expr
563
^
and_expr -> shift_expr & and_expr
563
>
and_expr -> shift_expr & and_expr
563
==
and_expr -> shift_expr & and_expr
564
+
atom -> [ test_list ]
564
-
atom -> [ test_list ]
564
%
atom -> [ test_list ]
564
**
atom -> [ test_list ]
564
<<
atom -> [ test_list ]
564
or
atom -> [ test_list ]
564
!=
atom -> [ test_list ]
564
|
atom -> [ test_list ]
564
<
atom -> [ test_list ]
564
>>
atom -> [ test_list ]
564
//
atom -> [ test_list ]
564
&
atom -> [ test_list ]
564
>
atom -> [ test_list ]
564
by
atom -> [ test_list ]
564
:
atom -> [ test_list ]
564
and
atom -> [ test_list ]
564
<=
atom -> [ test_list ]
564
==
atom -> [ test_list ]
564
/
atom -> [ test_list ]
564
^
atom -> [ test_list ]
564
>=
atom -> [ test_list ]
564
*
atom -> [ test_list ]
565
by
and_test -> not_test and and_test
565
or
and_test -> not_test and and_test
565
:
and_test -> not_test and and_test
566
by
or_test -> and_test or or_test
566
:
or_test -> and_test or or_test
567
^
call -> NAME ( test_list )
567
<
call -> NAME ( test_list )
567
/
call -> NAME ( test_list )
567
>=
call -> NAME ( test_list )
567
:
call -> NAME ( test_list )
567
|
call -> NAME ( test_list )
567
%
call -> NAME ( test_list )
567
>
call -> NAME ( test_list )
567
and
call -> NAME ( test_list )
567
<<
call -> NAME ( test_list )
567
-
call -> NAME ( test_list )
567
//
call -> NAME ( test_list )
567
<=
call -> NAME ( test_list )
567
!=
call -> NAME ( test_list )
567
==
call -> NAME ( test_list )
567
*
call -> NAME ( test_list )
567
>>
call -> NAME ( test_list )
567
**
call -> NAME ( test_list )
567
&
call -> NAME ( test_list )
567
or
call -> NAME ( test_list )
567
+
call -> NAME ( test_list )
567
by
call -> NAME ( test_list )
568
suite
569
568
NEWLINE
353
569
NAME
loop_stmt -> loop NAME from test to test by test : suite
569
nextloop
loop_stmt -> loop NAME from test to test by test : suite
569
NEWLINE
loop_stmt -> loop NAME from test to test by test : suite
569
loop
loop_stmt -> loop NAME from test to test by test : suite
569
return
loop_stmt -> loop NAME from test to test by test : suite
569
var
loop_stmt -> loop NAME from test to test by test : suite
569
if
loop_stmt -> loop NAME from test to test by test : suite
569
endloop
loop_stmt -> loop NAME from test to test by test : suite
569
DEDENT
loop_stmt -> loop NAME from test to test by test : suite
