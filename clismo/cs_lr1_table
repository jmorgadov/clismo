0
client_def
1
0
step
2
0
server
3
0
step_def
4
0
client
5
0
simulation
6
0
server_def
7
0
sim_def
8
0
NEWLINE
9
0
$
program -> 
0
obj_def
10
0
program
11
1
NEWLINE
obj_def -> client_def
1
step
obj_def -> client_def
1
simulation
obj_def -> client_def
1
server
obj_def -> client_def
1
client
obj_def -> client_def
1
$
obj_def -> client_def
2
NAME
12
3
NAME
13
4
NEWLINE
obj_def -> step_def
4
step
obj_def -> step_def
4
$
obj_def -> step_def
4
server
obj_def -> step_def
4
client
obj_def -> step_def
4
simulation
obj_def -> step_def
5
NAME
14
6
NAME
15
7
$
obj_def -> server_def
7
server
obj_def -> server_def
7
NEWLINE
obj_def -> server_def
7
client
obj_def -> server_def
7
step
obj_def -> server_def
7
simulation
obj_def -> server_def
8
$
obj_def -> sim_def
8
simulation
obj_def -> sim_def
8
client
obj_def -> sim_def
8
NEWLINE
obj_def -> sim_def
8
step
obj_def -> sim_def
8
server
obj_def -> sim_def
9
client_def
1
9
step
2
9
server
3
9
step_def
4
9
client
5
9
program
16
9
simulation
6
9
server_def
7
9
sim_def
8
9
NEWLINE
9
9
$
program -> 
9
obj_def
10
10
client_def
1
10
step
2
10
server
3
10
step_def
4
10
client
5
10
simulation
6
10
server_def
7
10
sim_def
8
10
NEWLINE
9
10
$
program -> 
10
obj_def
10
10
program
17
11
$
OK
12
:
18
13
:
19
14
:
20
15
:
21
16
$
program -> NEWLINE program
17
$
program -> obj_def program
18
obj_def_body
22
18
NEWLINE
23
19
NEWLINE
23
19
obj_def_body
24
20
obj_def_body
25
20
NEWLINE
23
21
obj_def_body
26
21
NEWLINE
23
22
client
step_def -> step NAME : obj_def_body
22
server
step_def -> step NAME : obj_def_body
22
NEWLINE
step_def -> step NAME : obj_def_body
22
simulation
step_def -> step NAME : obj_def_body
22
step
step_def -> step NAME : obj_def_body
22
$
step_def -> step NAME : obj_def_body
23
INDENT
27
24
client
server_def -> server NAME : obj_def_body
24
simulation
server_def -> server NAME : obj_def_body
24
NEWLINE
server_def -> server NAME : obj_def_body
24
$
server_def -> server NAME : obj_def_body
24
step
server_def -> server NAME : obj_def_body
24
server
server_def -> server NAME : obj_def_body
25
server
client_def -> client NAME : obj_def_body
25
NEWLINE
client_def -> client NAME : obj_def_body
25
$
client_def -> client NAME : obj_def_body
25
simulation
client_def -> client NAME : obj_def_body
25
client
client_def -> client NAME : obj_def_body
25
step
client_def -> client NAME : obj_def_body
26
simulation
sim_def -> simulation NAME : obj_def_body
26
server
sim_def -> simulation NAME : obj_def_body
26
NEWLINE
sim_def -> simulation NAME : obj_def_body
26
$
sim_def -> simulation NAME : obj_def_body
26
step
sim_def -> simulation NAME : obj_def_body
26
client
sim_def -> simulation NAME : obj_def_body
27
obj_stmt
28
27
obj_stmt_list
29
27
func_def
30
27
NAME
31
27
NEWLINE
32
27
DEDENT
obj_stmt_list -> 
28
obj_stmt
28
28
func_def
30
28
NAME
31
28
obj_stmt_list
33
28
NEWLINE
32
28
DEDENT
obj_stmt_list -> 
29
DEDENT
34
30
DEDENT
obj_stmt -> func_def
30
NAME
obj_stmt -> func_def
30
NEWLINE
obj_stmt -> func_def
31
(
35
31
=
36
32
obj_stmt
28
32
func_def
30
32
NAME
31
32
NEWLINE
32
32
DEDENT
obj_stmt_list -> 
32
obj_stmt_list
37
33
DEDENT
obj_stmt_list -> obj_stmt obj_stmt_list
34
simulation
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
34
client
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
34
NEWLINE
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
34
server
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
34
$
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
34
step
obj_def_body -> NEWLINE INDENT obj_stmt_list DEDENT
35
name_list
38
35
NAME
39
35
)
name_list -> 
36
power
40
36
atom
41
36
NAME
42
36
shift_expr
43
36
-
44
36
xor_expr
45
36
False
46
36
term
47
36
arith_expr
48
36
and_test
49
36
factor
50
36
NUMBER
51
36
STRING
52
36
[
53
36
and_expr
54
36
+
55
36
call
56
36
None
57
36
expr
58
36
True
59
36
comparison
60
36
test
61
36
not
62
36
not_test
63
36
~
64
36
or_test
65
37
DEDENT
obj_stmt_list -> NEWLINE obj_stmt_list
38
)
66
39
NAME
39
39
)
name_list -> 
39
name_list
67
40
<=
factor -> power
40
NAME
factor -> power
40
>=
factor -> power
40
or
factor -> power
40
==
factor -> power
40
<
factor -> power
40
^
factor -> power
40
*
factor -> power
40
<<
factor -> power
40
//
factor -> power
40
|
factor -> power
40
/
factor -> power
40
DEDENT
factor -> power
40
>
factor -> power
40
+
factor -> power
40
and
factor -> power
40
!=
factor -> power
40
-
factor -> power
40
NEWLINE
factor -> power
40
>>
factor -> power
40
%
factor -> power
40
&
factor -> power
41
>>
power -> atom
41
DEDENT
power -> atom
41
**
68
41
<=
power -> atom
41
|
power -> atom
41
!=
power -> atom
41
<<
power -> atom
41
>=
power -> atom
41
and
power -> atom
41
+
power -> atom
41
-
power -> atom
41
%
power -> atom
41
<
power -> atom
41
/
power -> atom
41
NAME
power -> atom
41
or
power -> atom
41
NEWLINE
power -> atom
41
*
power -> atom
41
^
power -> atom
41
>
power -> atom
41
//
power -> atom
41
==
power -> atom
41
&
power -> atom
42
and
atom -> NAME
42
NAME
atom -> NAME
42
(
69
42
**
atom -> NAME
42
or
atom -> NAME
42
+
atom -> NAME
42
>>
atom -> NAME
42
>=
atom -> NAME
42
%
atom -> NAME
42
==
atom -> NAME
42
*
atom -> NAME
42
!=
atom -> NAME
42
DEDENT
atom -> NAME
42
|
atom -> NAME
42
-
atom -> NAME
42
>
atom -> NAME
42
^
atom -> NAME
42
<<
atom -> NAME
42
<
atom -> NAME
42
<=
atom -> NAME
42
/
atom -> NAME
42
//
atom -> NAME
42
&
atom -> NAME
42
NEWLINE
atom -> NAME
43
&
70
43
|
and_expr -> shift_expr
43
^
and_expr -> shift_expr
43
<
and_expr -> shift_expr
43
<=
and_expr -> shift_expr
43
NAME
and_expr -> shift_expr
43
or
and_expr -> shift_expr
43
NEWLINE
and_expr -> shift_expr
43
>=
and_expr -> shift_expr
43
==
and_expr -> shift_expr
43
and
and_expr -> shift_expr
43
DEDENT
and_expr -> shift_expr
43
!=
and_expr -> shift_expr
43
>
and_expr -> shift_expr
44
NAME
42
44
power
40
44
atom
41
44
[
53
44
NUMBER
51
44
STRING
52
44
~
64
44
-
44
44
True
59
44
False
46
44
None
57
44
+
55
44
call
56
44
factor
71
45
|
72
45
DEDENT
expr -> xor_expr
45
NAME
expr -> xor_expr
45
>
expr -> xor_expr
45
>=
expr -> xor_expr
45
and
expr -> xor_expr
45
or
expr -> xor_expr
45
NEWLINE
expr -> xor_expr
45
<
expr -> xor_expr
45
!=
expr -> xor_expr
45
==
expr -> xor_expr
45
<=
expr -> xor_expr
46
>
atom -> False
46
<
atom -> False
46
//
atom -> False
46
-
atom -> False
46
+
atom -> False
46
NEWLINE
atom -> False
46
|
atom -> False
46
and
atom -> False
46
>>
atom -> False
46
<<
atom -> False
46
**
atom -> False
46
==
atom -> False
46
>=
atom -> False
46
<=
atom -> False
46
&
atom -> False
46
!=
atom -> False
46
or
atom -> False
46
/
atom -> False
46
%
atom -> False
46
NAME
atom -> False
46
*
atom -> False
46
^
atom -> False
46
DEDENT
atom -> False
47
+
73
47
==
arith_expr -> term
47
or
arith_expr -> term
47
>>
arith_expr -> term
47
NEWLINE
arith_expr -> term
47
<<
arith_expr -> term
47
-
74
47
|
arith_expr -> term
47
<
arith_expr -> term
47
!=
arith_expr -> term
47
NAME
arith_expr -> term
47
and
arith_expr -> term
47
&
arith_expr -> term
47
>
arith_expr -> term
47
<=
arith_expr -> term
47
^
arith_expr -> term
47
>=
arith_expr -> term
47
DEDENT
arith_expr -> term
48
>>
75
48
<<
76
48
and
shift_expr -> arith_expr
48
NAME
shift_expr -> arith_expr
48
<=
shift_expr -> arith_expr
48
|
shift_expr -> arith_expr
48
DEDENT
shift_expr -> arith_expr
48
>=
shift_expr -> arith_expr
48
or
shift_expr -> arith_expr
48
>
shift_expr -> arith_expr
48
<
shift_expr -> arith_expr
48
!=
shift_expr -> arith_expr
48
==
shift_expr -> arith_expr
48
&
shift_expr -> arith_expr
48
NEWLINE
shift_expr -> arith_expr
48
^
shift_expr -> arith_expr
49
or
77
49
DEDENT
or_test -> and_test
49
NAME
or_test -> and_test
49
NEWLINE
or_test -> and_test
50
//
78
50
%
79
50
/
80
50
==
term -> factor
50
*
81
50
^
term -> factor
50
>
term -> factor
50
or
term -> factor
50
&
term -> factor
50
<<
term -> factor
50
DEDENT
term -> factor
50
-
term -> factor
50
<
term -> factor
50
>>
term -> factor
50
|
term -> factor
50
and
term -> factor
50
!=
term -> factor
50
>=
term -> factor
50
NAME
term -> factor
50
<=
term -> factor
50
+
term -> factor
50
NEWLINE
term -> factor
51
^
atom -> NUMBER
51
|
atom -> NUMBER
51
<=
atom -> NUMBER
51
%
atom -> NUMBER
51
&
atom -> NUMBER
51
==
atom -> NUMBER
51
**
atom -> NUMBER
51
>>
atom -> NUMBER
51
+
atom -> NUMBER
51
or
atom -> NUMBER
51
NEWLINE
atom -> NUMBER
51
/
atom -> NUMBER
51
DEDENT
atom -> NUMBER
51
NAME
atom -> NUMBER
51
>=
atom -> NUMBER
51
!=
atom -> NUMBER
51
-
atom -> NUMBER
51
>
atom -> NUMBER
51
<
atom -> NUMBER
51
<<
atom -> NUMBER
51
*
atom -> NUMBER
51
//
atom -> NUMBER
51
and
atom -> NUMBER
52
>=
atom -> STRING
52
|
atom -> STRING
52
^
atom -> STRING
52
or
atom -> STRING
52
<<
atom -> STRING
52
*
atom -> STRING
52
DEDENT
atom -> STRING
52
//
atom -> STRING
52
>
atom -> STRING
52
&
atom -> STRING
52
NEWLINE
atom -> STRING
52
+
atom -> STRING
52
!=
atom -> STRING
52
-
atom -> STRING
52
<=
atom -> STRING
52
NAME
atom -> STRING
52
>>
atom -> STRING
52
%
atom -> STRING
52
==
atom -> STRING
52
<
atom -> STRING
52
/
atom -> STRING
52
**
atom -> STRING
52
and
atom -> STRING
53
]
82
53
power
83
53
atom
84
53
shift_expr
85
53
-
86
53
test_list
87
53
NAME
88
53
NUMBER
89
53
False
90
53
term
91
53
arith_expr
92
53
xor_expr
93
53
factor
94
53
STRING
95
53
[
96
53
and_expr
97
53
+
98
53
call
99
53
True
100
53
comparison
101
53
not_test
102
53
not
103
53
None
104
53
expr
105
53
~
106
53
and_test
107
53
test
108
53
or_test
109
54
^
110
54
>
xor_expr -> and_expr
54
and
xor_expr -> and_expr
54
>=
xor_expr -> and_expr
54
DEDENT
xor_expr -> and_expr
54
==
xor_expr -> and_expr
54
|
xor_expr -> and_expr
54
NEWLINE
xor_expr -> and_expr
54
<
xor_expr -> and_expr
54
<=
xor_expr -> and_expr
54
NAME
xor_expr -> and_expr
54
!=
xor_expr -> and_expr
54
or
xor_expr -> and_expr
55
NAME
42
55
power
40
55
atom
41
55
[
53
55
NUMBER
51
55
STRING
52
55
-
44
55
~
64
55
True
59
55
False
46
55
None
57
55
+
55
55
call
56
55
factor
111
56
<<
atom -> call
56
^
atom -> call
56
DEDENT
atom -> call
56
NAME
atom -> call
56
-
atom -> call
56
>
atom -> call
56
==
atom -> call
56
<
atom -> call
56
%
atom -> call
56
+
atom -> call
56
>=
atom -> call
56
//
atom -> call
56
<=
atom -> call
56
**
atom -> call
56
&
atom -> call
56
>>
atom -> call
56
or
atom -> call
56
*
atom -> call
56
!=
atom -> call
56
/
atom -> call
56
NEWLINE
atom -> call
56
and
atom -> call
56
|
atom -> call
57
|
atom -> None
57
-
atom -> None
57
NEWLINE
atom -> None
57
+
atom -> None
57
and
atom -> None
57
!=
atom -> None
57
or
atom -> None
57
&
atom -> None
57
>>
atom -> None
57
<=
atom -> None
57
>
atom -> None
57
<<
atom -> None
57
^
atom -> None
57
DEDENT
atom -> None
57
**
atom -> None
57
==
atom -> None
57
>=
atom -> None
57
<
atom -> None
57
//
atom -> None
57
*
atom -> None
57
/
atom -> None
57
NAME
atom -> None
57
%
atom -> None
58
==
112
58
<
113
58
>=
114
58
<=
115
58
!=
116
58
NAME
comparison -> expr
58
comp_op
117
58
>
118
58
or
comparison -> expr
58
NEWLINE
comparison -> expr
58
DEDENT
comparison -> expr
58
and
comparison -> expr
59
<
atom -> True
59
or
atom -> True
59
%
atom -> True
59
DEDENT
atom -> True
59
>=
atom -> True
59
<<
atom -> True
59
//
atom -> True
59
|
atom -> True
59
>>
atom -> True
59
and
atom -> True
59
*
atom -> True
59
>
atom -> True
59
!=
atom -> True
59
==
atom -> True
59
NEWLINE
atom -> True
59
+
atom -> True
59
<=
atom -> True
59
^
atom -> True
59
**
atom -> True
59
-
atom -> True
59
/
atom -> True
59
&
atom -> True
59
NAME
atom -> True
60
DEDENT
not_test -> comparison
60
NEWLINE
not_test -> comparison
60
and
not_test -> comparison
60
or
not_test -> comparison
60
NAME
not_test -> comparison
61
DEDENT
obj_stmt -> NAME = test
61
NAME
obj_stmt -> NAME = test
61
NEWLINE
obj_stmt -> NAME = test
62
power
40
62
atom
41
62
NAME
42
62
shift_expr
43
62
-
44
62
xor_expr
45
62
False
46
62
term
47
62
arith_expr
48
62
NUMBER
51
62
factor
50
62
STRING
52
62
[
53
62
and_expr
54
62
+
55
62
call
56
62
None
57
62
expr
58
62
True
59
62
comparison
60
62
not
62
62
~
64
62
not_test
119
63
and
120
63
NEWLINE
and_test -> not_test
63
DEDENT
and_test -> not_test
63
NAME
and_test -> not_test
63
or
and_test -> not_test
64
factor
121
64
NAME
42
64
power
40
64
atom
41
64
[
53
64
NUMBER
51
64
STRING
52
64
-
44
64
~
64
64
True
59
64
False
46
64
None
57
64
+
55
64
call
56
65
NAME
test -> or_test
65
NEWLINE
test -> or_test
65
DEDENT
test -> or_test
66
:
122
67
)
name_list -> NAME name_list
68
NAME
42
68
power
40
68
atom
41
68
[
53
68
NUMBER
51
68
STRING
52
68
~
64
68
-
44
68
True
59
68
False
46
68
None
57
68
+
55
68
call
56
68
factor
123
69
)
124
69
power
125
69
~
126
69
atom
127
69
None
128
69
shift_expr
129
69
-
130
69
NAME
131
69
NUMBER
132
69
False
133
69
term
134
69
arith_expr
135
69
xor_expr
136
69
factor
137
69
STRING
138
69
test_list
139
69
[
140
69
and_expr
141
69
+
142
69
call
143
69
not
144
69
True
145
69
comparison
146
69
and_test
147
69
not_test
148
69
expr
149
69
test
150
69
or_test
151
70
NAME
42
70
arith_expr
48
70
power
40
70
atom
41
70
[
53
70
factor
50
70
NUMBER
51
70
STRING
52
70
shift_expr
43
70
-
44
70
~
64
70
True
59
70
False
46
70
term
47
70
None
57
70
+
55
70
call
56
70
and_expr
152
71
<=
factor -> - factor
71
//
factor -> - factor
71
>>
factor -> - factor
71
or
factor -> - factor
71
+
factor -> - factor
71
^
factor -> - factor
71
NEWLINE
factor -> - factor
71
DEDENT
factor -> - factor
71
-
factor -> - factor
71
and
factor -> - factor
71
%
factor -> - factor
71
>=
factor -> - factor
71
!=
factor -> - factor
71
<
factor -> - factor
71
|
factor -> - factor
71
NAME
factor -> - factor
71
*
factor -> - factor
71
==
factor -> - factor
71
/
factor -> - factor
71
>
factor -> - factor
71
&
factor -> - factor
71
<<
factor -> - factor
72
power
40
72
atom
41
72
NAME
42
72
shift_expr
43
72
-
44
72
xor_expr
45
72
False
46
72
term
47
72
arith_expr
48
72
NUMBER
51
72
factor
50
72
STRING
52
72
[
53
72
and_expr
54
72
+
55
72
call
56
72
None
57
72
True
59
72
expr
153
72
~
64
73
NAME
42
73
power
40
73
atom
41
73
[
53
73
factor
50
73
NUMBER
51
73
STRING
52
73
-
44
73
~
64
73
True
59
73
False
46
73
term
47
73
None
57
73
arith_expr
154
73
+
55
73
call
56
74
NAME
42
74
power
40
74
atom
41
74
[
53
74
factor
50
74
NUMBER
51
74
STRING
52
74
-
44
74
~
64
74
True
59
74
False
46
74
term
47
74
None
57
74
+
55
74
call
56
74
arith_expr
155
75
NAME
42
75
arith_expr
48
75
power
40
75
atom
41
75
[
53
75
factor
50
75
NUMBER
51
75
STRING
52
75
shift_expr
156
75
-
44
75
~
64
75
True
59
75
False
46
75
term
47
75
None
57
75
+
55
75
call
56
76
NAME
42
76
arith_expr
48
76
power
40
76
atom
41
76
[
53
76
factor
50
76
NUMBER
51
76
STRING
52
76
-
44
76
~
64
76
True
59
76
False
46
76
term
47
76
None
57
76
+
55
76
shift_expr
157
76
call
56
77
power
40
77
atom
41
77
NAME
42
77
shift_expr
43
77
-
44
77
xor_expr
45
77
False
46
77
term
47
77
arith_expr
48
77
and_test
49
77
factor
50
77
NUMBER
51
77
STRING
52
77
[
53
77
and_expr
54
77
+
55
77
call
56
77
None
57
77
expr
58
77
True
59
77
comparison
60
77
not
62
77
not_test
63
77
~
64
77
or_test
158
78
NAME
42
78
power
40
78
atom
41
78
[
53
78
factor
50
78
NUMBER
51
78
STRING
52
78
-
44
78
~
64
78
True
59
78
False
46
78
None
57
78
term
159
78
+
55
78
call
56
79
term
160
79
NAME
42
79
power
40
79
atom
41
79
[
53
79
factor
50
79
NUMBER
51
79
STRING
52
79
-
44
79
~
64
79
True
59
79
False
46
79
None
57
79
+
55
79
call
56
80
NAME
42
80
power
40
80
atom
41
80
[
53
80
factor
50
80
NUMBER
51
80
STRING
52
80
-
44
80
~
64
80
True
59
80
False
46
80
None
57
80
+
55
80
call
56
80
term
161
81
NAME
42
81
power
40
81
atom
41
81
[
53
81
factor
50
81
NUMBER
51
81
STRING
52
81
-
44
81
~
64
81
True
59
81
False
46
81
None
57
81
+
55
81
term
162
81
call
56
82
>
atom -> [ ]
82
<<
atom -> [ ]
82
**
atom -> [ ]
82
-
atom -> [ ]
82
/
atom -> [ ]
82
//
atom -> [ ]
82
^
atom -> [ ]
82
&
atom -> [ ]
82
or
atom -> [ ]
82
+
atom -> [ ]
82
!=
atom -> [ ]
82
NAME
atom -> [ ]
82
DEDENT
atom -> [ ]
82
<=
atom -> [ ]
82
NEWLINE
atom -> [ ]
82
>>
atom -> [ ]
82
and
atom -> [ ]
82
|
atom -> [ ]
82
>=
atom -> [ ]
82
==
atom -> [ ]
82
*
atom -> [ ]
82
%
atom -> [ ]
82
<
atom -> [ ]
83
<=
factor -> power
83
>=
factor -> power
83
or
factor -> power
83
==
factor -> power
83
<
factor -> power
83
^
factor -> power
83
,
factor -> power
83
*
factor -> power
83
<<
factor -> power
83
//
factor -> power
83
|
factor -> power
83
/
factor -> power
83
]
factor -> power
83
>
factor -> power
83
+
factor -> power
83
and
factor -> power
83
!=
factor -> power
83
-
factor -> power
83
>>
factor -> power
83
%
factor -> power
83
&
factor -> power
84
>>
power -> atom
84
,
power -> atom
84
**
163
84
<=
power -> atom
84
|
power -> atom
84
!=
power -> atom
84
<<
power -> atom
84
>=
power -> atom
84
and
power -> atom
84
+
power -> atom
84
-
power -> atom
84
%
power -> atom
84
<
power -> atom
84
/
power -> atom
84
or
power -> atom
84
]
power -> atom
84
*
power -> atom
84
^
power -> atom
84
>
power -> atom
84
//
power -> atom
84
==
power -> atom
84
&
power -> atom
85
&
164
85
|
and_expr -> shift_expr
85
]
and_expr -> shift_expr
85
^
and_expr -> shift_expr
85
<
and_expr -> shift_expr
85
<=
and_expr -> shift_expr
85
or
and_expr -> shift_expr
85
>=
and_expr -> shift_expr
85
==
and_expr -> shift_expr
85
and
and_expr -> shift_expr
85
,
and_expr -> shift_expr
85
!=
and_expr -> shift_expr
85
>
and_expr -> shift_expr
86
NAME
88
86
power
83
86
atom
84
86
[
96
86
NUMBER
89
86
STRING
95
86
~
106
86
-
86
86
True
100
86
False
90
86
None
104
86
+
98
86
factor
165
86
call
99
87
]
166
88
and
atom -> NAME
88
,
atom -> NAME
88
(
167
88
**
atom -> NAME
88
or
atom -> NAME
88
+
atom -> NAME
88
>>
atom -> NAME
88
>=
atom -> NAME
88
%
atom -> NAME
88
]
atom -> NAME
88
==
atom -> NAME
88
*
atom -> NAME
88
!=
atom -> NAME
88
|
atom -> NAME
88
-
atom -> NAME
88
>
atom -> NAME
88
^
atom -> NAME
88
<<
atom -> NAME
88
<
atom -> NAME
88
<=
atom -> NAME
88
/
atom -> NAME
88
&
atom -> NAME
88
//
atom -> NAME
89
^
atom -> NUMBER
89
|
atom -> NUMBER
89
<=
atom -> NUMBER
89
]
atom -> NUMBER
89
%
atom -> NUMBER
89
&
atom -> NUMBER
89
==
atom -> NUMBER
89
**
atom -> NUMBER
89
>>
atom -> NUMBER
89
,
atom -> NUMBER
89
+
atom -> NUMBER
89
or
atom -> NUMBER
89
/
atom -> NUMBER
89
>=
atom -> NUMBER
89
!=
atom -> NUMBER
89
-
atom -> NUMBER
89
>
atom -> NUMBER
89
<
atom -> NUMBER
89
<<
atom -> NUMBER
89
*
atom -> NUMBER
89
//
atom -> NUMBER
89
and
atom -> NUMBER
90
>
atom -> False
90
<
atom -> False
90
//
atom -> False
90
-
atom -> False
90
+
atom -> False
90
|
atom -> False
90
and
atom -> False
90
,
atom -> False
90
>>
atom -> False
90
<<
atom -> False
90
**
atom -> False
90
==
atom -> False
90
>=
atom -> False
90
<=
atom -> False
90
&
atom -> False
90
!=
atom -> False
90
or
atom -> False
90
]
atom -> False
90
/
atom -> False
90
%
atom -> False
90
*
atom -> False
90
^
atom -> False
91
+
168
91
==
arith_expr -> term
91
or
arith_expr -> term
91
>>
arith_expr -> term
91
<<
arith_expr -> term
91
-
169
91
|
arith_expr -> term
91
<
arith_expr -> term
91
!=
arith_expr -> term
91
,
arith_expr -> term
91
and
arith_expr -> term
91
&
arith_expr -> term
91
>
arith_expr -> term
91
]
arith_expr -> term
91
<=
arith_expr -> term
91
^
arith_expr -> term
91
>=
arith_expr -> term
92
,
shift_expr -> arith_expr
92
>>
170
92
<<
171
92
]
shift_expr -> arith_expr
92
and
shift_expr -> arith_expr
92
<=
shift_expr -> arith_expr
92
|
shift_expr -> arith_expr
92
>=
shift_expr -> arith_expr
92
or
shift_expr -> arith_expr
92
>
shift_expr -> arith_expr
92
<
shift_expr -> arith_expr
92
!=
shift_expr -> arith_expr
92
==
shift_expr -> arith_expr
92
&
shift_expr -> arith_expr
92
^
shift_expr -> arith_expr
93
|
172
93
>
expr -> xor_expr
93
]
expr -> xor_expr
93
>=
expr -> xor_expr
93
,
expr -> xor_expr
93
and
expr -> xor_expr
93
or
expr -> xor_expr
93
<
expr -> xor_expr
93
!=
expr -> xor_expr
93
==
expr -> xor_expr
93
<=
expr -> xor_expr
94
//
173
94
%
174
94
==
term -> factor
94
/
175
94
*
176
94
^
term -> factor
94
>
term -> factor
94
,
term -> factor
94
]
term -> factor
94
or
term -> factor
94
&
term -> factor
94
<<
term -> factor
94
-
term -> factor
94
<
term -> factor
94
>>
term -> factor
94
|
term -> factor
94
and
term -> factor
94
!=
term -> factor
94
>=
term -> factor
94
<=
term -> factor
94
+
term -> factor
95
>=
atom -> STRING
95
|
atom -> STRING
95
^
atom -> STRING
95
or
atom -> STRING
95
<<
atom -> STRING
95
*
atom -> STRING
95
//
atom -> STRING
95
>
atom -> STRING
95
&
atom -> STRING
95
+
atom -> STRING
95
!=
atom -> STRING
95
-
atom -> STRING
95
<=
atom -> STRING
95
>>
atom -> STRING
95
%
atom -> STRING
95
==
atom -> STRING
95
<
atom -> STRING
95
,
atom -> STRING
95
/
atom -> STRING
95
]
atom -> STRING
95
**
atom -> STRING
95
and
atom -> STRING
96
]
177
96
power
83
96
atom
84
96
shift_expr
85
96
-
86
96
test_list
178
96
NAME
88
96
NUMBER
89
96
False
90
96
term
91
96
arith_expr
92
96
xor_expr
93
96
factor
94
96
STRING
95
96
[
96
96
and_expr
97
96
+
98
96
call
99
96
True
100
96
comparison
101
96
not_test
102
96
not
103
96
None
104
96
expr
105
96
~
106
96
and_test
107
96
test
108
96
or_test
109
97
>
xor_expr -> and_expr
97
and
xor_expr -> and_expr
97
^
179
97
>=
xor_expr -> and_expr
97
,
xor_expr -> and_expr
97
==
xor_expr -> and_expr
97
|
xor_expr -> and_expr
97
]
xor_expr -> and_expr
97
<
xor_expr -> and_expr
97
<=
xor_expr -> and_expr
97
!=
xor_expr -> and_expr
97
or
xor_expr -> and_expr
98
NAME
88
98
power
83
98
atom
84
98
[
96
98
NUMBER
89
98
STRING
95
98
-
86
98
~
106
98
True
100
98
False
90
98
None
104
98
+
98
98
call
99
98
factor
180
99
<<
atom -> call
99
^
atom -> call
99
-
atom -> call
99
>
atom -> call
99
==
atom -> call
99
<
atom -> call
99
%
atom -> call
99
+
atom -> call
99
>=
atom -> call
99
//
atom -> call
99
]
atom -> call
99
<=
atom -> call
99
**
atom -> call
99
&
atom -> call
99
>>
atom -> call
99
,
atom -> call
99
*
atom -> call
99
or
atom -> call
99
!=
atom -> call
99
/
atom -> call
99
and
atom -> call
99
|
atom -> call
100
<
atom -> True
100
or
atom -> True
100
%
atom -> True
100
>=
atom -> True
100
<<
atom -> True
100
//
atom -> True
100
|
atom -> True
100
>>
atom -> True
100
and
atom -> True
100
*
atom -> True
100
>
atom -> True
100
]
atom -> True
100
!=
atom -> True
100
==
atom -> True
100
+
atom -> True
100
<=
atom -> True
100
^
atom -> True
100
**
atom -> True
100
-
atom -> True
100
/
atom -> True
100
&
atom -> True
100
,
atom -> True
101
]
not_test -> comparison
101
,
not_test -> comparison
101
and
not_test -> comparison
101
or
not_test -> comparison
102
and
181
102
,
and_test -> not_test
102
]
and_test -> not_test
102
or
and_test -> not_test
103
power
83
103
atom
84
103
shift_expr
85
103
-
86
103
NAME
88
103
NUMBER
89
103
False
90
103
term
91
103
arith_expr
92
103
xor_expr
93
103
factor
94
103
STRING
95
103
[
96
103
and_expr
97
103
+
98
103
call
99
103
True
100
103
comparison
101
103
not
103
103
None
104
103
expr
105
103
~
106
103
not_test
182
104
|
atom -> None
104
,
atom -> None
104
-
atom -> None
104
]
atom -> None
104
+
atom -> None
104
and
atom -> None
104
!=
atom -> None
104
or
atom -> None
104
&
atom -> None
104
>>
atom -> None
104
<=
atom -> None
104
>
atom -> None
104
<<
atom -> None
104
^
atom -> None
104
**
atom -> None
104
==
atom -> None
104
>=
atom -> None
104
<
atom -> None
104
//
atom -> None
104
*
atom -> None
104
/
atom -> None
104
%
atom -> None
105
]
comparison -> expr
105
==
112
105
<
113
105
>=
114
105
<=
115
105
!=
116
105
>
118
105
,
comparison -> expr
105
comp_op
183
105
or
comparison -> expr
105
and
comparison -> expr
106
NAME
88
106
power
83
106
atom
84
106
[
96
106
NUMBER
89
106
STRING
95
106
factor
184
106
-
86
106
~
106
106
True
100
106
False
90
106
None
104
106
+
98
106
call
99
107
or
185
107
]
or_test -> and_test
107
,
or_test -> and_test
108
]
test_list -> test
108
,
186
109
,
test -> or_test
109
]
test -> or_test
110
power
40
110
atom
41
110
NAME
42
110
shift_expr
43
110
-
44
110
False
46
110
term
47
110
arith_expr
48
110
NUMBER
51
110
factor
50
110
STRING
52
110
[
53
110
and_expr
54
110
+
55
110
call
56
110
None
57
110
True
59
110
xor_expr
187
110
~
64
111
+
factor -> + factor
111
<<
factor -> + factor
111
<=
factor -> + factor
111
<
factor -> + factor
111
//
factor -> + factor
111
DEDENT
factor -> + factor
111
NAME
factor -> + factor
111
NEWLINE
factor -> + factor
111
>
factor -> + factor
111
*
factor -> + factor
111
%
factor -> + factor
111
>=
factor -> + factor
111
/
factor -> + factor
111
-
factor -> + factor
111
>>
factor -> + factor
111
or
factor -> + factor
111
&
factor -> + factor
111
^
factor -> + factor
111
==
factor -> + factor
111
and
factor -> + factor
111
|
factor -> + factor
111
!=
factor -> + factor
112
None
comp_op -> ==
112
True
comp_op -> ==
112
~
comp_op -> ==
112
+
comp_op -> ==
112
-
comp_op -> ==
112
[
comp_op -> ==
112
False
comp_op -> ==
112
STRING
comp_op -> ==
112
NUMBER
comp_op -> ==
112
NAME
comp_op -> ==
113
None
comp_op -> <
113
+
comp_op -> <
113
[
comp_op -> <
113
NAME
comp_op -> <
113
NUMBER
comp_op -> <
113
False
comp_op -> <
113
-
comp_op -> <
113
~
comp_op -> <
113
STRING
comp_op -> <
113
True
comp_op -> <
114
True
comp_op -> >=
114
STRING
comp_op -> >=
114
None
comp_op -> >=
114
NAME
comp_op -> >=
114
-
comp_op -> >=
114
+
comp_op -> >=
114
False
comp_op -> >=
114
NUMBER
comp_op -> >=
114
~
comp_op -> >=
114
[
comp_op -> >=
115
False
comp_op -> <=
115
+
comp_op -> <=
115
NAME
comp_op -> <=
115
True
comp_op -> <=
115
NUMBER
comp_op -> <=
115
~
comp_op -> <=
115
STRING
comp_op -> <=
115
[
comp_op -> <=
115
None
comp_op -> <=
115
-
comp_op -> <=
116
NAME
comp_op -> !=
116
[
comp_op -> !=
116
True
comp_op -> !=
116
-
comp_op -> !=
116
NUMBER
comp_op -> !=
116
+
comp_op -> !=
116
False
comp_op -> !=
116
STRING
comp_op -> !=
116
None
comp_op -> !=
116
~
comp_op -> !=
117
power
40
117
atom
41
117
NAME
42
117
shift_expr
43
117
-
44
117
xor_expr
45
117
False
46
117
term
47
117
arith_expr
48
117
comparison
188
117
NUMBER
51
117
factor
50
117
STRING
52
117
[
53
117
and_expr
54
117
+
55
117
call
56
117
None
57
117
expr
58
117
True
59
117
~
64
118
~
comp_op -> >
118
+
comp_op -> >
118
[
comp_op -> >
118
NUMBER
comp_op -> >
118
-
comp_op -> >
118
False
comp_op -> >
118
NAME
comp_op -> >
118
True
comp_op -> >
118
None
comp_op -> >
118
STRING
comp_op -> >
119
DEDENT
not_test -> not not_test
119
and
not_test -> not not_test
119
NAME
not_test -> not not_test
119
NEWLINE
not_test -> not not_test
119
or
not_test -> not not_test
120
power
40
120
atom
41
120
NAME
42
120
shift_expr
43
120
-
44
120
xor_expr
45
120
False
46
120
term
47
120
arith_expr
48
120
NUMBER
51
120
factor
50
120
STRING
52
120
and_test
189
120
[
53
120
and_expr
54
120
+
55
120
call
56
120
None
57
120
expr
58
120
True
59
120
comparison
60
120
not
62
120
not_test
63
120
~
64
121
>
factor -> ~ factor
121
%
factor -> ~ factor
121
<=
factor -> ~ factor
121
DEDENT
factor -> ~ factor
121
|
factor -> ~ factor
121
*
factor -> ~ factor
121
//
factor -> ~ factor
121
-
factor -> ~ factor
121
<
factor -> ~ factor
121
^
factor -> ~ factor
121
>>
factor -> ~ factor
121
!=
factor -> ~ factor
121
NAME
factor -> ~ factor
121
/
factor -> ~ factor
121
and
factor -> ~ factor
121
NEWLINE
factor -> ~ factor
121
>=
factor -> ~ factor
121
==
factor -> ~ factor
121
or
factor -> ~ factor
121
&
factor -> ~ factor
121
<<
factor -> ~ factor
121
+
factor -> ~ factor
122
suite
190
122
NEWLINE
191
123
%
power -> atom ** factor
123
>=
power -> atom ** factor
123
==
power -> atom ** factor
123
<
power -> atom ** factor
123
/
power -> atom ** factor
123
-
power -> atom ** factor
123
>
power -> atom ** factor
123
or
power -> atom ** factor
123
<<
power -> atom ** factor
123
DEDENT
power -> atom ** factor
123
//
power -> atom ** factor
123
NAME
power -> atom ** factor
123
|
power -> atom ** factor
123
&
power -> atom ** factor
123
<=
power -> atom ** factor
123
>>
power -> atom ** factor
123
^
power -> atom ** factor
123
+
power -> atom ** factor
123
*
power -> atom ** factor
123
NEWLINE
power -> atom ** factor
123
and
power -> atom ** factor
123
!=
power -> atom ** factor
124
>
call -> NAME ( )
124
%
call -> NAME ( )
124
NAME
call -> NAME ( )
124
NEWLINE
call -> NAME ( )
124
<=
call -> NAME ( )
124
&
call -> NAME ( )
124
*
call -> NAME ( )
124
and
call -> NAME ( )
124
//
call -> NAME ( )
124
DEDENT
call -> NAME ( )
124
==
call -> NAME ( )
124
**
call -> NAME ( )
124
/
call -> NAME ( )
124
or
call -> NAME ( )
124
<<
call -> NAME ( )
124
>=
call -> NAME ( )
124
^
call -> NAME ( )
124
<
call -> NAME ( )
124
!=
call -> NAME ( )
124
>>
call -> NAME ( )
124
-
call -> NAME ( )
124
+
call -> NAME ( )
124
|
call -> NAME ( )
125
<=
factor -> power
125
>=
factor -> power
125
or
factor -> power
125
==
factor -> power
125
<
factor -> power
125
^
factor -> power
125
,
factor -> power
125
*
factor -> power
125
<<
factor -> power
125
//
factor -> power
125
|
factor -> power
125
)
factor -> power
125
/
factor -> power
125
>
factor -> power
125
+
factor -> power
125
and
factor -> power
125
!=
factor -> power
125
-
factor -> power
125
>>
factor -> power
125
%
factor -> power
125
&
factor -> power
126
NAME
131
126
power
125
126
~
126
126
atom
127
126
[
140
126
NUMBER
132
126
STRING
138
126
None
128
126
factor
192
126
-
130
126
True
145
126
False
133
126
+
142
126
call
143
127
>>
power -> atom
127
,
power -> atom
127
**
193
127
<=
power -> atom
127
|
power -> atom
127
!=
power -> atom
127
<<
power -> atom
127
>=
power -> atom
127
and
power -> atom
127
+
power -> atom
127
-
power -> atom
127
%
power -> atom
127
<
power -> atom
127
/
power -> atom
127
or
power -> atom
127
)
power -> atom
127
*
power -> atom
127
^
power -> atom
127
>
power -> atom
127
//
power -> atom
127
==
power -> atom
127
&
power -> atom
128
|
atom -> None
128
,
atom -> None
128
-
atom -> None
128
)
atom -> None
128
+
atom -> None
128
and
atom -> None
128
!=
atom -> None
128
or
atom -> None
128
&
atom -> None
128
>>
atom -> None
128
<=
atom -> None
128
>
atom -> None
128
<<
atom -> None
128
^
atom -> None
128
**
atom -> None
128
==
atom -> None
128
>=
atom -> None
128
<
atom -> None
128
//
atom -> None
128
*
atom -> None
128
/
atom -> None
128
%
atom -> None
129
&
194
129
|
and_expr -> shift_expr
129
^
and_expr -> shift_expr
129
<
and_expr -> shift_expr
129
)
and_expr -> shift_expr
129
<=
and_expr -> shift_expr
129
or
and_expr -> shift_expr
129
>=
and_expr -> shift_expr
129
==
and_expr -> shift_expr
129
and
and_expr -> shift_expr
129
,
and_expr -> shift_expr
129
!=
and_expr -> shift_expr
129
>
and_expr -> shift_expr
130
NAME
131
130
power
125
130
~
126
130
atom
127
130
[
140
130
NUMBER
132
130
STRING
138
130
None
128
130
-
130
130
True
145
130
False
133
130
+
142
130
factor
195
130
call
143
131
and
atom -> NAME
131
,
atom -> NAME
131
(
196
131
**
atom -> NAME
131
or
atom -> NAME
131
+
atom -> NAME
131
>>
atom -> NAME
131
>=
atom -> NAME
131
%
atom -> NAME
131
==
atom -> NAME
131
*
atom -> NAME
131
)
atom -> NAME
131
!=
atom -> NAME
131
|
atom -> NAME
131
-
atom -> NAME
131
>
atom -> NAME
131
^
atom -> NAME
131
<<
atom -> NAME
131
<
atom -> NAME
131
<=
atom -> NAME
131
/
atom -> NAME
131
&
atom -> NAME
131
//
atom -> NAME
132
^
atom -> NUMBER
132
|
atom -> NUMBER
132
<=
atom -> NUMBER
132
%
atom -> NUMBER
132
&
atom -> NUMBER
132
==
atom -> NUMBER
132
**
atom -> NUMBER
132
>>
atom -> NUMBER
132
,
atom -> NUMBER
132
+
atom -> NUMBER
132
or
atom -> NUMBER
132
/
atom -> NUMBER
132
>=
atom -> NUMBER
132
!=
atom -> NUMBER
132
)
atom -> NUMBER
132
-
atom -> NUMBER
132
>
atom -> NUMBER
132
<
atom -> NUMBER
132
<<
atom -> NUMBER
132
*
atom -> NUMBER
132
//
atom -> NUMBER
132
and
atom -> NUMBER
133
>
atom -> False
133
<
atom -> False
133
//
atom -> False
133
-
atom -> False
133
+
atom -> False
133
|
atom -> False
133
and
atom -> False
133
,
atom -> False
133
>>
atom -> False
133
<<
atom -> False
133
**
atom -> False
133
==
atom -> False
133
>=
atom -> False
133
<=
atom -> False
133
&
atom -> False
133
!=
atom -> False
133
or
atom -> False
133
/
atom -> False
133
%
atom -> False
133
*
atom -> False
133
)
atom -> False
133
^
atom -> False
134
+
197
134
==
arith_expr -> term
134
or
arith_expr -> term
134
>>
arith_expr -> term
134
<<
arith_expr -> term
134
-
198
134
|
arith_expr -> term
134
)
arith_expr -> term
134
<
arith_expr -> term
134
!=
arith_expr -> term
134
,
arith_expr -> term
134
and
arith_expr -> term
134
&
arith_expr -> term
134
>
arith_expr -> term
134
<=
arith_expr -> term
134
^
arith_expr -> term
134
>=
arith_expr -> term
135
,
shift_expr -> arith_expr
135
<<
199
135
>>
200
135
and
shift_expr -> arith_expr
135
<=
shift_expr -> arith_expr
135
|
shift_expr -> arith_expr
135
>=
shift_expr -> arith_expr
135
or
shift_expr -> arith_expr
135
>
shift_expr -> arith_expr
135
<
shift_expr -> arith_expr
135
!=
shift_expr -> arith_expr
135
==
shift_expr -> arith_expr
135
&
shift_expr -> arith_expr
135
)
shift_expr -> arith_expr
135
^
shift_expr -> arith_expr
136
)
expr -> xor_expr
136
|
201
136
>
expr -> xor_expr
136
>=
expr -> xor_expr
136
,
expr -> xor_expr
136
and
expr -> xor_expr
136
or
expr -> xor_expr
136
<
expr -> xor_expr
136
!=
expr -> xor_expr
136
==
expr -> xor_expr
136
<=
expr -> xor_expr
137
//
202
137
%
203
137
==
term -> factor
137
/
204
137
*
205
137
^
term -> factor
137
>
term -> factor
137
,
term -> factor
137
or
term -> factor
137
)
term -> factor
137
&
term -> factor
137
<<
term -> factor
137
-
term -> factor
137
<
term -> factor
137
>>
term -> factor
137
|
term -> factor
137
and
term -> factor
137
!=
term -> factor
137
>=
term -> factor
137
<=
term -> factor
137
+
term -> factor
138
)
atom -> STRING
138
>=
atom -> STRING
138
|
atom -> STRING
138
^
atom -> STRING
138
or
atom -> STRING
138
<<
atom -> STRING
138
*
atom -> STRING
138
//
atom -> STRING
138
>
atom -> STRING
138
&
atom -> STRING
138
+
atom -> STRING
138
!=
atom -> STRING
138
-
atom -> STRING
138
<=
atom -> STRING
138
>>
atom -> STRING
138
%
atom -> STRING
138
==
atom -> STRING
138
<
atom -> STRING
138
,
atom -> STRING
138
/
atom -> STRING
138
**
atom -> STRING
138
and
atom -> STRING
139
)
206
140
]
207
140
power
83
140
atom
84
140
shift_expr
85
140
-
86
140
test_list
208
140
NAME
88
140
NUMBER
89
140
False
90
140
term
91
140
arith_expr
92
140
xor_expr
93
140
factor
94
140
STRING
95
140
[
96
140
and_expr
97
140
+
98
140
call
99
140
True
100
140
comparison
101
140
not_test
102
140
not
103
140
None
104
140
expr
105
140
~
106
140
and_test
107
140
test
108
140
or_test
109
141
>
xor_expr -> and_expr
141
and
xor_expr -> and_expr
141
^
209
141
>=
xor_expr -> and_expr
141
,
xor_expr -> and_expr
141
==
xor_expr -> and_expr
141
|
xor_expr -> and_expr
141
)
xor_expr -> and_expr
141
<
xor_expr -> and_expr
141
<=
xor_expr -> and_expr
141
!=
xor_expr -> and_expr
141
or
xor_expr -> and_expr
142
NAME
131
142
power
125
142
~
126
142
atom
127
142
[
140
142
NUMBER
132
142
STRING
138
142
None
128
142
-
130
142
True
145
142
False
133
142
+
142
142
call
143
142
factor
210
143
<<
atom -> call
143
^
atom -> call
143
-
atom -> call
143
>
atom -> call
143
==
atom -> call
143
<
atom -> call
143
%
atom -> call
143
+
atom -> call
143
>=
atom -> call
143
//
atom -> call
143
<=
atom -> call
143
**
atom -> call
143
&
atom -> call
143
>>
atom -> call
143
,
atom -> call
143
*
atom -> call
143
or
atom -> call
143
!=
atom -> call
143
/
atom -> call
143
and
atom -> call
143
)
atom -> call
143
|
atom -> call
144
power
125
144
~
126
144
atom
127
144
None
128
144
shift_expr
129
144
-
130
144
NAME
131
144
NUMBER
132
144
False
133
144
term
134
144
arith_expr
135
144
xor_expr
136
144
factor
137
144
STRING
138
144
[
140
144
and_expr
141
144
+
142
144
call
143
144
not
144
144
True
145
144
comparison
146
144
expr
149
144
not_test
211
145
<
atom -> True
145
or
atom -> True
145
%
atom -> True
145
>=
atom -> True
145
<<
atom -> True
145
//
atom -> True
145
|
atom -> True
145
>>
atom -> True
145
and
atom -> True
145
*
atom -> True
145
>
atom -> True
145
!=
atom -> True
145
==
atom -> True
145
+
atom -> True
145
<=
atom -> True
145
^
atom -> True
145
**
atom -> True
145
-
atom -> True
145
/
atom -> True
145
&
atom -> True
145
,
atom -> True
145
)
atom -> True
146
,
not_test -> comparison
146
)
not_test -> comparison
146
and
not_test -> comparison
146
or
not_test -> comparison
147
,
or_test -> and_test
147
or
212
147
)
or_test -> and_test
148
,
and_test -> not_test
148
)
and_test -> not_test
148
and
213
148
or
and_test -> not_test
149
==
112
149
<
113
149
>=
114
149
comp_op
214
149
<=
115
149
!=
116
149
>
118
149
,
comparison -> expr
149
)
comparison -> expr
149
or
comparison -> expr
149
and
comparison -> expr
150
)
test_list -> test
150
,
215
151
)
test -> or_test
151
,
test -> or_test
152
>=
and_expr -> shift_expr & and_expr
152
<=
and_expr -> shift_expr & and_expr
152
and
and_expr -> shift_expr & and_expr
152
|
and_expr -> shift_expr & and_expr
152
>
and_expr -> shift_expr & and_expr
152
<
and_expr -> shift_expr & and_expr
152
!=
and_expr -> shift_expr & and_expr
152
NAME
and_expr -> shift_expr & and_expr
152
^
and_expr -> shift_expr & and_expr
152
or
and_expr -> shift_expr & and_expr
152
DEDENT
and_expr -> shift_expr & and_expr
152
NEWLINE
and_expr -> shift_expr & and_expr
152
==
and_expr -> shift_expr & and_expr
153
==
expr -> xor_expr | expr
153
or
expr -> xor_expr | expr
153
NAME
expr -> xor_expr | expr
153
NEWLINE
expr -> xor_expr | expr
153
and
expr -> xor_expr | expr
153
!=
expr -> xor_expr | expr
153
DEDENT
expr -> xor_expr | expr
153
<
expr -> xor_expr | expr
153
>=
expr -> xor_expr | expr
153
>
expr -> xor_expr | expr
153
<=
expr -> xor_expr | expr
154
<=
arith_expr -> term + arith_expr
154
>
arith_expr -> term + arith_expr
154
>=
arith_expr -> term + arith_expr
154
==
arith_expr -> term + arith_expr
154
!=
arith_expr -> term + arith_expr
154
DEDENT
arith_expr -> term + arith_expr
154
<
arith_expr -> term + arith_expr
154
NAME
arith_expr -> term + arith_expr
154
&
arith_expr -> term + arith_expr
154
<<
arith_expr -> term + arith_expr
154
or
arith_expr -> term + arith_expr
154
and
arith_expr -> term + arith_expr
154
^
arith_expr -> term + arith_expr
154
>>
arith_expr -> term + arith_expr
154
|
arith_expr -> term + arith_expr
154
NEWLINE
arith_expr -> term + arith_expr
155
>>
arith_expr -> term - arith_expr
155
>=
arith_expr -> term - arith_expr
155
<=
arith_expr -> term - arith_expr
155
or
arith_expr -> term - arith_expr
155
<
arith_expr -> term - arith_expr
155
NAME
arith_expr -> term - arith_expr
155
NEWLINE
arith_expr -> term - arith_expr
155
|
arith_expr -> term - arith_expr
155
&
arith_expr -> term - arith_expr
155
!=
arith_expr -> term - arith_expr
155
and
arith_expr -> term - arith_expr
155
<<
arith_expr -> term - arith_expr
155
DEDENT
arith_expr -> term - arith_expr
155
^
arith_expr -> term - arith_expr
155
>
arith_expr -> term - arith_expr
155
==
arith_expr -> term - arith_expr
156
|
shift_expr -> arith_expr >> shift_expr
156
and
shift_expr -> arith_expr >> shift_expr
156
DEDENT
shift_expr -> arith_expr >> shift_expr
156
NAME
shift_expr -> arith_expr >> shift_expr
156
^
shift_expr -> arith_expr >> shift_expr
156
or
shift_expr -> arith_expr >> shift_expr
156
NEWLINE
shift_expr -> arith_expr >> shift_expr
156
<=
shift_expr -> arith_expr >> shift_expr
156
>
shift_expr -> arith_expr >> shift_expr
156
==
shift_expr -> arith_expr >> shift_expr
156
!=
shift_expr -> arith_expr >> shift_expr
156
<
shift_expr -> arith_expr >> shift_expr
156
&
shift_expr -> arith_expr >> shift_expr
156
>=
shift_expr -> arith_expr >> shift_expr
157
<
shift_expr -> arith_expr << shift_expr
157
<=
shift_expr -> arith_expr << shift_expr
157
or
shift_expr -> arith_expr << shift_expr
157
==
shift_expr -> arith_expr << shift_expr
157
>=
shift_expr -> arith_expr << shift_expr
157
NAME
shift_expr -> arith_expr << shift_expr
157
|
shift_expr -> arith_expr << shift_expr
157
&
shift_expr -> arith_expr << shift_expr
157
and
shift_expr -> arith_expr << shift_expr
157
!=
shift_expr -> arith_expr << shift_expr
157
^
shift_expr -> arith_expr << shift_expr
157
>
shift_expr -> arith_expr << shift_expr
157
DEDENT
shift_expr -> arith_expr << shift_expr
157
NEWLINE
shift_expr -> arith_expr << shift_expr
158
NEWLINE
or_test -> and_test or or_test
158
NAME
or_test -> and_test or or_test
158
DEDENT
or_test -> and_test or or_test
159
<
term -> factor // term
159
^
term -> factor // term
159
&
term -> factor // term
159
NEWLINE
term -> factor // term
159
or
term -> factor // term
159
!=
term -> factor // term
159
>=
term -> factor // term
159
-
term -> factor // term
159
<=
term -> factor // term
159
<<
term -> factor // term
159
>
term -> factor // term
159
|
term -> factor // term
159
NAME
term -> factor // term
159
==
term -> factor // term
159
+
term -> factor // term
159
and
term -> factor // term
159
DEDENT
term -> factor // term
159
>>
term -> factor // term
160
<
term -> factor % term
160
DEDENT
term -> factor % term
160
>
term -> factor % term
160
NAME
term -> factor % term
160
<<
term -> factor % term
160
<=
term -> factor % term
160
-
term -> factor % term
160
!=
term -> factor % term
160
or
term -> factor % term
160
NEWLINE
term -> factor % term
160
and
term -> factor % term
160
+
term -> factor % term
160
^
term -> factor % term
160
|
term -> factor % term
160
==
term -> factor % term
160
>>
term -> factor % term
160
&
term -> factor % term
160
>=
term -> factor % term
161
or
term -> factor / term
161
>
term -> factor / term
161
DEDENT
term -> factor / term
161
<=
term -> factor / term
161
NEWLINE
term -> factor / term
161
|
term -> factor / term
161
+
term -> factor / term
161
==
term -> factor / term
161
<<
term -> factor / term
161
and
term -> factor / term
161
!=
term -> factor / term
161
^
term -> factor / term
161
NAME
term -> factor / term
161
<
term -> factor / term
161
-
term -> factor / term
161
>>
term -> factor / term
161
&
term -> factor / term
161
>=
term -> factor / term
162
<
term -> factor * term
162
|
term -> factor * term
162
NAME
term -> factor * term
162
or
term -> factor * term
162
>>
term -> factor * term
162
<=
term -> factor * term
162
==
term -> factor * term
162
>=
term -> factor * term
162
DEDENT
term -> factor * term
162
^
term -> factor * term
162
-
term -> factor * term
162
<<
term -> factor * term
162
>
term -> factor * term
162
!=
term -> factor * term
162
NEWLINE
term -> factor * term
162
and
term -> factor * term
162
+
term -> factor * term
162
&
term -> factor * term
163
NAME
88
163
power
83
163
atom
84
163
[
96
163
NUMBER
89
163
STRING
95
163
~
106
163
-
86
163
True
100
163
False
90
163
None
104
163
+
98
163
factor
216
163
call
99
164
NAME
88
164
arith_expr
92
164
power
83
164
atom
84
164
[
96
164
factor
94
164
NUMBER
89
164
STRING
95
164
and_expr
217
164
shift_expr
85
164
-
86
164
~
106
164
True
100
164
term
91
164
False
90
164
None
104
164
+
98
164
call
99
165
<=
factor -> - factor
165
,
factor -> - factor
165
//
factor -> - factor
165
>>
factor -> - factor
165
or
factor -> - factor
165
+
factor -> - factor
165
^
factor -> - factor
165
-
factor -> - factor
165
and
factor -> - factor
165
%
factor -> - factor
165
>=
factor -> - factor
165
!=
factor -> - factor
165
<
factor -> - factor
165
]
factor -> - factor
165
|
factor -> - factor
165
*
factor -> - factor
165
==
factor -> - factor
165
/
factor -> - factor
165
>
factor -> - factor
165
&
factor -> - factor
165
<<
factor -> - factor
166
**
atom -> [ test_list ]
166
>
atom -> [ test_list ]
166
>=
atom -> [ test_list ]
166
&
atom -> [ test_list ]
166
<<
atom -> [ test_list ]
166
-
atom -> [ test_list ]
166
<
atom -> [ test_list ]
166
==
atom -> [ test_list ]
166
and
atom -> [ test_list ]
166
|
atom -> [ test_list ]
166
*
atom -> [ test_list ]
166
<=
atom -> [ test_list ]
166
>>
atom -> [ test_list ]
166
DEDENT
atom -> [ test_list ]
166
%
atom -> [ test_list ]
166
NAME
atom -> [ test_list ]
166
or
atom -> [ test_list ]
166
^
atom -> [ test_list ]
166
!=
atom -> [ test_list ]
166
/
atom -> [ test_list ]
166
NEWLINE
atom -> [ test_list ]
166
+
atom -> [ test_list ]
166
//
atom -> [ test_list ]
167
)
218
167
power
125
167
~
126
167
atom
127
167
None
128
167
shift_expr
129
167
-
130
167
NAME
131
167
NUMBER
132
167
False
133
167
term
134
167
arith_expr
135
167
xor_expr
136
167
factor
137
167
STRING
138
167
[
140
167
and_expr
141
167
+
142
167
call
143
167
test_list
219
167
not
144
167
True
145
167
comparison
146
167
and_test
147
167
not_test
148
167
expr
149
167
test
150
167
or_test
151
168
NAME
88
168
power
83
168
atom
84
168
[
96
168
factor
94
168
NUMBER
89
168
STRING
95
168
-
86
168
~
106
168
True
100
168
False
90
168
term
91
168
None
104
168
arith_expr
220
168
+
98
168
call
99
169
NAME
88
169
power
83
169
atom
84
169
[
96
169
factor
94
169
NUMBER
89
169
STRING
95
169
-
86
169
~
106
169
True
100
169
False
90
169
term
91
169
None
104
169
+
98
169
call
99
169
arith_expr
221
170
NAME
88
170
arith_expr
92
170
power
83
170
atom
84
170
[
96
170
factor
94
170
NUMBER
89
170
STRING
95
170
shift_expr
222
170
-
86
170
~
106
170
True
100
170
False
90
170
term
91
170
None
104
170
+
98
170
call
99
171
NAME
88
171
arith_expr
92
171
power
83
171
atom
84
171
[
96
171
factor
94
171
NUMBER
89
171
STRING
95
171
-
86
171
~
106
171
True
100
171
False
90
171
term
91
171
None
104
171
+
98
171
shift_expr
223
171
call
99
172
NAME
88
172
arith_expr
92
172
power
83
172
atom
84
172
[
96
172
and_expr
97
172
factor
94
172
NUMBER
89
172
STRING
95
172
shift_expr
85
172
-
86
172
~
106
172
True
100
172
term
91
172
False
90
172
None
104
172
xor_expr
93
172
+
98
172
call
99
172
expr
224
173
NAME
88
173
power
83
173
atom
84
173
[
96
173
factor
94
173
NUMBER
89
173
STRING
95
173
-
86
173
~
106
173
True
100
173
False
90
173
None
104
173
term
225
173
+
98
173
call
99
174
term
226
174
NAME
88
174
power
83
174
atom
84
174
[
96
174
factor
94
174
NUMBER
89
174
STRING
95
174
-
86
174
~
106
174
True
100
174
False
90
174
None
104
174
+
98
174
call
99
175
NAME
88
175
power
83
175
atom
84
175
[
96
175
factor
94
175
NUMBER
89
175
STRING
95
175
-
86
175
~
106
175
True
100
175
False
90
175
None
104
175
+
98
175
call
99
175
term
227
176
NAME
88
176
power
83
176
atom
84
176
[
96
176
factor
94
176
NUMBER
89
176
STRING
95
176
-
86
176
~
106
176
True
100
176
False
90
176
None
104
176
+
98
176
term
228
176
call
99
177
>
atom -> [ ]
177
<<
atom -> [ ]
177
**
atom -> [ ]
177
-
atom -> [ ]
177
/
atom -> [ ]
177
,
atom -> [ ]
177
^
atom -> [ ]
177
//
atom -> [ ]
177
&
atom -> [ ]
177
or
atom -> [ ]
177
+
atom -> [ ]
177
!=
atom -> [ ]
177
]
atom -> [ ]
177
<=
atom -> [ ]
177
>>
atom -> [ ]
177
and
atom -> [ ]
177
|
atom -> [ ]
177
>=
atom -> [ ]
177
==
atom -> [ ]
177
*
atom -> [ ]
177
%
atom -> [ ]
177
<
atom -> [ ]
178
]
229
179
NAME
88
179
arith_expr
92
179
power
83
179
atom
84
179
[
96
179
and_expr
97
179
factor
94
179
NUMBER
89
179
STRING
95
179
shift_expr
85
179
-
86
179
~
106
179
True
100
179
term
91
179
False
90
179
None
104
179
+
98
179
call
99
179
xor_expr
230
180
+
factor -> + factor
180
<<
factor -> + factor
180
<=
factor -> + factor
180
<
factor -> + factor
180
,
factor -> + factor
180
//
factor -> + factor
180
>
factor -> + factor
180
*
factor -> + factor
180
%
factor -> + factor
180
>=
factor -> + factor
180
/
factor -> + factor
180
-
factor -> + factor
180
>>
factor -> + factor
180
or
factor -> + factor
180
&
factor -> + factor
180
^
factor -> + factor
180
==
factor -> + factor
180
and
factor -> + factor
180
]
factor -> + factor
180
|
factor -> + factor
180
!=
factor -> + factor
181
power
83
181
atom
84
181
shift_expr
85
181
-
86
181
NAME
88
181
NUMBER
89
181
False
90
181
term
91
181
arith_expr
92
181
xor_expr
93
181
factor
94
181
STRING
95
181
[
96
181
and_expr
97
181
+
98
181
call
99
181
True
100
181
comparison
101
181
not_test
102
181
not
103
181
None
104
181
expr
105
181
~
106
181
and_test
231
182
and
not_test -> not not_test
182
,
not_test -> not not_test
182
or
not_test -> not not_test
182
]
not_test -> not not_test
183
power
83
183
atom
84
183
shift_expr
85
183
-
86
183
NAME
88
183
NUMBER
89
183
False
90
183
term
91
183
arith_expr
92
183
comparison
232
183
xor_expr
93
183
factor
94
183
STRING
95
183
[
96
183
and_expr
97
183
+
98
183
call
99
183
True
100
183
None
104
183
expr
105
183
~
106
184
>
factor -> ~ factor
184
%
factor -> ~ factor
184
<=
factor -> ~ factor
184
|
factor -> ~ factor
184
*
factor -> ~ factor
184
//
factor -> ~ factor
184
-
factor -> ~ factor
184
<
factor -> ~ factor
184
^
factor -> ~ factor
184
>>
factor -> ~ factor
184
!=
factor -> ~ factor
184
,
factor -> ~ factor
184
/
factor -> ~ factor
184
]
factor -> ~ factor
184
and
factor -> ~ factor
184
>=
factor -> ~ factor
184
==
factor -> ~ factor
184
or
factor -> ~ factor
184
&
factor -> ~ factor
184
<<
factor -> ~ factor
184
+
factor -> ~ factor
185
power
83
185
atom
84
185
shift_expr
85
185
-
86
185
NAME
88
185
NUMBER
89
185
False
90
185
term
91
185
arith_expr
92
185
xor_expr
93
185
factor
94
185
STRING
95
185
[
96
185
and_expr
97
185
+
98
185
call
99
185
True
100
185
comparison
101
185
or_test
233
185
not_test
102
185
not
103
185
None
104
185
expr
105
185
~
106
185
and_test
107
186
power
83
186
atom
84
186
shift_expr
85
186
-
86
186
NAME
88
186
NUMBER
89
186
False
90
186
term
91
186
arith_expr
92
186
xor_expr
93
186
factor
94
186
STRING
95
186
test_list
234
186
[
96
186
and_expr
97
186
+
98
186
call
99
186
True
100
186
comparison
101
186
not_test
102
186
not
103
186
None
104
186
expr
105
186
~
106
186
and_test
107
186
test
108
186
or_test
109
187
<=
xor_expr -> and_expr ^ xor_expr
187
and
xor_expr -> and_expr ^ xor_expr
187
>
xor_expr -> and_expr ^ xor_expr
187
NEWLINE
xor_expr -> and_expr ^ xor_expr
187
>=
xor_expr -> and_expr ^ xor_expr
187
!=
xor_expr -> and_expr ^ xor_expr
187
or
xor_expr -> and_expr ^ xor_expr
187
NAME
xor_expr -> and_expr ^ xor_expr
187
==
xor_expr -> and_expr ^ xor_expr
187
<
xor_expr -> and_expr ^ xor_expr
187
|
xor_expr -> and_expr ^ xor_expr
187
DEDENT
xor_expr -> and_expr ^ xor_expr
188
NEWLINE
comparison -> expr comp_op comparison
188
DEDENT
comparison -> expr comp_op comparison
188
or
comparison -> expr comp_op comparison
188
and
comparison -> expr comp_op comparison
188
NAME
comparison -> expr comp_op comparison
189
or
and_test -> not_test and and_test
189
NEWLINE
and_test -> not_test and and_test
189
DEDENT
and_test -> not_test and and_test
189
NAME
and_test -> not_test and and_test
190
NEWLINE
func_def -> NAME ( name_list ) : suite
190
NAME
func_def -> NAME ( name_list ) : suite
190
DEDENT
func_def -> NAME ( name_list ) : suite
191
INDENT
235
192
>
factor -> ~ factor
192
%
factor -> ~ factor
192
<=
factor -> ~ factor
192
|
factor -> ~ factor
192
*
factor -> ~ factor
192
//
factor -> ~ factor
192
-
factor -> ~ factor
192
<
factor -> ~ factor
192
^
factor -> ~ factor
192
>>
factor -> ~ factor
192
!=
factor -> ~ factor
192
,
factor -> ~ factor
192
)
factor -> ~ factor
192
/
factor -> ~ factor
192
and
factor -> ~ factor
192
>=
factor -> ~ factor
192
==
factor -> ~ factor
192
or
factor -> ~ factor
192
&
factor -> ~ factor
192
<<
factor -> ~ factor
192
+
factor -> ~ factor
193
NAME
131
193
power
125
193
~
126
193
atom
127
193
[
140
193
NUMBER
132
193
STRING
138
193
None
128
193
-
130
193
True
145
193
False
133
193
+
142
193
factor
236
193
call
143
194
NAME
131
194
arith_expr
135
194
power
125
194
~
126
194
atom
127
194
factor
137
194
[
140
194
NUMBER
132
194
STRING
138
194
None
128
194
and_expr
237
194
shift_expr
129
194
-
130
194
True
145
194
False
133
194
term
134
194
+
142
194
call
143
195
<=
factor -> - factor
195
)
factor -> - factor
195
,
factor -> - factor
195
//
factor -> - factor
195
>>
factor -> - factor
195
or
factor -> - factor
195
+
factor -> - factor
195
^
factor -> - factor
195
-
factor -> - factor
195
and
factor -> - factor
195
%
factor -> - factor
195
>=
factor -> - factor
195
!=
factor -> - factor
195
<
factor -> - factor
195
|
factor -> - factor
195
*
factor -> - factor
195
==
factor -> - factor
195
/
factor -> - factor
195
>
factor -> - factor
195
&
factor -> - factor
195
<<
factor -> - factor
196
)
238
196
power
125
196
~
126
196
atom
127
196
None
128
196
shift_expr
129
196
-
130
196
NAME
131
196
NUMBER
132
196
False
133
196
term
134
196
arith_expr
135
196
xor_expr
136
196
factor
137
196
STRING
138
196
[
140
196
and_expr
141
196
+
142
196
call
143
196
test_list
239
196
not
144
196
True
145
196
comparison
146
196
and_test
147
196
not_test
148
196
expr
149
196
test
150
196
or_test
151
197
NAME
131
197
power
125
197
~
126
197
atom
127
197
factor
137
197
[
140
197
NUMBER
132
197
STRING
138
197
None
128
197
-
130
197
True
145
197
False
133
197
term
134
197
arith_expr
240
197
+
142
197
call
143
198
NAME
131
198
power
125
198
~
126
198
atom
127
198
factor
137
198
[
140
198
NUMBER
132
198
STRING
138
198
None
128
198
-
130
198
True
145
198
False
133
198
term
134
198
+
142
198
call
143
198
arith_expr
241
199
NAME
131
199
arith_expr
135
199
power
125
199
~
126
199
atom
127
199
factor
137
199
[
140
199
NUMBER
132
199
STRING
138
199
None
128
199
-
130
199
True
145
199
False
133
199
term
134
199
+
142
199
shift_expr
242
199
call
143
200
NAME
131
200
arith_expr
135
200
power
125
200
~
126
200
atom
127
200
factor
137
200
[
140
200
NUMBER
132
200
shift_expr
243
200
STRING
138
200
None
128
200
-
130
200
True
145
200
False
133
200
term
134
200
+
142
200
call
143
201
NAME
131
201
arith_expr
135
201
power
125
201
~
126
201
atom
127
201
and_expr
141
201
factor
137
201
[
140
201
NUMBER
132
201
STRING
138
201
shift_expr
129
201
-
130
201
None
128
201
True
145
201
False
133
201
term
134
201
xor_expr
136
201
+
142
201
call
143
201
expr
244
202
NAME
131
202
power
125
202
~
126
202
atom
127
202
factor
137
202
[
140
202
NUMBER
132
202
STRING
138
202
None
128
202
-
130
202
True
145
202
False
133
202
term
245
202
+
142
202
call
143
203
term
246
203
NAME
131
203
power
125
203
~
126
203
atom
127
203
factor
137
203
[
140
203
NUMBER
132
203
STRING
138
203
None
128
203
-
130
203
True
145
203
False
133
203
+
142
203
call
143
204
NAME
131
204
power
125
204
~
126
204
atom
127
204
factor
137
204
[
140
204
NUMBER
132
204
STRING
138
204
None
128
204
-
130
204
True
145
204
False
133
204
+
142
204
call
143
204
term
247
205
NAME
131
205
power
125
205
~
126
205
atom
127
205
factor
137
205
[
140
205
NUMBER
132
205
STRING
138
205
None
128
205
-
130
205
True
145
205
False
133
205
+
142
205
term
248
205
call
143
206
>
call -> NAME ( test_list )
206
^
call -> NAME ( test_list )
206
==
call -> NAME ( test_list )
206
<
call -> NAME ( test_list )
206
NAME
call -> NAME ( test_list )
206
-
call -> NAME ( test_list )
206
&
call -> NAME ( test_list )
206
<=
call -> NAME ( test_list )
206
%
call -> NAME ( test_list )
206
*
call -> NAME ( test_list )
206
and
call -> NAME ( test_list )
206
/
call -> NAME ( test_list )
206
+
call -> NAME ( test_list )
206
>=
call -> NAME ( test_list )
206
|
call -> NAME ( test_list )
206
DEDENT
call -> NAME ( test_list )
206
**
call -> NAME ( test_list )
206
or
call -> NAME ( test_list )
206
NEWLINE
call -> NAME ( test_list )
206
//
call -> NAME ( test_list )
206
>>
call -> NAME ( test_list )
206
!=
call -> NAME ( test_list )
206
<<
call -> NAME ( test_list )
207
>
atom -> [ ]
207
<<
atom -> [ ]
207
**
atom -> [ ]
207
-
atom -> [ ]
207
/
atom -> [ ]
207
,
atom -> [ ]
207
^
atom -> [ ]
207
//
atom -> [ ]
207
&
atom -> [ ]
207
or
atom -> [ ]
207
+
atom -> [ ]
207
!=
atom -> [ ]
207
)
atom -> [ ]
207
<=
atom -> [ ]
207
>>
atom -> [ ]
207
and
atom -> [ ]
207
|
atom -> [ ]
207
>=
atom -> [ ]
207
==
atom -> [ ]
207
*
atom -> [ ]
207
%
atom -> [ ]
207
<
atom -> [ ]
208
]
249
209
NAME
131
209
arith_expr
135
209
power
125
209
~
126
209
atom
127
209
and_expr
141
209
factor
137
209
[
140
209
NUMBER
132
209
STRING
138
209
shift_expr
129
209
-
130
209
None
128
209
True
145
209
False
133
209
term
134
209
+
142
209
call
143
209
xor_expr
250
210
+
factor -> + factor
210
<<
factor -> + factor
210
<=
factor -> + factor
210
<
factor -> + factor
210
,
factor -> + factor
210
//
factor -> + factor
210
>
factor -> + factor
210
*
factor -> + factor
210
)
factor -> + factor
210
%
factor -> + factor
210
>=
factor -> + factor
210
/
factor -> + factor
210
-
factor -> + factor
210
>>
factor -> + factor
210
or
factor -> + factor
210
&
factor -> + factor
210
^
factor -> + factor
210
==
factor -> + factor
210
and
factor -> + factor
210
|
factor -> + factor
210
!=
factor -> + factor
211
and
not_test -> not not_test
211
,
not_test -> not not_test
211
or
not_test -> not not_test
211
)
not_test -> not not_test
212
power
125
212
~
126
212
atom
127
212
None
128
212
shift_expr
129
212
-
130
212
NAME
131
212
NUMBER
132
212
False
133
212
term
134
212
arith_expr
135
212
xor_expr
136
212
factor
137
212
STRING
138
212
[
140
212
and_expr
141
212
+
142
212
call
143
212
not
144
212
True
145
212
comparison
146
212
or_test
251
212
and_test
147
212
not_test
148
212
expr
149
213
power
125
213
~
126
213
atom
127
213
None
128
213
shift_expr
129
213
-
130
213
NAME
131
213
NUMBER
132
213
False
133
213
term
134
213
arith_expr
135
213
xor_expr
136
213
factor
137
213
STRING
138
213
[
140
213
and_expr
141
213
+
142
213
call
143
213
not
144
213
True
145
213
comparison
146
213
not_test
148
213
expr
149
213
and_test
252
214
power
125
214
~
126
214
atom
127
214
None
128
214
shift_expr
129
214
-
130
214
NAME
131
214
NUMBER
132
214
False
133
214
term
134
214
arith_expr
135
214
comparison
253
214
xor_expr
136
214
factor
137
214
STRING
138
214
[
140
214
and_expr
141
214
+
142
214
call
143
214
True
145
214
expr
149
215
power
125
215
~
126
215
atom
127
215
None
128
215
shift_expr
129
215
-
130
215
NAME
131
215
NUMBER
132
215
False
133
215
term
134
215
arith_expr
135
215
xor_expr
136
215
factor
137
215
STRING
138
215
[
140
215
and_expr
141
215
+
142
215
call
143
215
not
144
215
True
145
215
comparison
146
215
and_test
147
215
not_test
148
215
expr
149
215
test
150
215
test_list
254
215
or_test
151
216
%
power -> atom ** factor
216
>=
power -> atom ** factor
216
==
power -> atom ** factor
216
<
power -> atom ** factor
216
/
power -> atom ** factor
216
-
power -> atom ** factor
216
>
power -> atom ** factor
216
or
power -> atom ** factor
216
<<
power -> atom ** factor
216
]
power -> atom ** factor
216
//
power -> atom ** factor
216
|
power -> atom ** factor
216
&
power -> atom ** factor
216
<=
power -> atom ** factor
216
>>
power -> atom ** factor
216
,
power -> atom ** factor
216
^
power -> atom ** factor
216
+
power -> atom ** factor
216
*
power -> atom ** factor
216
and
power -> atom ** factor
216
!=
power -> atom ** factor
217
>=
and_expr -> shift_expr & and_expr
217
<=
and_expr -> shift_expr & and_expr
217
and
and_expr -> shift_expr & and_expr
217
]
and_expr -> shift_expr & and_expr
217
,
and_expr -> shift_expr & and_expr
217
|
and_expr -> shift_expr & and_expr
217
>
and_expr -> shift_expr & and_expr
217
<
and_expr -> shift_expr & and_expr
217
!=
and_expr -> shift_expr & and_expr
217
^
and_expr -> shift_expr & and_expr
217
or
and_expr -> shift_expr & and_expr
217
==
and_expr -> shift_expr & and_expr
218
>
call -> NAME ( )
218
%
call -> NAME ( )
218
<=
call -> NAME ( )
218
&
call -> NAME ( )
218
*
call -> NAME ( )
218
and
call -> NAME ( )
218
//
call -> NAME ( )
218
==
call -> NAME ( )
218
**
call -> NAME ( )
218
/
call -> NAME ( )
218
]
call -> NAME ( )
218
or
call -> NAME ( )
218
<<
call -> NAME ( )
218
>=
call -> NAME ( )
218
^
call -> NAME ( )
218
<
call -> NAME ( )
218
,
call -> NAME ( )
218
!=
call -> NAME ( )
218
>>
call -> NAME ( )
218
-
call -> NAME ( )
218
+
call -> NAME ( )
218
|
call -> NAME ( )
219
)
255
220
<=
arith_expr -> term + arith_expr
220
]
arith_expr -> term + arith_expr
220
>
arith_expr -> term + arith_expr
220
,
arith_expr -> term + arith_expr
220
>=
arith_expr -> term + arith_expr
220
==
arith_expr -> term + arith_expr
220
!=
arith_expr -> term + arith_expr
220
<
arith_expr -> term + arith_expr
220
&
arith_expr -> term + arith_expr
220
<<
arith_expr -> term + arith_expr
220
or
arith_expr -> term + arith_expr
220
and
arith_expr -> term + arith_expr
220
^
arith_expr -> term + arith_expr
220
>>
arith_expr -> term + arith_expr
220
|
arith_expr -> term + arith_expr
221
]
arith_expr -> term - arith_expr
221
>>
arith_expr -> term - arith_expr
221
>=
arith_expr -> term - arith_expr
221
<=
arith_expr -> term - arith_expr
221
,
arith_expr -> term - arith_expr
221
<
arith_expr -> term - arith_expr
221
or
arith_expr -> term - arith_expr
221
|
arith_expr -> term - arith_expr
221
&
arith_expr -> term - arith_expr
221
!=
arith_expr -> term - arith_expr
221
and
arith_expr -> term - arith_expr
221
<<
arith_expr -> term - arith_expr
221
^
arith_expr -> term - arith_expr
221
>
arith_expr -> term - arith_expr
221
==
arith_expr -> term - arith_expr
222
,
shift_expr -> arith_expr >> shift_expr
222
|
shift_expr -> arith_expr >> shift_expr
222
and
shift_expr -> arith_expr >> shift_expr
222
^
shift_expr -> arith_expr >> shift_expr
222
or
shift_expr -> arith_expr >> shift_expr
222
]
shift_expr -> arith_expr >> shift_expr
222
<=
shift_expr -> arith_expr >> shift_expr
222
>
shift_expr -> arith_expr >> shift_expr
222
==
shift_expr -> arith_expr >> shift_expr
222
!=
shift_expr -> arith_expr >> shift_expr
222
<
shift_expr -> arith_expr >> shift_expr
222
&
shift_expr -> arith_expr >> shift_expr
222
>=
shift_expr -> arith_expr >> shift_expr
223
,
shift_expr -> arith_expr << shift_expr
223
<=
shift_expr -> arith_expr << shift_expr
223
<
shift_expr -> arith_expr << shift_expr
223
or
shift_expr -> arith_expr << shift_expr
223
==
shift_expr -> arith_expr << shift_expr
223
]
shift_expr -> arith_expr << shift_expr
223
>=
shift_expr -> arith_expr << shift_expr
223
|
shift_expr -> arith_expr << shift_expr
223
&
shift_expr -> arith_expr << shift_expr
223
!=
shift_expr -> arith_expr << shift_expr
223
^
shift_expr -> arith_expr << shift_expr
223
>
shift_expr -> arith_expr << shift_expr
223
and
shift_expr -> arith_expr << shift_expr
224
==
expr -> xor_expr | expr
224
or
expr -> xor_expr | expr
224
,
expr -> xor_expr | expr
224
and
expr -> xor_expr | expr
224
!=
expr -> xor_expr | expr
224
>
expr -> xor_expr | expr
224
<
expr -> xor_expr | expr
224
>=
expr -> xor_expr | expr
224
]
expr -> xor_expr | expr
224
<=
expr -> xor_expr | expr
225
<
term -> factor // term
225
^
term -> factor // term
225
,
term -> factor // term
225
&
term -> factor // term
225
or
term -> factor // term
225
!=
term -> factor // term
225
>=
term -> factor // term
225
-
term -> factor // term
225
<=
term -> factor // term
225
<<
term -> factor // term
225
>
term -> factor // term
225
|
term -> factor // term
225
==
term -> factor // term
225
+
term -> factor // term
225
and
term -> factor // term
225
>>
term -> factor // term
225
]
term -> factor // term
226
<
term -> factor % term
226
>
term -> factor % term
226
<<
term -> factor % term
226
<=
term -> factor % term
226
-
term -> factor % term
226
!=
term -> factor % term
226
or
term -> factor % term
226
,
term -> factor % term
226
]
term -> factor % term
226
and
term -> factor % term
226
+
term -> factor % term
226
^
term -> factor % term
226
|
term -> factor % term
226
==
term -> factor % term
226
>>
term -> factor % term
226
&
term -> factor % term
226
>=
term -> factor % term
227
,
term -> factor / term
227
or
term -> factor / term
227
>
term -> factor / term
227
<=
term -> factor / term
227
|
term -> factor / term
227
+
term -> factor / term
227
==
term -> factor / term
227
<<
term -> factor / term
227
and
term -> factor / term
227
!=
term -> factor / term
227
^
term -> factor / term
227
<
term -> factor / term
227
-
term -> factor / term
227
>>
term -> factor / term
227
&
term -> factor / term
227
]
term -> factor / term
227
>=
term -> factor / term
228
,
term -> factor * term
228
<
term -> factor * term
228
|
term -> factor * term
228
or
term -> factor * term
228
>>
term -> factor * term
228
<=
term -> factor * term
228
==
term -> factor * term
228
>=
term -> factor * term
228
^
term -> factor * term
228
-
term -> factor * term
228
<<
term -> factor * term
228
>
term -> factor * term
228
!=
term -> factor * term
228
and
term -> factor * term
228
]
term -> factor * term
228
+
term -> factor * term
228
&
term -> factor * term
229
**
atom -> [ test_list ]
229
>
atom -> [ test_list ]
229
>=
atom -> [ test_list ]
229
&
atom -> [ test_list ]
229
<<
atom -> [ test_list ]
229
]
atom -> [ test_list ]
229
-
atom -> [ test_list ]
229
<
atom -> [ test_list ]
229
==
atom -> [ test_list ]
229
and
atom -> [ test_list ]
229
|
atom -> [ test_list ]
229
*
atom -> [ test_list ]
229
<=
atom -> [ test_list ]
229
>>
atom -> [ test_list ]
229
%
atom -> [ test_list ]
229
or
atom -> [ test_list ]
229
^
atom -> [ test_list ]
229
!=
atom -> [ test_list ]
229
,
atom -> [ test_list ]
229
/
atom -> [ test_list ]
229
+
atom -> [ test_list ]
229
//
atom -> [ test_list ]
230
]
xor_expr -> and_expr ^ xor_expr
230
<=
xor_expr -> and_expr ^ xor_expr
230
and
xor_expr -> and_expr ^ xor_expr
230
!=
xor_expr -> and_expr ^ xor_expr
230
or
xor_expr -> and_expr ^ xor_expr
230
<
xor_expr -> and_expr ^ xor_expr
230
==
xor_expr -> and_expr ^ xor_expr
230
>=
xor_expr -> and_expr ^ xor_expr
230
|
xor_expr -> and_expr ^ xor_expr
230
,
xor_expr -> and_expr ^ xor_expr
230
>
xor_expr -> and_expr ^ xor_expr
231
or
and_test -> not_test and and_test
231
,
and_test -> not_test and and_test
231
]
and_test -> not_test and and_test
232
or
comparison -> expr comp_op comparison
232
and
comparison -> expr comp_op comparison
232
,
comparison -> expr comp_op comparison
232
]
comparison -> expr comp_op comparison
233
,
or_test -> and_test or or_test
233
]
or_test -> and_test or or_test
234
]
test_list -> test , test_list
235
loop_stmt
256
235
return
257
235
assign_stmt
258
235
NAME
259
235
NEWLINE
260
235
loop
261
235
var
262
235
stmt_list
263
235
endloop
264
235
return_stmt
265
235
if
266
235
flow_stmt
267
235
decl_stmt
268
235
nextloop
269
235
if_stmt
270
235
DEDENT
stmt_list -> 
235
stmt
271
236
%
power -> atom ** factor
236
>=
power -> atom ** factor
236
==
power -> atom ** factor
236
<
power -> atom ** factor
236
/
power -> atom ** factor
236
-
power -> atom ** factor
236
)
power -> atom ** factor
236
>
power -> atom ** factor
236
or
power -> atom ** factor
236
<<
power -> atom ** factor
236
//
power -> atom ** factor
236
|
power -> atom ** factor
236
&
power -> atom ** factor
236
<=
power -> atom ** factor
236
>>
power -> atom ** factor
236
,
power -> atom ** factor
236
^
power -> atom ** factor
236
+
power -> atom ** factor
236
*
power -> atom ** factor
236
and
power -> atom ** factor
236
!=
power -> atom ** factor
237
>=
and_expr -> shift_expr & and_expr
237
<=
and_expr -> shift_expr & and_expr
237
and
and_expr -> shift_expr & and_expr
237
,
and_expr -> shift_expr & and_expr
237
|
and_expr -> shift_expr & and_expr
237
>
and_expr -> shift_expr & and_expr
237
<
and_expr -> shift_expr & and_expr
237
)
and_expr -> shift_expr & and_expr
237
!=
and_expr -> shift_expr & and_expr
237
^
and_expr -> shift_expr & and_expr
237
or
and_expr -> shift_expr & and_expr
237
==
and_expr -> shift_expr & and_expr
238
>
call -> NAME ( )
238
%
call -> NAME ( )
238
<=
call -> NAME ( )
238
&
call -> NAME ( )
238
*
call -> NAME ( )
238
and
call -> NAME ( )
238
//
call -> NAME ( )
238
==
call -> NAME ( )
238
**
call -> NAME ( )
238
/
call -> NAME ( )
238
or
call -> NAME ( )
238
<<
call -> NAME ( )
238
>=
call -> NAME ( )
238
^
call -> NAME ( )
238
<
call -> NAME ( )
238
,
call -> NAME ( )
238
!=
call -> NAME ( )
238
>>
call -> NAME ( )
238
)
call -> NAME ( )
238
-
call -> NAME ( )
238
+
call -> NAME ( )
238
|
call -> NAME ( )
239
)
272
240
<=
arith_expr -> term + arith_expr
240
>
arith_expr -> term + arith_expr
240
>=
arith_expr -> term + arith_expr
240
,
arith_expr -> term + arith_expr
240
)
arith_expr -> term + arith_expr
240
==
arith_expr -> term + arith_expr
240
!=
arith_expr -> term + arith_expr
240
<
arith_expr -> term + arith_expr
240
&
arith_expr -> term + arith_expr
240
<<
arith_expr -> term + arith_expr
240
or
arith_expr -> term + arith_expr
240
and
arith_expr -> term + arith_expr
240
^
arith_expr -> term + arith_expr
240
>>
arith_expr -> term + arith_expr
240
|
arith_expr -> term + arith_expr
241
>>
arith_expr -> term - arith_expr
241
>=
arith_expr -> term - arith_expr
241
<=
arith_expr -> term - arith_expr
241
,
arith_expr -> term - arith_expr
241
<
arith_expr -> term - arith_expr
241
or
arith_expr -> term - arith_expr
241
)
arith_expr -> term - arith_expr
241
|
arith_expr -> term - arith_expr
241
&
arith_expr -> term - arith_expr
241
!=
arith_expr -> term - arith_expr
241
and
arith_expr -> term - arith_expr
241
<<
arith_expr -> term - arith_expr
241
^
arith_expr -> term - arith_expr
241
>
arith_expr -> term - arith_expr
241
==
arith_expr -> term - arith_expr
242
,
shift_expr -> arith_expr << shift_expr
242
<=
shift_expr -> arith_expr << shift_expr
242
<
shift_expr -> arith_expr << shift_expr
242
or
shift_expr -> arith_expr << shift_expr
242
==
shift_expr -> arith_expr << shift_expr
242
>=
shift_expr -> arith_expr << shift_expr
242
|
shift_expr -> arith_expr << shift_expr
242
&
shift_expr -> arith_expr << shift_expr
242
!=
shift_expr -> arith_expr << shift_expr
242
)
shift_expr -> arith_expr << shift_expr
242
^
shift_expr -> arith_expr << shift_expr
242
>
shift_expr -> arith_expr << shift_expr
242
and
shift_expr -> arith_expr << shift_expr
243
,
shift_expr -> arith_expr >> shift_expr
243
|
shift_expr -> arith_expr >> shift_expr
243
and
shift_expr -> arith_expr >> shift_expr
243
^
shift_expr -> arith_expr >> shift_expr
243
)
shift_expr -> arith_expr >> shift_expr
243
or
shift_expr -> arith_expr >> shift_expr
243
<=
shift_expr -> arith_expr >> shift_expr
243
>
shift_expr -> arith_expr >> shift_expr
243
==
shift_expr -> arith_expr >> shift_expr
243
!=
shift_expr -> arith_expr >> shift_expr
243
<
shift_expr -> arith_expr >> shift_expr
243
&
shift_expr -> arith_expr >> shift_expr
243
>=
shift_expr -> arith_expr >> shift_expr
244
==
expr -> xor_expr | expr
244
or
expr -> xor_expr | expr
244
,
expr -> xor_expr | expr
244
and
expr -> xor_expr | expr
244
)
expr -> xor_expr | expr
244
!=
expr -> xor_expr | expr
244
<
expr -> xor_expr | expr
244
>=
expr -> xor_expr | expr
244
>
expr -> xor_expr | expr
244
<=
expr -> xor_expr | expr
245
<
term -> factor // term
245
^
term -> factor // term
245
,
term -> factor // term
245
&
term -> factor // term
245
or
term -> factor // term
245
!=
term -> factor // term
245
)
term -> factor // term
245
>=
term -> factor // term
245
<=
term -> factor // term
245
<<
term -> factor // term
245
>
term -> factor // term
245
-
term -> factor // term
245
|
term -> factor // term
245
==
term -> factor // term
245
+
term -> factor // term
245
and
term -> factor // term
245
>>
term -> factor // term
246
<
term -> factor % term
246
>
term -> factor % term
246
<<
term -> factor % term
246
<=
term -> factor % term
246
-
term -> factor % term
246
!=
term -> factor % term
246
or
term -> factor % term
246
,
term -> factor % term
246
and
term -> factor % term
246
+
term -> factor % term
246
^
term -> factor % term
246
|
term -> factor % term
246
)
term -> factor % term
246
==
term -> factor % term
246
>>
term -> factor % term
246
&
term -> factor % term
246
>=
term -> factor % term
247
,
term -> factor / term
247
or
term -> factor / term
247
>
term -> factor / term
247
)
term -> factor / term
247
<=
term -> factor / term
247
|
term -> factor / term
247
+
term -> factor / term
247
==
term -> factor / term
247
<<
term -> factor / term
247
and
term -> factor / term
247
!=
term -> factor / term
247
^
term -> factor / term
247
<
term -> factor / term
247
-
term -> factor / term
247
>>
term -> factor / term
247
&
term -> factor / term
247
>=
term -> factor / term
248
,
term -> factor * term
248
<
term -> factor * term
248
|
term -> factor * term
248
or
term -> factor * term
248
>>
term -> factor * term
248
<=
term -> factor * term
248
==
term -> factor * term
248
>=
term -> factor * term
248
)
term -> factor * term
248
^
term -> factor * term
248
-
term -> factor * term
248
<<
term -> factor * term
248
>
term -> factor * term
248
!=
term -> factor * term
248
and
term -> factor * term
248
+
term -> factor * term
248
&
term -> factor * term
249
**
atom -> [ test_list ]
249
>
atom -> [ test_list ]
249
>=
atom -> [ test_list ]
249
&
atom -> [ test_list ]
249
<<
atom -> [ test_list ]
249
-
atom -> [ test_list ]
249
<
atom -> [ test_list ]
249
==
atom -> [ test_list ]
249
and
atom -> [ test_list ]
249
|
atom -> [ test_list ]
249
*
atom -> [ test_list ]
249
<=
atom -> [ test_list ]
249
)
atom -> [ test_list ]
249
>>
atom -> [ test_list ]
249
%
atom -> [ test_list ]
249
or
atom -> [ test_list ]
249
^
atom -> [ test_list ]
249
!=
atom -> [ test_list ]
249
,
atom -> [ test_list ]
249
/
atom -> [ test_list ]
249
+
atom -> [ test_list ]
249
//
atom -> [ test_list ]
250
<=
xor_expr -> and_expr ^ xor_expr
250
and
xor_expr -> and_expr ^ xor_expr
250
!=
xor_expr -> and_expr ^ xor_expr
250
)
xor_expr -> and_expr ^ xor_expr
250
or
xor_expr -> and_expr ^ xor_expr
250
<
xor_expr -> and_expr ^ xor_expr
250
==
xor_expr -> and_expr ^ xor_expr
250
>=
xor_expr -> and_expr ^ xor_expr
250
|
xor_expr -> and_expr ^ xor_expr
250
,
xor_expr -> and_expr ^ xor_expr
250
>
xor_expr -> and_expr ^ xor_expr
251
,
or_test -> and_test or or_test
251
)
or_test -> and_test or or_test
252
or
and_test -> not_test and and_test
252
,
and_test -> not_test and and_test
252
)
and_test -> not_test and and_test
253
or
comparison -> expr comp_op comparison
253
)
comparison -> expr comp_op comparison
253
and
comparison -> expr comp_op comparison
253
,
comparison -> expr comp_op comparison
254
)
test_list -> test , test_list
255
>
call -> NAME ( test_list )
255
^
call -> NAME ( test_list )
255
==
call -> NAME ( test_list )
255
<
call -> NAME ( test_list )
255
,
call -> NAME ( test_list )
255
-
call -> NAME ( test_list )
255
&
call -> NAME ( test_list )
255
]
call -> NAME ( test_list )
255
<=
call -> NAME ( test_list )
255
%
call -> NAME ( test_list )
255
*
call -> NAME ( test_list )
255
and
call -> NAME ( test_list )
255
/
call -> NAME ( test_list )
255
+
call -> NAME ( test_list )
255
>=
call -> NAME ( test_list )
255
|
call -> NAME ( test_list )
255
**
call -> NAME ( test_list )
255
or
call -> NAME ( test_list )
255
>>
call -> NAME ( test_list )
255
//
call -> NAME ( test_list )
255
!=
call -> NAME ( test_list )
255
<<
call -> NAME ( test_list )
256
NEWLINE
stmt -> loop_stmt
256
return
stmt -> loop_stmt
256
var
stmt -> loop_stmt
256
DEDENT
stmt -> loop_stmt
256
nextloop
stmt -> loop_stmt
256
NAME
stmt -> loop_stmt
256
loop
stmt -> loop_stmt
256
if
stmt -> loop_stmt
256
endloop
stmt -> loop_stmt
257
power
273
257
atom
274
257
NAME
275
257
shift_expr
276
257
term
277
257
-
278
257
xor_expr
279
257
True
280
257
False
281
257
arith_expr
282
257
and_test
283
257
factor
284
257
NUMBER
285
257
STRING
286
257
[
287
257
and_expr
288
257
+
289
257
call
290
257
None
291
257
expr
292
257
not
293
257
~
294
257
not_test
295
257
test
296
257
comparison
297
257
or_test
298
258
nextloop
stmt -> assign_stmt
258
DEDENT
stmt -> assign_stmt
258
var
stmt -> assign_stmt
258
endloop
stmt -> assign_stmt
258
return
stmt -> assign_stmt
258
NEWLINE
stmt -> assign_stmt
258
loop
stmt -> assign_stmt
258
if
stmt -> assign_stmt
258
NAME
stmt -> assign_stmt
259
=
299
260
loop_stmt
256
260
return
257
260
assign_stmt
258
260
NAME
259
260
NEWLINE
260
260
loop
261
260
var
262
260
endloop
264
260
return_stmt
265
260
if
266
260
flow_stmt
267
260
decl_stmt
268
260
nextloop
269
260
if_stmt
270
260
DEDENT
stmt_list -> 
260
stmt
271
260
stmt_list
300
261
NAME
301
261
:
302
262
NAME
303
263
DEDENT
304
264
NAME
flow_stmt -> endloop
264
loop
flow_stmt -> endloop
264
NEWLINE
flow_stmt -> endloop
264
nextloop
flow_stmt -> endloop
264
return
flow_stmt -> endloop
264
if
flow_stmt -> endloop
264
DEDENT
flow_stmt -> endloop
264
var
flow_stmt -> endloop
264
endloop
flow_stmt -> endloop
265
NAME
stmt -> return_stmt
265
return
stmt -> return_stmt
265
DEDENT
stmt -> return_stmt
265
var
stmt -> return_stmt
265
nextloop
stmt -> return_stmt
265
endloop
stmt -> return_stmt
265
loop
stmt -> return_stmt
265
NEWLINE
stmt -> return_stmt
265
if
stmt -> return_stmt
266
NAME
305
266
arith_expr
306
266
power
307
266
atom
308
266
[
309
266
factor
310
266
NUMBER
311
266
STRING
312
266
or_test
313
266
shift_expr
314
266
-
315
266
~
316
266
True
317
266
False
318
266
term
319
266
None
320
266
xor_expr
321
266
+
322
266
and_expr
323
266
call
324
266
test
325
266
and_test
326
266
comparison
327
266
not_test
328
266
expr
329
266
not
330
267
NEWLINE
stmt -> flow_stmt
267
return
stmt -> flow_stmt
267
loop
stmt -> flow_stmt
267
if
stmt -> flow_stmt
267
DEDENT
stmt -> flow_stmt
267
endloop
stmt -> flow_stmt
267
NAME
stmt -> flow_stmt
267
nextloop
stmt -> flow_stmt
267
var
stmt -> flow_stmt
268
var
stmt -> decl_stmt
268
NAME
stmt -> decl_stmt
268
return
stmt -> decl_stmt
268
if
stmt -> decl_stmt
268
loop
stmt -> decl_stmt
268
DEDENT
stmt -> decl_stmt
268
endloop
stmt -> decl_stmt
268
NEWLINE
stmt -> decl_stmt
268
nextloop
stmt -> decl_stmt
269
return
flow_stmt -> nextloop
269
NEWLINE
flow_stmt -> nextloop
269
nextloop
flow_stmt -> nextloop
269
NAME
flow_stmt -> nextloop
269
DEDENT
flow_stmt -> nextloop
269
endloop
flow_stmt -> nextloop
269
loop
flow_stmt -> nextloop
269
var
flow_stmt -> nextloop
269
if
flow_stmt -> nextloop
270
var
stmt -> if_stmt
270
NEWLINE
stmt -> if_stmt
270
return
stmt -> if_stmt
270
endloop
stmt -> if_stmt
270
DEDENT
stmt -> if_stmt
270
nextloop
stmt -> if_stmt
270
NAME
stmt -> if_stmt
270
if
stmt -> if_stmt
270
loop
stmt -> if_stmt
271
loop_stmt
256
271
return
257
271
assign_stmt
258
271
NAME
259
271
NEWLINE
260
271
loop
261
271
var
262
271
endloop
264
271
return_stmt
265
271
if
266
271
flow_stmt
267
271
decl_stmt
268
271
nextloop
269
271
if_stmt
270
271
DEDENT
stmt_list -> 
271
stmt
271
271
stmt_list
331
272
>
call -> NAME ( test_list )
272
^
call -> NAME ( test_list )
272
==
call -> NAME ( test_list )
272
<
call -> NAME ( test_list )
272
,
call -> NAME ( test_list )
272
-
call -> NAME ( test_list )
272
&
call -> NAME ( test_list )
272
<=
call -> NAME ( test_list )
272
%
call -> NAME ( test_list )
272
*
call -> NAME ( test_list )
272
and
call -> NAME ( test_list )
272
/
call -> NAME ( test_list )
272
+
call -> NAME ( test_list )
272
>=
call -> NAME ( test_list )
272
|
call -> NAME ( test_list )
272
**
call -> NAME ( test_list )
272
or
call -> NAME ( test_list )
272
)
call -> NAME ( test_list )
272
>>
call -> NAME ( test_list )
272
//
call -> NAME ( test_list )
272
!=
call -> NAME ( test_list )
272
<<
call -> NAME ( test_list )
273
<=
factor -> power
273
if
factor -> power
273
NAME
factor -> power
273
>=
factor -> power
273
nextloop
factor -> power
273
or
factor -> power
273
==
factor -> power
273
<
factor -> power
273
^
factor -> power
273
endloop
factor -> power
273
*
factor -> power
273
var
factor -> power
273
<<
factor -> power
273
//
factor -> power
273
|
factor -> power
273
/
factor -> power
273
DEDENT
factor -> power
273
>
factor -> power
273
+
factor -> power
273
and
factor -> power
273
!=
factor -> power
273
-
factor -> power
273
NEWLINE
factor -> power
273
loop
factor -> power
273
return
factor -> power
273
>>
factor -> power
273
%
factor -> power
273
&
factor -> power
274
>>
power -> atom
274
endloop
power -> atom
274
**
332
274
DEDENT
power -> atom
274
<=
power -> atom
274
|
power -> atom
274
!=
power -> atom
274
<<
power -> atom
274
nextloop
power -> atom
274
>=
power -> atom
274
and
power -> atom
274
+
power -> atom
274
-
power -> atom
274
loop
power -> atom
274
<
power -> atom
274
%
power -> atom
274
/
power -> atom
274
NAME
power -> atom
274
return
power -> atom
274
or
power -> atom
274
if
power -> atom
274
var
power -> atom
274
NEWLINE
power -> atom
274
*
power -> atom
274
^
power -> atom
274
>
power -> atom
274
//
power -> atom
274
==
power -> atom
274
&
power -> atom
275
and
atom -> NAME
275
(
333
275
nextloop
atom -> NAME
275
DEDENT
atom -> NAME
275
return
atom -> NAME
275
endloop
atom -> NAME
275
<<
atom -> NAME
275
//
atom -> NAME
275
>>
atom -> NAME
275
%
atom -> NAME
275
var
atom -> NAME
275
loop
atom -> NAME
275
==
atom -> NAME
275
|
atom -> NAME
275
^
atom -> NAME
275
<
atom -> NAME
275
/
atom -> NAME
275
+
atom -> NAME
275
or
atom -> NAME
275
*
atom -> NAME
275
-
atom -> NAME
275
>
atom -> NAME
275
<=
atom -> NAME
275
NAME
atom -> NAME
275
**
atom -> NAME
275
>=
atom -> NAME
275
!=
atom -> NAME
275
&
atom -> NAME
275
NEWLINE
atom -> NAME
275
if
atom -> NAME
276
&
334
276
if
and_expr -> shift_expr
276
|
and_expr -> shift_expr
276
return
and_expr -> shift_expr
276
^
and_expr -> shift_expr
276
<
and_expr -> shift_expr
276
endloop
and_expr -> shift_expr
276
var
and_expr -> shift_expr
276
<=
and_expr -> shift_expr
276
NAME
and_expr -> shift_expr
276
nextloop
and_expr -> shift_expr
276
or
and_expr -> shift_expr
276
NEWLINE
and_expr -> shift_expr
276
>=
and_expr -> shift_expr
276
==
and_expr -> shift_expr
276
loop
and_expr -> shift_expr
276
and
and_expr -> shift_expr
276
DEDENT
and_expr -> shift_expr
276
!=
and_expr -> shift_expr
276
>
and_expr -> shift_expr
277
+
335
277
var
arith_expr -> term
277
==
arith_expr -> term
277
or
arith_expr -> term
277
>>
arith_expr -> term
277
NEWLINE
arith_expr -> term
277
<<
arith_expr -> term
277
-
336
277
|
arith_expr -> term
277
<
arith_expr -> term
277
if
arith_expr -> term
277
loop
arith_expr -> term
277
!=
arith_expr -> term
277
NAME
arith_expr -> term
277
and
arith_expr -> term
277
endloop
arith_expr -> term
277
&
arith_expr -> term
277
nextloop
arith_expr -> term
277
return
arith_expr -> term
277
>
arith_expr -> term
277
<=
arith_expr -> term
277
^
arith_expr -> term
277
>=
arith_expr -> term
277
DEDENT
arith_expr -> term
278
NAME
275
278
power
273
278
atom
274
278
[
287
278
NUMBER
285
278
STRING
286
278
~
294
278
-
278
278
factor
337
278
True
280
278
False
281
278
None
291
278
+
289
278
call
290
279
|
338
279
DEDENT
expr -> xor_expr
279
if
expr -> xor_expr
279
NAME
expr -> xor_expr
279
>
expr -> xor_expr
279
loop
expr -> xor_expr
279
>=
expr -> xor_expr
279
and
expr -> xor_expr
279
or
expr -> xor_expr
279
NEWLINE
expr -> xor_expr
279
return
expr -> xor_expr
279
<
expr -> xor_expr
279
!=
expr -> xor_expr
279
==
expr -> xor_expr
279
<=
expr -> xor_expr
279
var
expr -> xor_expr
279
nextloop
expr -> xor_expr
279
endloop
expr -> xor_expr
280
<
atom -> True
280
or
atom -> True
280
%
atom -> True
280
endloop
atom -> True
280
DEDENT
atom -> True
280
>=
atom -> True
280
<<
atom -> True
280
nextloop
atom -> True
280
//
atom -> True
280
|
atom -> True
280
>>
atom -> True
280
loop
atom -> True
280
and
atom -> True
280
var
atom -> True
280
*
atom -> True
280
>
atom -> True
280
!=
atom -> True
280
if
atom -> True
280
==
atom -> True
280
NEWLINE
atom -> True
280
+
atom -> True
280
<=
atom -> True
280
^
atom -> True
280
**
atom -> True
280
-
atom -> True
280
/
atom -> True
280
&
atom -> True
280
NAME
atom -> True
280
return
atom -> True
281
>
atom -> False
281
endloop
atom -> False
281
<
atom -> False
281
//
atom -> False
281
-
atom -> False
281
+
atom -> False
281
NEWLINE
atom -> False
281
|
atom -> False
281
and
atom -> False
281
return
atom -> False
281
>>
atom -> False
281
if
atom -> False
281
<<
atom -> False
281
**
atom -> False
281
==
atom -> False
281
>=
atom -> False
281
<=
atom -> False
281
loop
atom -> False
281
nextloop
atom -> False
281
&
atom -> False
281
!=
atom -> False
281
or
atom -> False
281
/
atom -> False
281
%
atom -> False
281
var
atom -> False
281
NAME
atom -> False
281
*
atom -> False
281
^
atom -> False
281
DEDENT
atom -> False
282
>>
339
282
<<
340
282
nextloop
shift_expr -> arith_expr
282
and
shift_expr -> arith_expr
282
NAME
shift_expr -> arith_expr
282
<=
shift_expr -> arith_expr
282
|
shift_expr -> arith_expr
282
DEDENT
shift_expr -> arith_expr
282
>=
shift_expr -> arith_expr
282
loop
shift_expr -> arith_expr
282
or
shift_expr -> arith_expr
282
>
shift_expr -> arith_expr
282
<
shift_expr -> arith_expr
282
!=
shift_expr -> arith_expr
282
==
shift_expr -> arith_expr
282
&
shift_expr -> arith_expr
282
NEWLINE
shift_expr -> arith_expr
282
if
shift_expr -> arith_expr
282
^
shift_expr -> arith_expr
282
endloop
shift_expr -> arith_expr
282
return
shift_expr -> arith_expr
282
var
shift_expr -> arith_expr
283
or
341
283
var
or_test -> and_test
283
NEWLINE
or_test -> and_test
283
endloop
or_test -> and_test
283
return
or_test -> and_test
283
DEDENT
or_test -> and_test
283
if
or_test -> and_test
283
loop
or_test -> and_test
283
NAME
or_test -> and_test
283
nextloop
or_test -> and_test
284
//
342
284
*
343
284
%
344
284
/
345
284
==
term -> factor
284
^
term -> factor
284
>
term -> factor
284
or
term -> factor
284
loop
term -> factor
284
&
term -> factor
284
<<
term -> factor
284
DEDENT
term -> factor
284
return
term -> factor
284
-
term -> factor
284
endloop
term -> factor
284
<
term -> factor
284
if
term -> factor
284
>>
term -> factor
284
|
term -> factor
284
var
term -> factor
284
and
term -> factor
284
!=
term -> factor
284
>=
term -> factor
284
NAME
term -> factor
284
<=
term -> factor
284
+
term -> factor
284
NEWLINE
term -> factor
284
nextloop
term -> factor
285
var
atom -> NUMBER
285
^
atom -> NUMBER
285
|
atom -> NUMBER
285
endloop
atom -> NUMBER
285
<=
atom -> NUMBER
285
%
atom -> NUMBER
285
&
atom -> NUMBER
285
==
atom -> NUMBER
285
**
atom -> NUMBER
285
>>
atom -> NUMBER
285
+
atom -> NUMBER
285
or
atom -> NUMBER
285
NEWLINE
atom -> NUMBER
285
if
atom -> NUMBER
285
/
atom -> NUMBER
285
return
atom -> NUMBER
285
DEDENT
atom -> NUMBER
285
NAME
atom -> NUMBER
285
>=
atom -> NUMBER
285
!=
atom -> NUMBER
285
nextloop
atom -> NUMBER
285
-
atom -> NUMBER
285
loop
atom -> NUMBER
285
>
atom -> NUMBER
285
<
atom -> NUMBER
285
<<
atom -> NUMBER
285
*
atom -> NUMBER
285
//
atom -> NUMBER
285
and
atom -> NUMBER
286
>=
atom -> STRING
286
|
atom -> STRING
286
^
atom -> STRING
286
or
atom -> STRING
286
<<
atom -> STRING
286
*
atom -> STRING
286
return
atom -> STRING
286
DEDENT
atom -> STRING
286
//
atom -> STRING
286
>
atom -> STRING
286
&
atom -> STRING
286
NEWLINE
atom -> STRING
286
+
atom -> STRING
286
!=
atom -> STRING
286
if
atom -> STRING
286
var
atom -> STRING
286
-
atom -> STRING
286
<=
atom -> STRING
286
NAME
atom -> STRING
286
>>
atom -> STRING
286
%
atom -> STRING
286
==
atom -> STRING
286
nextloop
atom -> STRING
286
<
atom -> STRING
286
loop
atom -> STRING
286
/
atom -> STRING
286
**
atom -> STRING
286
and
atom -> STRING
286
endloop
atom -> STRING
287
]
346
287
power
83
287
atom
84
287
shift_expr
85
287
-
86
287
test_list
347
287
NAME
88
287
NUMBER
89
287
False
90
287
term
91
287
arith_expr
92
287
xor_expr
93
287
factor
94
287
STRING
95
287
[
96
287
and_expr
97
287
+
98
287
call
99
287
True
100
287
comparison
101
287
not_test
102
287
not
103
287
None
104
287
expr
105
287
~
106
287
and_test
107
287
test
108
287
or_test
109
288
^
348
288
>
xor_expr -> and_expr
288
and
xor_expr -> and_expr
288
>=
xor_expr -> and_expr
288
return
xor_expr -> and_expr
288
DEDENT
xor_expr -> and_expr
288
endloop
xor_expr -> and_expr
288
==
xor_expr -> and_expr
288
|
xor_expr -> and_expr
288
NEWLINE
xor_expr -> and_expr
288
nextloop
xor_expr -> and_expr
288
if
xor_expr -> and_expr
288
<
xor_expr -> and_expr
288
loop
xor_expr -> and_expr
288
<=
xor_expr -> and_expr
288
NAME
xor_expr -> and_expr
288
var
xor_expr -> and_expr
288
!=
xor_expr -> and_expr
288
or
xor_expr -> and_expr
289
NAME
275
289
power
273
289
atom
274
289
[
287
289
NUMBER
285
289
STRING
286
289
-
278
289
~
294
289
True
280
289
False
281
289
None
291
289
+
289
289
call
290
289
factor
349
290
<<
atom -> call
290
return
atom -> call
290
^
atom -> call
290
DEDENT
atom -> call
290
var
atom -> call
290
NAME
atom -> call
290
-
atom -> call
290
>
atom -> call
290
==
atom -> call
290
<
atom -> call
290
%
atom -> call
290
+
atom -> call
290
>=
atom -> call
290
//
atom -> call
290
nextloop
atom -> call
290
<=
atom -> call
290
**
atom -> call
290
&
atom -> call
290
loop
atom -> call
290
>>
atom -> call
290
or
atom -> call
290
*
atom -> call
290
!=
atom -> call
290
/
atom -> call
290
endloop
atom -> call
290
NEWLINE
atom -> call
290
if
atom -> call
290
and
atom -> call
290
|
atom -> call
291
loop
atom -> None
291
|
atom -> None
291
-
atom -> None
291
NEWLINE
atom -> None
291
+
atom -> None
291
and
atom -> None
291
!=
atom -> None
291
or
atom -> None
291
&
atom -> None
291
>>
atom -> None
291
if
atom -> None
291
return
atom -> None
291
var
atom -> None
291
<=
atom -> None
291
>
atom -> None
291
<<
atom -> None
291
^
atom -> None
291
DEDENT
atom -> None
291
endloop
atom -> None
291
**
atom -> None
291
==
atom -> None
291
>=
atom -> None
291
nextloop
atom -> None
291
<
atom -> None
291
//
atom -> None
291
*
atom -> None
291
/
atom -> None
291
NAME
atom -> None
291
%
atom -> None
292
comp_op
350
292
==
112
292
<
113
292
>=
114
292
<=
115
292
!=
116
292
NAME
comparison -> expr
292
return
comparison -> expr
292
>
118
292
if
comparison -> expr
292
loop
comparison -> expr
292
nextloop
comparison -> expr
292
or
comparison -> expr
292
var
comparison -> expr
292
NEWLINE
comparison -> expr
292
endloop
comparison -> expr
292
DEDENT
comparison -> expr
292
and
comparison -> expr
293
power
273
293
atom
274
293
NAME
275
293
shift_expr
276
293
term
277
293
-
278
293
xor_expr
279
293
True
280
293
False
281
293
not_test
351
293
arith_expr
282
293
NUMBER
285
293
factor
284
293
STRING
286
293
[
287
293
and_expr
288
293
+
289
293
call
290
293
None
291
293
expr
292
293
not
293
293
~
294
293
comparison
297
294
factor
352
294
NAME
275
294
power
273
294
atom
274
294
[
287
294
NUMBER
285
294
STRING
286
294
-
278
294
~
294
294
True
280
294
False
281
294
None
291
294
+
289
294
call
290
295
and
353
295
endloop
and_test -> not_test
295
NEWLINE
and_test -> not_test
295
return
and_test -> not_test
295
var
and_test -> not_test
295
or
and_test -> not_test
295
loop
and_test -> not_test
295
nextloop
and_test -> not_test
295
if
and_test -> not_test
295
DEDENT
and_test -> not_test
295
NAME
and_test -> not_test
296
DEDENT
return_stmt -> return test
296
nextloop
return_stmt -> return test
296
loop
return_stmt -> return test
296
if
return_stmt -> return test
296
var
return_stmt -> return test
296
endloop
return_stmt -> return test
296
NAME
return_stmt -> return test
296
NEWLINE
return_stmt -> return test
296
return
return_stmt -> return test
297
DEDENT
not_test -> comparison
297
NEWLINE
not_test -> comparison
297
and
not_test -> comparison
297
if
not_test -> comparison
297
or
not_test -> comparison
297
nextloop
not_test -> comparison
297
endloop
not_test -> comparison
297
var
not_test -> comparison
297
loop
not_test -> comparison
297
NAME
not_test -> comparison
297
return
not_test -> comparison
298
if
test -> or_test
298
NAME
test -> or_test
298
endloop
test -> or_test
298
return
test -> or_test
298
loop
test -> or_test
298
DEDENT
test -> or_test
298
var
test -> or_test
298
nextloop
test -> or_test
298
NEWLINE
test -> or_test
299
power
273
299
atom
274
299
NAME
275
299
shift_expr
276
299
term
277
299
-
278
299
xor_expr
279
299
True
280
299
False
281
299
arith_expr
282
299
and_test
283
299
factor
284
299
NUMBER
285
299
STRING
286
299
[
287
299
and_expr
288
299
+
289
299
call
290
299
None
291
299
expr
292
299
not
293
299
~
294
299
not_test
295
299
comparison
297
299
test
354
299
or_test
298
300
DEDENT
stmt_list -> NEWLINE stmt_list
301
:
355
301
from
356
302
suite
357
302
NEWLINE
358
303
=
359
304
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
304
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
304
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
305
and
atom -> NAME
305
(
360
305
**
atom -> NAME
305
+
atom -> NAME
305
or
atom -> NAME
305
:
atom -> NAME
305
>>
atom -> NAME
305
>=
atom -> NAME
305
%
atom -> NAME
305
==
atom -> NAME
305
*
atom -> NAME
305
!=
atom -> NAME
305
|
atom -> NAME
305
-
atom -> NAME
305
>
atom -> NAME
305
^
atom -> NAME
305
<<
atom -> NAME
305
<
atom -> NAME
305
<=
atom -> NAME
305
/
atom -> NAME
305
&
atom -> NAME
305
//
atom -> NAME
306
>>
361
306
<<
362
306
and
shift_expr -> arith_expr
306
<=
shift_expr -> arith_expr
306
|
shift_expr -> arith_expr
306
>=
shift_expr -> arith_expr
306
>
shift_expr -> arith_expr
306
or
shift_expr -> arith_expr
306
<
shift_expr -> arith_expr
306
!=
shift_expr -> arith_expr
306
==
shift_expr -> arith_expr
306
&
shift_expr -> arith_expr
306
:
shift_expr -> arith_expr
306
^
shift_expr -> arith_expr
307
<=
factor -> power
307
>=
factor -> power
307
:
factor -> power
307
or
factor -> power
307
==
factor -> power
307
<
factor -> power
307
^
factor -> power
307
*
factor -> power
307
<<
factor -> power
307
//
factor -> power
307
|
factor -> power
307
/
factor -> power
307
>
factor -> power
307
+
factor -> power
307
and
factor -> power
307
!=
factor -> power
307
-
factor -> power
307
>>
factor -> power
307
%
factor -> power
307
&
factor -> power
308
>>
power -> atom
308
:
power -> atom
308
**
363
308
<=
power -> atom
308
|
power -> atom
308
!=
power -> atom
308
<<
power -> atom
308
>=
power -> atom
308
and
power -> atom
308
+
power -> atom
308
-
power -> atom
308
%
power -> atom
308
<
power -> atom
308
/
power -> atom
308
or
power -> atom
308
*
power -> atom
308
^
power -> atom
308
>
power -> atom
308
//
power -> atom
308
==
power -> atom
308
&
power -> atom
309
]
364
309
power
83
309
atom
84
309
shift_expr
85
309
-
86
309
test_list
365
309
NAME
88
309
NUMBER
89
309
False
90
309
term
91
309
arith_expr
92
309
xor_expr
93
309
factor
94
309
STRING
95
309
[
96
309
and_expr
97
309
+
98
309
call
99
309
True
100
309
comparison
101
309
not_test
102
309
not
103
309
None
104
309
expr
105
309
~
106
309
and_test
107
309
test
108
309
or_test
109
310
//
366
310
%
367
310
==
term -> factor
310
/
368
310
*
369
310
^
term -> factor
310
>
term -> factor
310
or
term -> factor
310
:
term -> factor
310
&
term -> factor
310
<<
term -> factor
310
-
term -> factor
310
<
term -> factor
310
>>
term -> factor
310
|
term -> factor
310
and
term -> factor
310
!=
term -> factor
310
>=
term -> factor
310
<=
term -> factor
310
+
term -> factor
311
^
atom -> NUMBER
311
|
atom -> NUMBER
311
<=
atom -> NUMBER
311
%
atom -> NUMBER
311
&
atom -> NUMBER
311
==
atom -> NUMBER
311
**
atom -> NUMBER
311
>>
atom -> NUMBER
311
:
atom -> NUMBER
311
+
atom -> NUMBER
311
or
atom -> NUMBER
311
/
atom -> NUMBER
311
>=
atom -> NUMBER
311
!=
atom -> NUMBER
311
-
atom -> NUMBER
311
>
atom -> NUMBER
311
<
atom -> NUMBER
311
<<
atom -> NUMBER
311
*
atom -> NUMBER
311
//
atom -> NUMBER
311
and
atom -> NUMBER
312
>=
atom -> STRING
312
|
atom -> STRING
312
^
atom -> STRING
312
or
atom -> STRING
312
<<
atom -> STRING
312
*
atom -> STRING
312
//
atom -> STRING
312
>
atom -> STRING
312
&
atom -> STRING
312
+
atom -> STRING
312
!=
atom -> STRING
312
-
atom -> STRING
312
<=
atom -> STRING
312
>>
atom -> STRING
312
%
atom -> STRING
312
==
atom -> STRING
312
<
atom -> STRING
312
/
atom -> STRING
312
:
atom -> STRING
312
**
atom -> STRING
312
and
atom -> STRING
313
:
test -> or_test
314
&
370
314
|
and_expr -> shift_expr
314
:
and_expr -> shift_expr
314
^
and_expr -> shift_expr
314
<
and_expr -> shift_expr
314
<=
and_expr -> shift_expr
314
or
and_expr -> shift_expr
314
>=
and_expr -> shift_expr
314
==
and_expr -> shift_expr
314
and
and_expr -> shift_expr
314
!=
and_expr -> shift_expr
314
>
and_expr -> shift_expr
315
NAME
305
315
power
307
315
atom
308
315
[
309
315
NUMBER
311
315
STRING
312
315
~
316
315
-
315
315
True
317
315
False
318
315
None
320
315
+
322
315
factor
371
315
call
324
316
NAME
305
316
power
307
316
atom
308
316
[
309
316
NUMBER
311
316
STRING
312
316
factor
372
316
-
315
316
~
316
316
True
317
316
False
318
316
None
320
316
+
322
316
call
324
317
<
atom -> True
317
%
atom -> True
317
or
atom -> True
317
>=
atom -> True
317
<<
atom -> True
317
//
atom -> True
317
>>
atom -> True
317
|
atom -> True
317
and
atom -> True
317
*
atom -> True
317
>
atom -> True
317
!=
atom -> True
317
==
atom -> True
317
+
atom -> True
317
<=
atom -> True
317
^
atom -> True
317
:
atom -> True
317
**
atom -> True
317
-
atom -> True
317
/
atom -> True
317
&
atom -> True
318
>
atom -> False
318
<
atom -> False
318
//
atom -> False
318
-
atom -> False
318
+
atom -> False
318
|
atom -> False
318
and
atom -> False
318
:
atom -> False
318
>>
atom -> False
318
<<
atom -> False
318
**
atom -> False
318
==
atom -> False
318
>=
atom -> False
318
<=
atom -> False
318
!=
atom -> False
318
&
atom -> False
318
or
atom -> False
318
/
atom -> False
318
%
atom -> False
318
*
atom -> False
318
^
atom -> False
319
+
373
319
==
arith_expr -> term
319
:
arith_expr -> term
319
or
arith_expr -> term
319
>>
arith_expr -> term
319
<<
arith_expr -> term
319
-
374
319
|
arith_expr -> term
319
<
arith_expr -> term
319
!=
arith_expr -> term
319
and
arith_expr -> term
319
&
arith_expr -> term
319
>
arith_expr -> term
319
<=
arith_expr -> term
319
^
arith_expr -> term
319
>=
arith_expr -> term
320
|
atom -> None
320
-
atom -> None
320
+
atom -> None
320
and
atom -> None
320
!=
atom -> None
320
or
atom -> None
320
&
atom -> None
320
>>
atom -> None
320
<=
atom -> None
320
>
atom -> None
320
<<
atom -> None
320
^
atom -> None
320
**
atom -> None
320
:
atom -> None
320
==
atom -> None
320
>=
atom -> None
320
<
atom -> None
320
//
atom -> None
320
*
atom -> None
320
/
atom -> None
320
%
atom -> None
321
>=
expr -> xor_expr
321
<
expr -> xor_expr
321
!=
expr -> xor_expr
321
|
375
321
and
expr -> xor_expr
321
==
expr -> xor_expr
321
<=
expr -> xor_expr
321
>
expr -> xor_expr
321
:
expr -> xor_expr
321
or
expr -> xor_expr
322
NAME
305
322
power
307
322
atom
308
322
[
309
322
NUMBER
311
322
STRING
312
322
-
315
322
~
316
322
True
317
322
False
318
322
None
320
322
+
322
322
call
324
322
factor
376
323
>
xor_expr -> and_expr
323
and
xor_expr -> and_expr
323
^
377
323
>=
xor_expr -> and_expr
323
==
xor_expr -> and_expr
323
|
xor_expr -> and_expr
323
<
xor_expr -> and_expr
323
<=
xor_expr -> and_expr
323
:
xor_expr -> and_expr
323
!=
xor_expr -> and_expr
323
or
xor_expr -> and_expr
324
<<
atom -> call
324
^
atom -> call
324
-
atom -> call
324
>
atom -> call
324
==
atom -> call
324
<
atom -> call
324
%
atom -> call
324
+
atom -> call
324
>=
atom -> call
324
//
atom -> call
324
<=
atom -> call
324
**
atom -> call
324
&
atom -> call
324
>>
atom -> call
324
*
atom -> call
324
or
atom -> call
324
!=
atom -> call
324
/
atom -> call
324
:
atom -> call
324
and
atom -> call
324
|
atom -> call
325
:
378
326
:
or_test -> and_test
326
or
379
327
:
not_test -> comparison
327
and
not_test -> comparison
327
or
not_test -> comparison
328
:
and_test -> not_test
328
and
380
328
or
and_test -> not_test
329
==
112
329
<
113
329
>=
114
329
<=
115
329
comp_op
381
329
!=
116
329
>
118
329
or
comparison -> expr
329
:
comparison -> expr
329
and
comparison -> expr
330
NAME
305
330
arith_expr
306
330
power
307
330
atom
308
330
[
309
330
factor
310
330
NUMBER
311
330
STRING
312
330
shift_expr
314
330
-
315
330
~
316
330
True
317
330
False
318
330
term
319
330
None
320
330
xor_expr
321
330
+
322
330
and_expr
323
330
call
324
330
comparison
327
330
expr
329
330
not
330
330
not_test
382
331
DEDENT
stmt_list -> stmt stmt_list
332
NAME
275
332
power
273
332
atom
274
332
[
287
332
NUMBER
285
332
STRING
286
332
~
294
332
-
278
332
True
280
332
False
281
332
None
291
332
+
289
332
factor
383
332
call
290
333
)
384
333
power
125
333
~
126
333
atom
127
333
None
128
333
shift_expr
129
333
-
130
333
NAME
131
333
NUMBER
132
333
False
133
333
term
134
333
arith_expr
135
333
xor_expr
136
333
factor
137
333
STRING
138
333
test_list
385
333
[
140
333
and_expr
141
333
+
142
333
call
143
333
not
144
333
True
145
333
comparison
146
333
and_test
147
333
not_test
148
333
expr
149
333
test
150
333
or_test
151
334
power
273
334
atom
274
334
NAME
275
334
shift_expr
276
334
term
277
334
-
278
334
True
280
334
False
281
334
arith_expr
282
334
NUMBER
285
334
factor
284
334
STRING
286
334
[
287
334
+
289
334
call
290
334
None
291
334
~
294
334
and_expr
386
335
power
273
335
atom
274
335
NAME
275
335
term
277
335
-
278
335
True
280
335
False
281
335
NUMBER
285
335
factor
284
335
STRING
286
335
[
287
335
+
289
335
call
290
335
None
291
335
arith_expr
387
335
~
294
336
power
273
336
atom
274
336
NAME
275
336
term
277
336
-
278
336
True
280
336
False
281
336
NUMBER
285
336
factor
284
336
STRING
286
336
[
287
336
+
289
336
call
290
336
None
291
336
~
294
336
arith_expr
388
337
<=
factor -> - factor
337
//
factor -> - factor
337
>>
factor -> - factor
337
or
factor -> - factor
337
+
factor -> - factor
337
var
factor -> - factor
337
^
factor -> - factor
337
nextloop
factor -> - factor
337
if
factor -> - factor
337
NEWLINE
factor -> - factor
337
DEDENT
factor -> - factor
337
return
factor -> - factor
337
-
factor -> - factor
337
and
factor -> - factor
337
%
factor -> - factor
337
>=
factor -> - factor
337
!=
factor -> - factor
337
<
factor -> - factor
337
|
factor -> - factor
337
NAME
factor -> - factor
337
*
factor -> - factor
337
endloop
factor -> - factor
337
loop
factor -> - factor
337
==
factor -> - factor
337
/
factor -> - factor
337
>
factor -> - factor
337
&
factor -> - factor
337
<<
factor -> - factor
338
power
273
338
atom
274
338
NAME
275
338
shift_expr
276
338
term
277
338
-
278
338
xor_expr
279
338
True
280
338
False
281
338
arith_expr
282
338
NUMBER
285
338
factor
284
338
STRING
286
338
[
287
338
and_expr
288
338
+
289
338
call
290
338
None
291
338
~
294
338
expr
389
339
power
273
339
atom
274
339
NAME
275
339
shift_expr
390
339
term
277
339
-
278
339
True
280
339
False
281
339
arith_expr
282
339
NUMBER
285
339
factor
284
339
STRING
286
339
[
287
339
+
289
339
call
290
339
None
291
339
~
294
340
power
273
340
atom
274
340
NAME
275
340
shift_expr
391
340
term
277
340
-
278
340
True
280
340
False
281
340
arith_expr
282
340
NUMBER
285
340
factor
284
340
STRING
286
340
+
289
340
[
287
340
call
290
340
None
291
340
~
294
341
power
273
341
atom
274
341
NAME
275
341
shift_expr
276
341
term
277
341
-
278
341
xor_expr
279
341
True
280
341
False
281
341
arith_expr
282
341
and_test
283
341
factor
284
341
NUMBER
285
341
STRING
286
341
[
287
341
and_expr
288
341
+
289
341
call
290
341
None
291
341
expr
292
341
not
293
341
~
294
341
not_test
295
341
comparison
297
341
or_test
392
342
power
273
342
atom
274
342
NAME
275
342
-
278
342
True
280
342
False
281
342
term
393
342
NUMBER
285
342
factor
284
342
STRING
286
342
[
287
342
+
289
342
call
290
342
None
291
342
~
294
343
power
273
343
atom
274
343
NAME
275
343
-
278
343
True
280
343
False
281
343
NUMBER
285
343
factor
284
343
STRING
286
343
[
287
343
+
289
343
call
290
343
term
394
343
None
291
343
~
294
344
power
273
344
atom
274
344
NAME
275
344
-
278
344
True
280
344
False
281
344
term
395
344
NUMBER
285
344
factor
284
344
STRING
286
344
[
287
344
+
289
344
call
290
344
None
291
344
~
294
345
power
273
345
atom
274
345
NAME
275
345
-
278
345
True
280
345
False
281
345
NUMBER
285
345
factor
284
345
STRING
286
345
[
287
345
+
289
345
term
396
345
call
290
345
None
291
345
~
294
346
>
atom -> [ ]
346
<<
atom -> [ ]
346
var
atom -> [ ]
346
-
atom -> [ ]
346
**
atom -> [ ]
346
/
atom -> [ ]
346
//
atom -> [ ]
346
^
atom -> [ ]
346
&
atom -> [ ]
346
or
atom -> [ ]
346
+
atom -> [ ]
346
return
atom -> [ ]
346
!=
atom -> [ ]
346
NAME
atom -> [ ]
346
endloop
atom -> [ ]
346
DEDENT
atom -> [ ]
346
nextloop
atom -> [ ]
346
<=
atom -> [ ]
346
NEWLINE
atom -> [ ]
346
>>
atom -> [ ]
346
and
atom -> [ ]
346
|
atom -> [ ]
346
>=
atom -> [ ]
346
==
atom -> [ ]
346
*
atom -> [ ]
346
if
atom -> [ ]
346
%
atom -> [ ]
346
loop
atom -> [ ]
346
<
atom -> [ ]
347
]
397
348
power
273
348
atom
274
348
NAME
275
348
shift_expr
276
348
term
277
348
-
278
348
True
280
348
False
281
348
arith_expr
282
348
NUMBER
285
348
factor
284
348
STRING
286
348
[
287
348
and_expr
288
348
+
289
348
call
290
348
None
291
348
~
294
348
xor_expr
398
349
+
factor -> + factor
349
<<
factor -> + factor
349
<=
factor -> + factor
349
<
factor -> + factor
349
//
factor -> + factor
349
DEDENT
factor -> + factor
349
NAME
factor -> + factor
349
NEWLINE
factor -> + factor
349
>
factor -> + factor
349
*
factor -> + factor
349
!=
factor -> + factor
349
if
factor -> + factor
349
return
factor -> + factor
349
nextloop
factor -> + factor
349
%
factor -> + factor
349
>=
factor -> + factor
349
/
factor -> + factor
349
>>
factor -> + factor
349
or
factor -> + factor
349
&
factor -> + factor
349
^
factor -> + factor
349
==
factor -> + factor
349
and
factor -> + factor
349
loop
factor -> + factor
349
|
factor -> + factor
349
var
factor -> + factor
349
-
factor -> + factor
349
endloop
factor -> + factor
350
power
273
350
atom
274
350
NAME
275
350
shift_expr
276
350
term
277
350
-
278
350
xor_expr
279
350
True
280
350
False
281
350
arith_expr
282
350
comparison
399
350
NUMBER
285
350
factor
284
350
STRING
286
350
[
287
350
and_expr
288
350
+
289
350
call
290
350
None
291
350
expr
292
350
~
294
351
DEDENT
not_test -> not not_test
351
and
not_test -> not not_test
351
endloop
not_test -> not not_test
351
return
not_test -> not not_test
351
NAME
not_test -> not not_test
351
nextloop
not_test -> not not_test
351
if
not_test -> not not_test
351
loop
not_test -> not not_test
351
var
not_test -> not not_test
351
NEWLINE
not_test -> not not_test
351
or
not_test -> not not_test
352
>
factor -> ~ factor
352
%
factor -> ~ factor
352
<=
factor -> ~ factor
352
DEDENT
factor -> ~ factor
352
|
factor -> ~ factor
352
*
factor -> ~ factor
352
//
factor -> ~ factor
352
-
factor -> ~ factor
352
nextloop
factor -> ~ factor
352
<
factor -> ~ factor
352
loop
factor -> ~ factor
352
^
factor -> ~ factor
352
var
factor -> ~ factor
352
>>
factor -> ~ factor
352
!=
factor -> ~ factor
352
endloop
factor -> ~ factor
352
return
factor -> ~ factor
352
NAME
factor -> ~ factor
352
/
factor -> ~ factor
352
and
factor -> ~ factor
352
NEWLINE
factor -> ~ factor
352
>=
factor -> ~ factor
352
if
factor -> ~ factor
352
==
factor -> ~ factor
352
or
factor -> ~ factor
352
&
factor -> ~ factor
352
<<
factor -> ~ factor
352
+
factor -> ~ factor
353
power
273
353
atom
274
353
NAME
275
353
shift_expr
276
353
term
277
353
-
278
353
xor_expr
279
353
True
280
353
False
281
353
arith_expr
282
353
NUMBER
285
353
factor
284
353
STRING
286
353
and_test
400
353
[
287
353
and_expr
288
353
+
289
353
call
290
353
None
291
353
expr
292
353
not
293
353
~
294
353
not_test
295
353
comparison
297
354
if
assign_stmt -> NAME = test
354
nextloop
assign_stmt -> NAME = test
354
loop
assign_stmt -> NAME = test
354
NAME
assign_stmt -> NAME = test
354
endloop
assign_stmt -> NAME = test
354
DEDENT
assign_stmt -> NAME = test
354
var
assign_stmt -> NAME = test
354
NEWLINE
assign_stmt -> NAME = test
354
return
assign_stmt -> NAME = test
355
NEWLINE
358
355
suite
401
356
power
402
356
atom
403
356
shift_expr
404
356
-
405
356
NAME
406
356
test
407
356
False
408
356
term
409
356
arith_expr
410
356
xor_expr
411
356
NUMBER
412
356
factor
413
356
STRING
414
356
[
415
356
and_expr
416
356
+
417
356
call
418
356
True
419
356
and_test
420
356
comparison
421
356
None
422
356
not_test
423
356
not
424
356
expr
425
356
~
426
356
or_test
427
357
endloop
loop_stmt -> loop : suite
357
nextloop
loop_stmt -> loop : suite
357
var
loop_stmt -> loop : suite
357
loop
loop_stmt -> loop : suite
357
NAME
loop_stmt -> loop : suite
357
NEWLINE
loop_stmt -> loop : suite
357
DEDENT
loop_stmt -> loop : suite
357
if
loop_stmt -> loop : suite
357
return
loop_stmt -> loop : suite
358
INDENT
428
359
power
273
359
atom
274
359
NAME
275
359
shift_expr
276
359
term
277
359
-
278
359
xor_expr
279
359
True
280
359
False
281
359
arith_expr
282
359
and_test
283
359
factor
284
359
NUMBER
285
359
STRING
286
359
[
287
359
and_expr
288
359
+
289
359
call
290
359
None
291
359
expr
292
359
not
293
359
test
429
359
~
294
359
not_test
295
359
comparison
297
359
or_test
298
360
)
430
360
power
125
360
~
126
360
atom
127
360
None
128
360
shift_expr
129
360
-
130
360
NAME
131
360
NUMBER
132
360
False
133
360
term
134
360
arith_expr
135
360
xor_expr
136
360
factor
137
360
STRING
138
360
[
140
360
and_expr
141
360
+
142
360
call
143
360
test_list
431
360
not
144
360
True
145
360
comparison
146
360
and_test
147
360
not_test
148
360
expr
149
360
test
150
360
or_test
151
361
NAME
305
361
arith_expr
306
361
power
307
361
atom
308
361
[
309
361
factor
310
361
NUMBER
311
361
STRING
312
361
shift_expr
432
361
-
315
361
~
316
361
True
317
361
False
318
361
term
319
361
None
320
361
+
322
361
call
324
362
NAME
305
362
arith_expr
306
362
power
307
362
atom
308
362
[
309
362
factor
310
362
NUMBER
311
362
STRING
312
362
-
315
362
~
316
362
True
317
362
False
318
362
term
319
362
None
320
362
+
322
362
shift_expr
433
362
call
324
363
NAME
305
363
power
307
363
atom
308
363
[
309
363
NUMBER
311
363
STRING
312
363
~
316
363
-
315
363
True
317
363
False
318
363
None
320
363
+
322
363
call
324
363
factor
434
364
>
atom -> [ ]
364
<<
atom -> [ ]
364
**
atom -> [ ]
364
-
atom -> [ ]
364
/
atom -> [ ]
364
//
atom -> [ ]
364
^
atom -> [ ]
364
&
atom -> [ ]
364
or
atom -> [ ]
364
+
atom -> [ ]
364
:
atom -> [ ]
364
!=
atom -> [ ]
364
<=
atom -> [ ]
364
>>
atom -> [ ]
364
and
atom -> [ ]
364
|
atom -> [ ]
364
>=
atom -> [ ]
364
==
atom -> [ ]
364
*
atom -> [ ]
364
%
atom -> [ ]
364
<
atom -> [ ]
365
]
435
366
NAME
305
366
power
307
366
atom
308
366
[
309
366
factor
310
366
NUMBER
311
366
STRING
312
366
-
315
366
~
316
366
True
317
366
False
318
366
None
320
366
term
436
366
+
322
366
call
324
367
term
437
367
NAME
305
367
power
307
367
atom
308
367
[
309
367
factor
310
367
NUMBER
311
367
STRING
312
367
-
315
367
~
316
367
True
317
367
False
318
367
None
320
367
+
322
367
call
324
368
NAME
305
368
power
307
368
atom
308
368
[
309
368
factor
310
368
NUMBER
311
368
STRING
312
368
-
315
368
~
316
368
True
317
368
False
318
368
None
320
368
+
322
368
call
324
368
term
438
369
NAME
305
369
power
307
369
atom
308
369
[
309
369
factor
310
369
NUMBER
311
369
STRING
312
369
-
315
369
~
316
369
True
317
369
False
318
369
None
320
369
+
322
369
term
439
369
call
324
370
NAME
305
370
arith_expr
306
370
power
307
370
atom
308
370
[
309
370
factor
310
370
NUMBER
311
370
STRING
312
370
shift_expr
314
370
-
315
370
~
316
370
True
317
370
False
318
370
term
319
370
None
320
370
+
322
370
call
324
370
and_expr
440
371
<=
factor -> - factor
371
//
factor -> - factor
371
>>
factor -> - factor
371
or
factor -> - factor
371
+
factor -> - factor
371
^
factor -> - factor
371
-
factor -> - factor
371
and
factor -> - factor
371
%
factor -> - factor
371
>=
factor -> - factor
371
!=
factor -> - factor
371
<
factor -> - factor
371
|
factor -> - factor
371
:
factor -> - factor
371
*
factor -> - factor
371
==
factor -> - factor
371
/
factor -> - factor
371
>
factor -> - factor
371
&
factor -> - factor
371
<<
factor -> - factor
372
>
factor -> ~ factor
372
%
factor -> ~ factor
372
<=
factor -> ~ factor
372
|
factor -> ~ factor
372
*
factor -> ~ factor
372
//
factor -> ~ factor
372
-
factor -> ~ factor
372
<
factor -> ~ factor
372
^
factor -> ~ factor
372
:
factor -> ~ factor
372
>>
factor -> ~ factor
372
!=
factor -> ~ factor
372
/
factor -> ~ factor
372
and
factor -> ~ factor
372
>=
factor -> ~ factor
372
==
factor -> ~ factor
372
or
factor -> ~ factor
372
&
factor -> ~ factor
372
<<
factor -> ~ factor
372
+
factor -> ~ factor
373
NAME
305
373
power
307
373
atom
308
373
[
309
373
factor
310
373
NUMBER
311
373
STRING
312
373
-
315
373
~
316
373
True
317
373
False
318
373
term
319
373
None
320
373
arith_expr
441
373
+
322
373
call
324
374
NAME
305
374
power
307
374
atom
308
374
[
309
374
factor
310
374
NUMBER
311
374
STRING
312
374
-
315
374
~
316
374
True
317
374
False
318
374
term
319
374
None
320
374
+
322
374
call
324
374
arith_expr
442
375
NAME
305
375
arith_expr
306
375
power
307
375
atom
308
375
[
309
375
factor
310
375
NUMBER
311
375
STRING
312
375
shift_expr
314
375
-
315
375
~
316
375
True
317
375
False
318
375
term
319
375
None
320
375
xor_expr
321
375
+
322
375
and_expr
323
375
call
324
375
expr
443
376
+
factor -> + factor
376
:
factor -> + factor
376
<<
factor -> + factor
376
<=
factor -> + factor
376
<
factor -> + factor
376
//
factor -> + factor
376
>
factor -> + factor
376
*
factor -> + factor
376
%
factor -> + factor
376
>=
factor -> + factor
376
/
factor -> + factor
376
-
factor -> + factor
376
>>
factor -> + factor
376
or
factor -> + factor
376
&
factor -> + factor
376
^
factor -> + factor
376
==
factor -> + factor
376
and
factor -> + factor
376
|
factor -> + factor
376
!=
factor -> + factor
377
NAME
305
377
arith_expr
306
377
power
307
377
atom
308
377
[
309
377
factor
310
377
NUMBER
311
377
STRING
312
377
shift_expr
314
377
-
315
377
~
316
377
True
317
377
False
318
377
term
319
377
None
320
377
+
322
377
and_expr
323
377
call
324
377
xor_expr
444
378
NEWLINE
445
378
suite
446
379
NAME
305
379
arith_expr
306
379
power
307
379
atom
308
379
[
309
379
factor
310
379
NUMBER
311
379
STRING
312
379
shift_expr
314
379
-
315
379
~
316
379
True
317
379
False
318
379
term
319
379
None
320
379
xor_expr
321
379
+
322
379
and_expr
323
379
call
324
379
or_test
447
379
and_test
326
379
comparison
327
379
not_test
328
379
expr
329
379
not
330
380
NAME
305
380
arith_expr
306
380
power
307
380
atom
308
380
[
309
380
factor
310
380
NUMBER
311
380
STRING
312
380
shift_expr
314
380
-
315
380
~
316
380
True
317
380
False
318
380
term
319
380
None
320
380
xor_expr
321
380
+
322
380
and_expr
323
380
call
324
380
and_test
448
380
comparison
327
380
not_test
328
380
expr
329
380
not
330
381
NAME
305
381
arith_expr
306
381
power
307
381
atom
308
381
[
309
381
factor
310
381
NUMBER
311
381
STRING
312
381
shift_expr
314
381
-
315
381
~
316
381
True
317
381
False
318
381
term
319
381
None
320
381
comparison
449
381
xor_expr
321
381
+
322
381
and_expr
323
381
call
324
381
expr
329
382
and
not_test -> not not_test
382
:
not_test -> not not_test
382
or
not_test -> not not_test
383
%
power -> atom ** factor
383
>=
power -> atom ** factor
383
==
power -> atom ** factor
383
var
power -> atom ** factor
383
<
power -> atom ** factor
383
loop
power -> atom ** factor
383
/
power -> atom ** factor
383
-
power -> atom ** factor
383
if
power -> atom ** factor
383
>
power -> atom ** factor
383
or
power -> atom ** factor
383
<<
power -> atom ** factor
383
DEDENT
power -> atom ** factor
383
//
power -> atom ** factor
383
NAME
power -> atom ** factor
383
nextloop
power -> atom ** factor
383
&
power -> atom ** factor
383
|
power -> atom ** factor
383
return
power -> atom ** factor
383
<=
power -> atom ** factor
383
>>
power -> atom ** factor
383
endloop
power -> atom ** factor
383
^
power -> atom ** factor
383
+
power -> atom ** factor
383
*
power -> atom ** factor
383
NEWLINE
power -> atom ** factor
383
and
power -> atom ** factor
383
!=
power -> atom ** factor
384
>
call -> NAME ( )
384
var
call -> NAME ( )
384
%
call -> NAME ( )
384
return
call -> NAME ( )
384
endloop
call -> NAME ( )
384
NAME
call -> NAME ( )
384
if
call -> NAME ( )
384
NEWLINE
call -> NAME ( )
384
<=
call -> NAME ( )
384
&
call -> NAME ( )
384
*
call -> NAME ( )
384
and
call -> NAME ( )
384
//
call -> NAME ( )
384
nextloop
call -> NAME ( )
384
DEDENT
call -> NAME ( )
384
==
call -> NAME ( )
384
**
call -> NAME ( )
384
/
call -> NAME ( )
384
or
call -> NAME ( )
384
<<
call -> NAME ( )
384
>=
call -> NAME ( )
384
^
call -> NAME ( )
384
<
call -> NAME ( )
384
!=
call -> NAME ( )
384
>>
call -> NAME ( )
384
loop
call -> NAME ( )
384
-
call -> NAME ( )
384
+
call -> NAME ( )
384
|
call -> NAME ( )
385
)
450
386
return
and_expr -> shift_expr & and_expr
386
|
and_expr -> shift_expr & and_expr
386
>
and_expr -> shift_expr & and_expr
386
NAME
and_expr -> shift_expr & and_expr
386
loop
and_expr -> shift_expr & and_expr
386
>=
and_expr -> shift_expr & and_expr
386
<=
and_expr -> shift_expr & and_expr
386
and
and_expr -> shift_expr & and_expr
386
nextloop
and_expr -> shift_expr & and_expr
386
!=
and_expr -> shift_expr & and_expr
386
^
and_expr -> shift_expr & and_expr
386
or
and_expr -> shift_expr & and_expr
386
var
and_expr -> shift_expr & and_expr
386
endloop
and_expr -> shift_expr & and_expr
386
<
and_expr -> shift_expr & and_expr
386
if
and_expr -> shift_expr & and_expr
386
DEDENT
and_expr -> shift_expr & and_expr
386
NEWLINE
and_expr -> shift_expr & and_expr
386
==
and_expr -> shift_expr & and_expr
387
>
arith_expr -> term + arith_expr
387
&
arith_expr -> term + arith_expr
387
<<
arith_expr -> term + arith_expr
387
return
arith_expr -> term + arith_expr
387
^
arith_expr -> term + arith_expr
387
>>
arith_expr -> term + arith_expr
387
nextloop
arith_expr -> term + arith_expr
387
<
arith_expr -> term + arith_expr
387
var
arith_expr -> term + arith_expr
387
NEWLINE
arith_expr -> term + arith_expr
387
loop
arith_expr -> term + arith_expr
387
<=
arith_expr -> term + arith_expr
387
if
arith_expr -> term + arith_expr
387
==
arith_expr -> term + arith_expr
387
!=
arith_expr -> term + arith_expr
387
endloop
arith_expr -> term + arith_expr
387
|
arith_expr -> term + arith_expr
387
and
arith_expr -> term + arith_expr
387
>=
arith_expr -> term + arith_expr
387
DEDENT
arith_expr -> term + arith_expr
387
or
arith_expr -> term + arith_expr
387
NAME
arith_expr -> term + arith_expr
388
<
arith_expr -> term - arith_expr
388
endloop
arith_expr -> term - arith_expr
388
NEWLINE
arith_expr -> term - arith_expr
388
|
arith_expr -> term - arith_expr
388
and
arith_expr -> term - arith_expr
388
>
arith_expr -> term - arith_expr
388
<=
arith_expr -> term - arith_expr
388
or
arith_expr -> term - arith_expr
388
<<
arith_expr -> term - arith_expr
388
nextloop
arith_expr -> term - arith_expr
388
^
arith_expr -> term - arith_expr
388
==
arith_expr -> term - arith_expr
388
>>
arith_expr -> term - arith_expr
388
loop
arith_expr -> term - arith_expr
388
NAME
arith_expr -> term - arith_expr
388
if
arith_expr -> term - arith_expr
388
!=
arith_expr -> term - arith_expr
388
return
arith_expr -> term - arith_expr
388
DEDENT
arith_expr -> term - arith_expr
388
>=
arith_expr -> term - arith_expr
388
&
arith_expr -> term - arith_expr
388
var
arith_expr -> term - arith_expr
389
==
expr -> xor_expr | expr
389
or
expr -> xor_expr | expr
389
NAME
expr -> xor_expr | expr
389
NEWLINE
expr -> xor_expr | expr
389
and
expr -> xor_expr | expr
389
var
expr -> xor_expr | expr
389
return
expr -> xor_expr | expr
389
!=
expr -> xor_expr | expr
389
>
expr -> xor_expr | expr
389
DEDENT
expr -> xor_expr | expr
389
<
expr -> xor_expr | expr
389
endloop
expr -> xor_expr | expr
389
>=
expr -> xor_expr | expr
389
if
expr -> xor_expr | expr
389
loop
expr -> xor_expr | expr
389
<=
expr -> xor_expr | expr
389
nextloop
expr -> xor_expr | expr
390
NAME
shift_expr -> arith_expr >> shift_expr
390
or
shift_expr -> arith_expr >> shift_expr
390
loop
shift_expr -> arith_expr >> shift_expr
390
!=
shift_expr -> arith_expr >> shift_expr
390
<
shift_expr -> arith_expr >> shift_expr
390
&
shift_expr -> arith_expr >> shift_expr
390
|
shift_expr -> arith_expr >> shift_expr
390
endloop
shift_expr -> arith_expr >> shift_expr
390
NEWLINE
shift_expr -> arith_expr >> shift_expr
390
>
shift_expr -> arith_expr >> shift_expr
390
return
shift_expr -> arith_expr >> shift_expr
390
if
shift_expr -> arith_expr >> shift_expr
390
and
shift_expr -> arith_expr >> shift_expr
390
==
shift_expr -> arith_expr >> shift_expr
390
^
shift_expr -> arith_expr >> shift_expr
390
DEDENT
shift_expr -> arith_expr >> shift_expr
390
nextloop
shift_expr -> arith_expr >> shift_expr
390
<=
shift_expr -> arith_expr >> shift_expr
390
>=
shift_expr -> arith_expr >> shift_expr
390
var
shift_expr -> arith_expr >> shift_expr
391
nextloop
shift_expr -> arith_expr << shift_expr
391
DEDENT
shift_expr -> arith_expr << shift_expr
391
<
shift_expr -> arith_expr << shift_expr
391
<=
shift_expr -> arith_expr << shift_expr
391
or
shift_expr -> arith_expr << shift_expr
391
>
shift_expr -> arith_expr << shift_expr
391
return
shift_expr -> arith_expr << shift_expr
391
>=
shift_expr -> arith_expr << shift_expr
391
NAME
shift_expr -> arith_expr << shift_expr
391
|
shift_expr -> arith_expr << shift_expr
391
&
shift_expr -> arith_expr << shift_expr
391
var
shift_expr -> arith_expr << shift_expr
391
and
shift_expr -> arith_expr << shift_expr
391
loop
shift_expr -> arith_expr << shift_expr
391
==
shift_expr -> arith_expr << shift_expr
391
if
shift_expr -> arith_expr << shift_expr
391
!=
shift_expr -> arith_expr << shift_expr
391
endloop
shift_expr -> arith_expr << shift_expr
391
^
shift_expr -> arith_expr << shift_expr
391
NEWLINE
shift_expr -> arith_expr << shift_expr
392
nextloop
or_test -> and_test or or_test
392
var
or_test -> and_test or or_test
392
if
or_test -> and_test or or_test
392
return
or_test -> and_test or or_test
392
NAME
or_test -> and_test or or_test
392
NEWLINE
or_test -> and_test or or_test
392
loop
or_test -> and_test or or_test
392
endloop
or_test -> and_test or or_test
392
DEDENT
or_test -> and_test or or_test
393
^
term -> factor // term
393
>=
term -> factor // term
393
<<
term -> factor // term
393
if
term -> factor // term
393
NAME
term -> factor // term
393
==
term -> factor // term
393
+
term -> factor // term
393
and
term -> factor // term
393
>>
term -> factor // term
393
loop
term -> factor // term
393
!=
term -> factor // term
393
<=
term -> factor // term
393
|
term -> factor // term
393
DEDENT
term -> factor // term
393
endloop
term -> factor // term
393
&
term -> factor // term
393
var
term -> factor // term
393
-
term -> factor // term
393
>
term -> factor // term
393
<
term -> factor // term
393
nextloop
term -> factor // term
393
NEWLINE
term -> factor // term
393
or
term -> factor // term
393
return
term -> factor // term
394
nextloop
term -> factor * term
394
loop
term -> factor * term
394
DEDENT
term -> factor * term
394
return
term -> factor * term
394
NEWLINE
term -> factor * term
394
<=
term -> factor * term
394
>=
term -> factor * term
394
^
term -> factor * term
394
|
term -> factor * term
394
NAME
term -> factor * term
394
endloop
term -> factor * term
394
<<
term -> factor * term
394
if
term -> factor * term
394
<
term -> factor * term
394
or
term -> factor * term
394
>>
term -> factor * term
394
==
term -> factor * term
394
-
term -> factor * term
394
>
term -> factor * term
394
var
term -> factor * term
394
and
term -> factor * term
394
!=
term -> factor * term
394
+
term -> factor * term
394
&
term -> factor * term
395
<
term -> factor % term
395
DEDENT
term -> factor % term
395
nextloop
term -> factor % term
395
endloop
term -> factor % term
395
-
term -> factor % term
395
^
term -> factor % term
395
>
term -> factor % term
395
<<
term -> factor % term
395
or
term -> factor % term
395
NEWLINE
term -> factor % term
395
if
term -> factor % term
395
+
term -> factor % term
395
|
term -> factor % term
395
==
term -> factor % term
395
return
term -> factor % term
395
>>
term -> factor % term
395
&
term -> factor % term
395
>=
term -> factor % term
395
loop
term -> factor % term
395
var
term -> factor % term
395
!=
term -> factor % term
395
NAME
term -> factor % term
395
<=
term -> factor % term
395
and
term -> factor % term
396
DEDENT
term -> factor / term
396
<=
term -> factor / term
396
|
term -> factor / term
396
<<
term -> factor / term
396
!=
term -> factor / term
396
>>
term -> factor / term
396
==
term -> factor / term
396
return
term -> factor / term
396
loop
term -> factor / term
396
>
term -> factor / term
396
NEWLINE
term -> factor / term
396
var
term -> factor / term
396
+
term -> factor / term
396
^
term -> factor / term
396
endloop
term -> factor / term
396
-
term -> factor / term
396
&
term -> factor / term
396
>=
term -> factor / term
396
nextloop
term -> factor / term
396
or
term -> factor / term
396
if
term -> factor / term
396
and
term -> factor / term
396
NAME
term -> factor / term
396
<
term -> factor / term
397
**
atom -> [ test_list ]
397
>
atom -> [ test_list ]
397
>=
atom -> [ test_list ]
397
&
atom -> [ test_list ]
397
<<
atom -> [ test_list ]
397
-
atom -> [ test_list ]
397
<
atom -> [ test_list ]
397
==
atom -> [ test_list ]
397
and
atom -> [ test_list ]
397
if
atom -> [ test_list ]
397
nextloop
atom -> [ test_list ]
397
return
atom -> [ test_list ]
397
var
atom -> [ test_list ]
397
|
atom -> [ test_list ]
397
*
atom -> [ test_list ]
397
<=
atom -> [ test_list ]
397
>>
atom -> [ test_list ]
397
DEDENT
atom -> [ test_list ]
397
loop
atom -> [ test_list ]
397
%
atom -> [ test_list ]
397
NAME
atom -> [ test_list ]
397
or
atom -> [ test_list ]
397
^
atom -> [ test_list ]
397
!=
atom -> [ test_list ]
397
endloop
atom -> [ test_list ]
397
/
atom -> [ test_list ]
397
NEWLINE
atom -> [ test_list ]
397
+
atom -> [ test_list ]
397
//
atom -> [ test_list ]
398
|
xor_expr -> and_expr ^ xor_expr
398
if
xor_expr -> and_expr ^ xor_expr
398
var
xor_expr -> and_expr ^ xor_expr
398
<=
xor_expr -> and_expr ^ xor_expr
398
endloop
xor_expr -> and_expr ^ xor_expr
398
and
xor_expr -> and_expr ^ xor_expr
398
>
xor_expr -> and_expr ^ xor_expr
398
NEWLINE
xor_expr -> and_expr ^ xor_expr
398
return
xor_expr -> and_expr ^ xor_expr
398
loop
xor_expr -> and_expr ^ xor_expr
398
or
xor_expr -> and_expr ^ xor_expr
398
>=
xor_expr -> and_expr ^ xor_expr
398
==
xor_expr -> and_expr ^ xor_expr
398
<
xor_expr -> and_expr ^ xor_expr
398
!=
xor_expr -> and_expr ^ xor_expr
398
NAME
xor_expr -> and_expr ^ xor_expr
398
nextloop
xor_expr -> and_expr ^ xor_expr
398
DEDENT
xor_expr -> and_expr ^ xor_expr
399
NEWLINE
comparison -> expr comp_op comparison
399
DEDENT
comparison -> expr comp_op comparison
399
endloop
comparison -> expr comp_op comparison
399
var
comparison -> expr comp_op comparison
399
return
comparison -> expr comp_op comparison
399
or
comparison -> expr comp_op comparison
399
and
comparison -> expr comp_op comparison
399
if
comparison -> expr comp_op comparison
399
nextloop
comparison -> expr comp_op comparison
399
loop
comparison -> expr comp_op comparison
399
NAME
comparison -> expr comp_op comparison
400
return
and_test -> not_test and and_test
400
nextloop
and_test -> not_test and and_test
400
or
and_test -> not_test and and_test
400
NEWLINE
and_test -> not_test and and_test
400
endloop
and_test -> not_test and and_test
400
DEDENT
and_test -> not_test and and_test
400
loop
and_test -> not_test and and_test
400
if
and_test -> not_test and and_test
400
var
and_test -> not_test and and_test
400
NAME
and_test -> not_test and and_test
401
if
loop_stmt -> loop NAME : suite
401
NEWLINE
loop_stmt -> loop NAME : suite
401
loop
loop_stmt -> loop NAME : suite
401
nextloop
loop_stmt -> loop NAME : suite
401
DEDENT
loop_stmt -> loop NAME : suite
401
return
loop_stmt -> loop NAME : suite
401
var
loop_stmt -> loop NAME : suite
401
NAME
loop_stmt -> loop NAME : suite
401
endloop
loop_stmt -> loop NAME : suite
402
<=
factor -> power
402
>=
factor -> power
402
:
factor -> power
402
or
factor -> power
402
==
factor -> power
402
<
factor -> power
402
to
factor -> power
402
^
factor -> power
402
*
factor -> power
402
<<
factor -> power
402
//
factor -> power
402
|
factor -> power
402
/
factor -> power
402
>
factor -> power
402
+
factor -> power
402
and
factor -> power
402
!=
factor -> power
402
-
factor -> power
402
>>
factor -> power
402
%
factor -> power
402
&
factor -> power
403
>>
power -> atom
403
to
power -> atom
403
:
power -> atom
403
**
451
403
<=
power -> atom
403
|
power -> atom
403
!=
power -> atom
403
<<
power -> atom
403
>=
power -> atom
403
and
power -> atom
403
+
power -> atom
403
-
power -> atom
403
%
power -> atom
403
<
power -> atom
403
/
power -> atom
403
or
power -> atom
403
*
power -> atom
403
^
power -> atom
403
>
power -> atom
403
//
power -> atom
403
==
power -> atom
403
&
power -> atom
404
&
452
404
|
and_expr -> shift_expr
404
:
and_expr -> shift_expr
404
^
and_expr -> shift_expr
404
to
and_expr -> shift_expr
404
<
and_expr -> shift_expr
404
<=
and_expr -> shift_expr
404
or
and_expr -> shift_expr
404
>=
and_expr -> shift_expr
404
==
and_expr -> shift_expr
404
and
and_expr -> shift_expr
404
!=
and_expr -> shift_expr
404
>
and_expr -> shift_expr
405
NAME
406
405
power
402
405
atom
403
405
[
415
405
NUMBER
412
405
STRING
414
405
~
426
405
-
405
405
True
419
405
False
408
405
None
422
405
+
417
405
factor
453
405
call
418
406
and
atom -> NAME
406
(
454
406
**
atom -> NAME
406
or
atom -> NAME
406
+
atom -> NAME
406
:
atom -> NAME
406
>>
atom -> NAME
406
>=
atom -> NAME
406
%
atom -> NAME
406
==
atom -> NAME
406
*
atom -> NAME
406
!=
atom -> NAME
406
|
atom -> NAME
406
to
atom -> NAME
406
-
atom -> NAME
406
>
atom -> NAME
406
^
atom -> NAME
406
<<
atom -> NAME
406
<
atom -> NAME
406
<=
atom -> NAME
406
/
atom -> NAME
406
&
atom -> NAME
406
//
atom -> NAME
407
to
455
407
:
456
408
>
atom -> False
408
<
atom -> False
408
//
atom -> False
408
-
atom -> False
408
+
atom -> False
408
|
atom -> False
408
:
atom -> False
408
and
atom -> False
408
>>
atom -> False
408
<<
atom -> False
408
**
atom -> False
408
==
atom -> False
408
>=
atom -> False
408
to
atom -> False
408
<=
atom -> False
408
&
atom -> False
408
!=
atom -> False
408
or
atom -> False
408
/
atom -> False
408
%
atom -> False
408
*
atom -> False
408
^
atom -> False
409
+
457
409
==
arith_expr -> term
409
:
arith_expr -> term
409
or
arith_expr -> term
409
>>
arith_expr -> term
409
<<
arith_expr -> term
409
-
458
409
|
arith_expr -> term
409
<
arith_expr -> term
409
to
arith_expr -> term
409
!=
arith_expr -> term
409
and
arith_expr -> term
409
&
arith_expr -> term
409
>
arith_expr -> term
409
<=
arith_expr -> term
409
^
arith_expr -> term
409
>=
arith_expr -> term
410
>>
459
410
<<
460
410
and
shift_expr -> arith_expr
410
<=
shift_expr -> arith_expr
410
|
shift_expr -> arith_expr
410
>=
shift_expr -> arith_expr
410
or
shift_expr -> arith_expr
410
>
shift_expr -> arith_expr
410
<
shift_expr -> arith_expr
410
!=
shift_expr -> arith_expr
410
==
shift_expr -> arith_expr
410
&
shift_expr -> arith_expr
410
:
shift_expr -> arith_expr
410
^
shift_expr -> arith_expr
410
to
shift_expr -> arith_expr
411
to
expr -> xor_expr
411
|
461
411
:
expr -> xor_expr
411
>
expr -> xor_expr
411
>=
expr -> xor_expr
411
and
expr -> xor_expr
411
or
expr -> xor_expr
411
<
expr -> xor_expr
411
!=
expr -> xor_expr
411
==
expr -> xor_expr
411
<=
expr -> xor_expr
412
^
atom -> NUMBER
412
|
atom -> NUMBER
412
<=
atom -> NUMBER
412
%
atom -> NUMBER
412
&
atom -> NUMBER
412
==
atom -> NUMBER
412
**
atom -> NUMBER
412
>>
atom -> NUMBER
412
:
atom -> NUMBER
412
+
atom -> NUMBER
412
or
atom -> NUMBER
412
to
atom -> NUMBER
412
/
atom -> NUMBER
412
>=
atom -> NUMBER
412
!=
atom -> NUMBER
412
-
atom -> NUMBER
412
>
atom -> NUMBER
412
<
atom -> NUMBER
412
<<
atom -> NUMBER
412
*
atom -> NUMBER
412
//
atom -> NUMBER
412
and
atom -> NUMBER
413
//
462
413
%
463
413
==
term -> factor
413
/
464
413
*
465
413
^
term -> factor
413
>
term -> factor
413
or
term -> factor
413
:
term -> factor
413
to
term -> factor
413
&
term -> factor
413
<<
term -> factor
413
-
term -> factor
413
<
term -> factor
413
>>
term -> factor
413
|
term -> factor
413
and
term -> factor
413
!=
term -> factor
413
>=
term -> factor
413
<=
term -> factor
413
+
term -> factor
414
>=
atom -> STRING
414
|
atom -> STRING
414
^
atom -> STRING
414
or
atom -> STRING
414
<<
atom -> STRING
414
*
atom -> STRING
414
to
atom -> STRING
414
//
atom -> STRING
414
>
atom -> STRING
414
&
atom -> STRING
414
+
atom -> STRING
414
!=
atom -> STRING
414
-
atom -> STRING
414
<=
atom -> STRING
414
>>
atom -> STRING
414
%
atom -> STRING
414
==
atom -> STRING
414
<
atom -> STRING
414
/
atom -> STRING
414
:
atom -> STRING
414
**
atom -> STRING
414
and
atom -> STRING
415
]
466
415
power
83
415
atom
84
415
shift_expr
85
415
-
86
415
test_list
467
415
NAME
88
415
NUMBER
89
415
False
90
415
term
91
415
arith_expr
92
415
xor_expr
93
415
factor
94
415
STRING
95
415
[
96
415
and_expr
97
415
+
98
415
call
99
415
True
100
415
comparison
101
415
not_test
102
415
not
103
415
None
104
415
expr
105
415
~
106
415
and_test
107
415
test
108
415
or_test
109
416
>
xor_expr -> and_expr
416
and
xor_expr -> and_expr
416
^
468
416
>=
xor_expr -> and_expr
416
==
xor_expr -> and_expr
416
|
xor_expr -> and_expr
416
to
xor_expr -> and_expr
416
<
xor_expr -> and_expr
416
<=
xor_expr -> and_expr
416
:
xor_expr -> and_expr
416
!=
xor_expr -> and_expr
416
or
xor_expr -> and_expr
417
NAME
406
417
power
402
417
atom
403
417
[
415
417
NUMBER
412
417
STRING
414
417
-
405
417
~
426
417
True
419
417
factor
469
417
False
408
417
None
422
417
+
417
417
call
418
418
<<
atom -> call
418
^
atom -> call
418
-
atom -> call
418
>
atom -> call
418
==
atom -> call
418
<
atom -> call
418
%
atom -> call
418
+
atom -> call
418
>=
atom -> call
418
to
atom -> call
418
//
atom -> call
418
<=
atom -> call
418
**
atom -> call
418
&
atom -> call
418
>>
atom -> call
418
or
atom -> call
418
*
atom -> call
418
!=
atom -> call
418
/
atom -> call
418
:
atom -> call
418
and
atom -> call
418
|
atom -> call
419
<
atom -> True
419
or
atom -> True
419
%
atom -> True
419
>=
atom -> True
419
<<
atom -> True
419
//
atom -> True
419
|
atom -> True
419
>>
atom -> True
419
and
atom -> True
419
*
atom -> True
419
>
atom -> True
419
!=
atom -> True
419
==
atom -> True
419
+
atom -> True
419
<=
atom -> True
419
^
atom -> True
419
:
atom -> True
419
**
atom -> True
419
-
atom -> True
419
/
atom -> True
419
&
atom -> True
419
to
atom -> True
420
to
or_test -> and_test
420
:
or_test -> and_test
420
or
470
421
or
not_test -> comparison
421
to
not_test -> comparison
421
and
not_test -> comparison
421
:
not_test -> comparison
422
|
atom -> None
422
-
atom -> None
422
+
atom -> None
422
and
atom -> None
422
!=
atom -> None
422
or
atom -> None
422
&
atom -> None
422
>>
atom -> None
422
<=
atom -> None
422
>
atom -> None
422
to
atom -> None
422
<<
atom -> None
422
^
atom -> None
422
**
atom -> None
422
:
atom -> None
422
==
atom -> None
422
>=
atom -> None
422
<
atom -> None
422
//
atom -> None
422
*
atom -> None
422
/
atom -> None
422
%
atom -> None
423
:
and_test -> not_test
423
and
471
423
to
and_test -> not_test
423
or
and_test -> not_test
424
power
402
424
atom
403
424
shift_expr
404
424
-
405
424
NAME
406
424
False
408
424
term
409
424
arith_expr
410
424
xor_expr
411
424
NUMBER
412
424
factor
413
424
STRING
414
424
[
415
424
and_expr
416
424
+
417
424
call
418
424
True
419
424
comparison
421
424
None
422
424
not
424
424
expr
425
424
~
426
424
not_test
472
425
==
112
425
<
113
425
>=
114
425
<=
115
425
comp_op
473
425
!=
116
425
to
comparison -> expr
425
>
118
425
or
comparison -> expr
425
:
comparison -> expr
425
and
comparison -> expr
426
NAME
406
426
power
402
426
atom
403
426
[
415
426
NUMBER
412
426
STRING
414
426
factor
474
426
-
405
426
~
426
426
True
419
426
False
408
426
None
422
426
+
417
426
call
418
427
to
test -> or_test
427
:
test -> or_test
428
loop_stmt
256
428
return
257
428
assign_stmt
258
428
stmt_list
475
428
NAME
259
428
NEWLINE
260
428
loop
261
428
var
262
428
endloop
264
428
return_stmt
265
428
if
266
428
flow_stmt
267
428
decl_stmt
268
428
nextloop
269
428
if_stmt
270
428
DEDENT
stmt_list -> 
428
stmt
271
429
NAME
decl_stmt -> var NAME = test
429
loop
decl_stmt -> var NAME = test
429
endloop
decl_stmt -> var NAME = test
429
var
decl_stmt -> var NAME = test
429
DEDENT
decl_stmt -> var NAME = test
429
NEWLINE
decl_stmt -> var NAME = test
429
if
decl_stmt -> var NAME = test
429
return
decl_stmt -> var NAME = test
429
nextloop
decl_stmt -> var NAME = test
430
>
call -> NAME ( )
430
%
call -> NAME ( )
430
:
call -> NAME ( )
430
<=
call -> NAME ( )
430
&
call -> NAME ( )
430
*
call -> NAME ( )
430
and
call -> NAME ( )
430
//
call -> NAME ( )
430
==
call -> NAME ( )
430
**
call -> NAME ( )
430
/
call -> NAME ( )
430
or
call -> NAME ( )
430
<<
call -> NAME ( )
430
>=
call -> NAME ( )
430
^
call -> NAME ( )
430
<
call -> NAME ( )
430
!=
call -> NAME ( )
430
>>
call -> NAME ( )
430
-
call -> NAME ( )
430
+
call -> NAME ( )
430
|
call -> NAME ( )
431
)
476
432
|
shift_expr -> arith_expr >> shift_expr
432
and
shift_expr -> arith_expr >> shift_expr
432
^
shift_expr -> arith_expr >> shift_expr
432
or
shift_expr -> arith_expr >> shift_expr
432
<=
shift_expr -> arith_expr >> shift_expr
432
>
shift_expr -> arith_expr >> shift_expr
432
==
shift_expr -> arith_expr >> shift_expr
432
!=
shift_expr -> arith_expr >> shift_expr
432
<
shift_expr -> arith_expr >> shift_expr
432
&
shift_expr -> arith_expr >> shift_expr
432
>=
shift_expr -> arith_expr >> shift_expr
432
:
shift_expr -> arith_expr >> shift_expr
433
<=
shift_expr -> arith_expr << shift_expr
433
<
shift_expr -> arith_expr << shift_expr
433
or
shift_expr -> arith_expr << shift_expr
433
==
shift_expr -> arith_expr << shift_expr
433
>=
shift_expr -> arith_expr << shift_expr
433
:
shift_expr -> arith_expr << shift_expr
433
|
shift_expr -> arith_expr << shift_expr
433
&
shift_expr -> arith_expr << shift_expr
433
!=
shift_expr -> arith_expr << shift_expr
433
^
shift_expr -> arith_expr << shift_expr
433
>
shift_expr -> arith_expr << shift_expr
433
and
shift_expr -> arith_expr << shift_expr
434
%
power -> atom ** factor
434
>=
power -> atom ** factor
434
==
power -> atom ** factor
434
<
power -> atom ** factor
434
/
power -> atom ** factor
434
-
power -> atom ** factor
434
>
power -> atom ** factor
434
:
power -> atom ** factor
434
or
power -> atom ** factor
434
<<
power -> atom ** factor
434
//
power -> atom ** factor
434
|
power -> atom ** factor
434
&
power -> atom ** factor
434
<=
power -> atom ** factor
434
>>
power -> atom ** factor
434
^
power -> atom ** factor
434
+
power -> atom ** factor
434
*
power -> atom ** factor
434
and
power -> atom ** factor
434
!=
power -> atom ** factor
435
**
atom -> [ test_list ]
435
>
atom -> [ test_list ]
435
>=
atom -> [ test_list ]
435
&
atom -> [ test_list ]
435
<<
atom -> [ test_list ]
435
-
atom -> [ test_list ]
435
<
atom -> [ test_list ]
435
==
atom -> [ test_list ]
435
and
atom -> [ test_list ]
435
|
atom -> [ test_list ]
435
*
atom -> [ test_list ]
435
<=
atom -> [ test_list ]
435
>>
atom -> [ test_list ]
435
%
atom -> [ test_list ]
435
:
atom -> [ test_list ]
435
or
atom -> [ test_list ]
435
^
atom -> [ test_list ]
435
!=
atom -> [ test_list ]
435
/
atom -> [ test_list ]
435
+
atom -> [ test_list ]
435
//
atom -> [ test_list ]
436
<
term -> factor // term
436
^
term -> factor // term
436
&
term -> factor // term
436
or
term -> factor // term
436
!=
term -> factor // term
436
>=
term -> factor // term
436
-
term -> factor // term
436
<=
term -> factor // term
436
<<
term -> factor // term
436
>
term -> factor // term
436
|
term -> factor // term
436
==
term -> factor // term
436
+
term -> factor // term
436
and
term -> factor // term
436
>>
term -> factor // term
436
:
term -> factor // term
437
<
term -> factor % term
437
>
term -> factor % term
437
<<
term -> factor % term
437
<=
term -> factor % term
437
-
term -> factor % term
437
!=
term -> factor % term
437
or
term -> factor % term
437
and
term -> factor % term
437
:
term -> factor % term
437
+
term -> factor % term
437
^
term -> factor % term
437
|
term -> factor % term
437
==
term -> factor % term
437
>>
term -> factor % term
437
&
term -> factor % term
437
>=
term -> factor % term
438
or
term -> factor / term
438
>
term -> factor / term
438
<=
term -> factor / term
438
|
term -> factor / term
438
+
term -> factor / term
438
==
term -> factor / term
438
<<
term -> factor / term
438
and
term -> factor / term
438
!=
term -> factor / term
438
^
term -> factor / term
438
<
term -> factor / term
438
-
term -> factor / term
438
>>
term -> factor / term
438
&
term -> factor / term
438
:
term -> factor / term
438
>=
term -> factor / term
439
<
term -> factor * term
439
|
term -> factor * term
439
or
term -> factor * term
439
>>
term -> factor * term
439
:
term -> factor * term
439
<=
term -> factor * term
439
==
term -> factor * term
439
>=
term -> factor * term
439
^
term -> factor * term
439
-
term -> factor * term
439
<<
term -> factor * term
439
>
term -> factor * term
439
!=
term -> factor * term
439
and
term -> factor * term
439
+
term -> factor * term
439
&
term -> factor * term
440
>=
and_expr -> shift_expr & and_expr
440
<=
and_expr -> shift_expr & and_expr
440
and
and_expr -> shift_expr & and_expr
440
:
and_expr -> shift_expr & and_expr
440
|
and_expr -> shift_expr & and_expr
440
>
and_expr -> shift_expr & and_expr
440
<
and_expr -> shift_expr & and_expr
440
!=
and_expr -> shift_expr & and_expr
440
^
and_expr -> shift_expr & and_expr
440
or
and_expr -> shift_expr & and_expr
440
==
and_expr -> shift_expr & and_expr
441
<=
arith_expr -> term + arith_expr
441
>
arith_expr -> term + arith_expr
441
>=
arith_expr -> term + arith_expr
441
==
arith_expr -> term + arith_expr
441
!=
arith_expr -> term + arith_expr
441
<
arith_expr -> term + arith_expr
441
:
arith_expr -> term + arith_expr
441
&
arith_expr -> term + arith_expr
441
<<
arith_expr -> term + arith_expr
441
or
arith_expr -> term + arith_expr
441
and
arith_expr -> term + arith_expr
441
^
arith_expr -> term + arith_expr
441
>>
arith_expr -> term + arith_expr
441
|
arith_expr -> term + arith_expr
442
>>
arith_expr -> term - arith_expr
442
>=
arith_expr -> term - arith_expr
442
<=
arith_expr -> term - arith_expr
442
or
arith_expr -> term - arith_expr
442
<
arith_expr -> term - arith_expr
442
:
arith_expr -> term - arith_expr
442
|
arith_expr -> term - arith_expr
442
&
arith_expr -> term - arith_expr
442
!=
arith_expr -> term - arith_expr
442
and
arith_expr -> term - arith_expr
442
<<
arith_expr -> term - arith_expr
442
^
arith_expr -> term - arith_expr
442
>
arith_expr -> term - arith_expr
442
==
arith_expr -> term - arith_expr
443
==
expr -> xor_expr | expr
443
:
expr -> xor_expr | expr
443
or
expr -> xor_expr | expr
443
and
expr -> xor_expr | expr
443
!=
expr -> xor_expr | expr
443
<
expr -> xor_expr | expr
443
>=
expr -> xor_expr | expr
443
>
expr -> xor_expr | expr
443
<=
expr -> xor_expr | expr
444
<=
xor_expr -> and_expr ^ xor_expr
444
and
xor_expr -> and_expr ^ xor_expr
444
:
xor_expr -> and_expr ^ xor_expr
444
!=
xor_expr -> and_expr ^ xor_expr
444
or
xor_expr -> and_expr ^ xor_expr
444
<
xor_expr -> and_expr ^ xor_expr
444
==
xor_expr -> and_expr ^ xor_expr
444
>=
xor_expr -> and_expr ^ xor_expr
444
|
xor_expr -> and_expr ^ xor_expr
444
>
xor_expr -> and_expr ^ xor_expr
445
INDENT
477
446
endloop
if_stmt -> if test : suite
446
var
if_stmt -> if test : suite
446
NEWLINE
if_stmt -> if test : suite
446
if
if_stmt -> if test : suite
446
else
478
446
return
if_stmt -> if test : suite
446
nextloop
if_stmt -> if test : suite
446
DEDENT
if_stmt -> if test : suite
446
NAME
if_stmt -> if test : suite
446
loop
if_stmt -> if test : suite
447
:
or_test -> and_test or or_test
448
or
and_test -> not_test and and_test
448
:
and_test -> not_test and and_test
449
or
comparison -> expr comp_op comparison
449
:
comparison -> expr comp_op comparison
449
and
comparison -> expr comp_op comparison
450
>
call -> NAME ( test_list )
450
^
call -> NAME ( test_list )
450
==
call -> NAME ( test_list )
450
<
call -> NAME ( test_list )
450
endloop
call -> NAME ( test_list )
450
NAME
call -> NAME ( test_list )
450
if
call -> NAME ( test_list )
450
-
call -> NAME ( test_list )
450
&
call -> NAME ( test_list )
450
return
call -> NAME ( test_list )
450
<=
call -> NAME ( test_list )
450
nextloop
call -> NAME ( test_list )
450
%
call -> NAME ( test_list )
450
*
call -> NAME ( test_list )
450
and
call -> NAME ( test_list )
450
/
call -> NAME ( test_list )
450
+
call -> NAME ( test_list )
450
>=
call -> NAME ( test_list )
450
loop
call -> NAME ( test_list )
450
|
call -> NAME ( test_list )
450
DEDENT
call -> NAME ( test_list )
450
**
call -> NAME ( test_list )
450
or
call -> NAME ( test_list )
450
var
call -> NAME ( test_list )
450
NEWLINE
call -> NAME ( test_list )
450
//
call -> NAME ( test_list )
450
>>
call -> NAME ( test_list )
450
!=
call -> NAME ( test_list )
450
<<
call -> NAME ( test_list )
451
NAME
406
451
power
402
451
atom
403
451
[
415
451
NUMBER
412
451
STRING
414
451
~
426
451
-
405
451
True
419
451
False
408
451
None
422
451
+
417
451
call
418
451
factor
479
452
NAME
406
452
arith_expr
410
452
power
402
452
atom
403
452
[
415
452
factor
413
452
NUMBER
412
452
STRING
414
452
shift_expr
404
452
-
405
452
~
426
452
True
419
452
False
408
452
term
409
452
None
422
452
+
417
452
call
418
452
and_expr
480
453
<=
factor -> - factor
453
to
factor -> - factor
453
//
factor -> - factor
453
>>
factor -> - factor
453
or
factor -> - factor
453
+
factor -> - factor
453
^
factor -> - factor
453
-
factor -> - factor
453
and
factor -> - factor
453
%
factor -> - factor
453
>=
factor -> - factor
453
!=
factor -> - factor
453
<
factor -> - factor
453
|
factor -> - factor
453
:
factor -> - factor
453
*
factor -> - factor
453
==
factor -> - factor
453
/
factor -> - factor
453
>
factor -> - factor
453
&
factor -> - factor
453
<<
factor -> - factor
454
)
481
454
power
125
454
~
126
454
atom
127
454
None
128
454
shift_expr
129
454
-
130
454
NAME
131
454
NUMBER
132
454
False
133
454
term
134
454
arith_expr
135
454
xor_expr
136
454
factor
137
454
STRING
138
454
[
140
454
and_expr
141
454
+
142
454
call
143
454
test_list
482
454
not
144
454
True
145
454
comparison
146
454
and_test
147
454
not_test
148
454
expr
149
454
test
150
454
or_test
151
455
power
483
455
atom
484
455
shift_expr
485
455
-
486
455
NAME
487
455
False
488
455
term
489
455
arith_expr
490
455
test
491
455
xor_expr
492
455
NUMBER
493
455
factor
494
455
STRING
495
455
[
496
455
and_expr
497
455
+
498
455
call
499
455
or_test
500
455
True
501
455
and_test
502
455
comparison
503
455
not_test
504
455
None
505
455
not
506
455
expr
507
455
~
508
456
suite
509
456
NEWLINE
358
457
NAME
406
457
power
402
457
atom
403
457
[
415
457
factor
413
457
NUMBER
412
457
STRING
414
457
-
405
457
~
426
457
True
419
457
False
408
457
term
409
457
None
422
457
arith_expr
510
457
+
417
457
call
418
458
NAME
406
458
power
402
458
atom
403
458
[
415
458
factor
413
458
NUMBER
412
458
STRING
414
458
-
405
458
~
426
458
True
419
458
False
408
458
term
409
458
None
422
458
+
417
458
call
418
458
arith_expr
511
459
NAME
406
459
arith_expr
410
459
power
402
459
atom
403
459
[
415
459
factor
413
459
NUMBER
412
459
STRING
414
459
shift_expr
512
459
-
405
459
~
426
459
True
419
459
False
408
459
term
409
459
None
422
459
+
417
459
call
418
460
NAME
406
460
arith_expr
410
460
power
402
460
atom
403
460
[
415
460
factor
413
460
NUMBER
412
460
STRING
414
460
-
405
460
~
426
460
True
419
460
False
408
460
term
409
460
None
422
460
+
417
460
shift_expr
513
460
call
418
461
NAME
406
461
arith_expr
410
461
power
402
461
atom
403
461
[
415
461
factor
413
461
NUMBER
412
461
STRING
414
461
shift_expr
404
461
-
405
461
~
426
461
True
419
461
False
408
461
term
409
461
None
422
461
xor_expr
411
461
+
417
461
and_expr
416
461
call
418
461
expr
514
462
NAME
406
462
power
402
462
atom
403
462
[
415
462
factor
413
462
NUMBER
412
462
STRING
414
462
-
405
462
~
426
462
True
419
462
False
408
462
None
422
462
term
515
462
+
417
462
call
418
463
term
516
463
NAME
406
463
power
402
463
atom
403
463
[
415
463
factor
413
463
NUMBER
412
463
STRING
414
463
-
405
463
~
426
463
True
419
463
False
408
463
None
422
463
+
417
463
call
418
464
NAME
406
464
power
402
464
atom
403
464
[
415
464
factor
413
464
NUMBER
412
464
STRING
414
464
-
405
464
~
426
464
True
419
464
False
408
464
None
422
464
+
417
464
call
418
464
term
517
465
NAME
406
465
power
402
465
atom
403
465
[
415
465
factor
413
465
NUMBER
412
465
STRING
414
465
-
405
465
~
426
465
True
419
465
False
408
465
None
422
465
+
417
465
term
518
465
call
418
466
>
atom -> [ ]
466
<<
atom -> [ ]
466
**
atom -> [ ]
466
-
atom -> [ ]
466
/
atom -> [ ]
466
//
atom -> [ ]
466
^
atom -> [ ]
466
&
atom -> [ ]
466
or
atom -> [ ]
466
+
atom -> [ ]
466
:
atom -> [ ]
466
!=
atom -> [ ]
466
to
atom -> [ ]
466
<=
atom -> [ ]
466
>>
atom -> [ ]
466
and
atom -> [ ]
466
|
atom -> [ ]
466
>=
atom -> [ ]
466
==
atom -> [ ]
466
*
atom -> [ ]
466
%
atom -> [ ]
466
<
atom -> [ ]
467
]
519
468
NAME
406
468
arith_expr
410
468
power
402
468
atom
403
468
[
415
468
factor
413
468
NUMBER
412
468
STRING
414
468
shift_expr
404
468
-
405
468
~
426
468
True
419
468
False
408
468
term
409
468
None
422
468
+
417
468
and_expr
416
468
call
418
468
xor_expr
520
469
+
factor -> + factor
469
:
factor -> + factor
469
<<
factor -> + factor
469
<=
factor -> + factor
469
<
factor -> + factor
469
//
factor -> + factor
469
>
factor -> + factor
469
to
factor -> + factor
469
*
factor -> + factor
469
%
factor -> + factor
469
>=
factor -> + factor
469
/
factor -> + factor
469
-
factor -> + factor
469
>>
factor -> + factor
469
or
factor -> + factor
469
&
factor -> + factor
469
^
factor -> + factor
469
==
factor -> + factor
469
and
factor -> + factor
469
|
factor -> + factor
469
!=
factor -> + factor
470
power
402
470
atom
403
470
shift_expr
404
470
-
405
470
NAME
406
470
False
408
470
term
409
470
arith_expr
410
470
xor_expr
411
470
NUMBER
412
470
factor
413
470
STRING
414
470
[
415
470
and_expr
416
470
+
417
470
call
418
470
or_test
521
470
True
419
470
and_test
420
470
comparison
421
470
None
422
470
not_test
423
470
not
424
470
expr
425
470
~
426
471
power
402
471
atom
403
471
shift_expr
404
471
-
405
471
NAME
406
471
False
408
471
term
409
471
arith_expr
410
471
xor_expr
411
471
NUMBER
412
471
factor
413
471
STRING
414
471
[
415
471
and_expr
416
471
+
417
471
call
418
471
True
419
471
and_test
522
471
comparison
421
471
None
422
471
not_test
423
471
not
424
471
expr
425
471
~
426
472
and
not_test -> not not_test
472
:
not_test -> not not_test
472
or
not_test -> not not_test
472
to
not_test -> not not_test
473
power
402
473
atom
403
473
shift_expr
404
473
-
405
473
NAME
406
473
False
408
473
term
409
473
arith_expr
410
473
xor_expr
411
473
comparison
523
473
NUMBER
412
473
factor
413
473
STRING
414
473
[
415
473
and_expr
416
473
+
417
473
call
418
473
True
419
473
None
422
473
expr
425
473
~
426
474
>
factor -> ~ factor
474
%
factor -> ~ factor
474
<=
factor -> ~ factor
474
|
factor -> ~ factor
474
*
factor -> ~ factor
474
//
factor -> ~ factor
474
-
factor -> ~ factor
474
<
factor -> ~ factor
474
^
factor -> ~ factor
474
:
factor -> ~ factor
474
>>
factor -> ~ factor
474
!=
factor -> ~ factor
474
+
factor -> ~ factor
474
/
factor -> ~ factor
474
and
factor -> ~ factor
474
>=
factor -> ~ factor
474
==
factor -> ~ factor
474
or
factor -> ~ factor
474
&
factor -> ~ factor
474
<<
factor -> ~ factor
474
to
factor -> ~ factor
475
DEDENT
524
476
>
call -> NAME ( test_list )
476
^
call -> NAME ( test_list )
476
==
call -> NAME ( test_list )
476
<
call -> NAME ( test_list )
476
-
call -> NAME ( test_list )
476
&
call -> NAME ( test_list )
476
<=
call -> NAME ( test_list )
476
%
call -> NAME ( test_list )
476
*
call -> NAME ( test_list )
476
and
call -> NAME ( test_list )
476
/
call -> NAME ( test_list )
476
+
call -> NAME ( test_list )
476
>=
call -> NAME ( test_list )
476
|
call -> NAME ( test_list )
476
**
call -> NAME ( test_list )
476
or
call -> NAME ( test_list )
476
:
call -> NAME ( test_list )
476
>>
call -> NAME ( test_list )
476
//
call -> NAME ( test_list )
476
!=
call -> NAME ( test_list )
476
<<
call -> NAME ( test_list )
477
loop_stmt
256
477
return
257
477
assign_stmt
258
477
stmt_list
525
477
NAME
259
477
NEWLINE
260
477
loop
261
477
var
262
477
endloop
264
477
return_stmt
265
477
if
266
477
flow_stmt
267
477
decl_stmt
268
477
nextloop
269
477
if_stmt
270
477
DEDENT
stmt_list -> 
477
stmt
271
478
:
526
479
%
power -> atom ** factor
479
>=
power -> atom ** factor
479
==
power -> atom ** factor
479
<
power -> atom ** factor
479
/
power -> atom ** factor
479
-
power -> atom ** factor
479
>
power -> atom ** factor
479
:
power -> atom ** factor
479
to
power -> atom ** factor
479
or
power -> atom ** factor
479
<<
power -> atom ** factor
479
//
power -> atom ** factor
479
|
power -> atom ** factor
479
&
power -> atom ** factor
479
<=
power -> atom ** factor
479
>>
power -> atom ** factor
479
^
power -> atom ** factor
479
+
power -> atom ** factor
479
*
power -> atom ** factor
479
and
power -> atom ** factor
479
!=
power -> atom ** factor
480
>=
and_expr -> shift_expr & and_expr
480
<=
and_expr -> shift_expr & and_expr
480
and
and_expr -> shift_expr & and_expr
480
:
and_expr -> shift_expr & and_expr
480
|
and_expr -> shift_expr & and_expr
480
>
and_expr -> shift_expr & and_expr
480
<
and_expr -> shift_expr & and_expr
480
!=
and_expr -> shift_expr & and_expr
480
to
and_expr -> shift_expr & and_expr
480
^
and_expr -> shift_expr & and_expr
480
or
and_expr -> shift_expr & and_expr
480
==
and_expr -> shift_expr & and_expr
481
>
call -> NAME ( )
481
%
call -> NAME ( )
481
:
call -> NAME ( )
481
<=
call -> NAME ( )
481
&
call -> NAME ( )
481
*
call -> NAME ( )
481
and
call -> NAME ( )
481
//
call -> NAME ( )
481
==
call -> NAME ( )
481
**
call -> NAME ( )
481
/
call -> NAME ( )
481
or
call -> NAME ( )
481
<<
call -> NAME ( )
481
>=
call -> NAME ( )
481
^
call -> NAME ( )
481
<
call -> NAME ( )
481
to
call -> NAME ( )
481
!=
call -> NAME ( )
481
>>
call -> NAME ( )
481
-
call -> NAME ( )
481
+
call -> NAME ( )
481
|
call -> NAME ( )
482
)
527
483
<=
factor -> power
483
>=
factor -> power
483
:
factor -> power
483
or
factor -> power
483
==
factor -> power
483
<
factor -> power
483
^
factor -> power
483
*
factor -> power
483
<<
factor -> power
483
//
factor -> power
483
|
factor -> power
483
/
factor -> power
483
>
factor -> power
483
+
factor -> power
483
and
factor -> power
483
!=
factor -> power
483
-
factor -> power
483
by
factor -> power
483
>>
factor -> power
483
%
factor -> power
483
&
factor -> power
484
>>
power -> atom
484
:
power -> atom
484
**
528
484
<=
power -> atom
484
|
power -> atom
484
!=
power -> atom
484
<<
power -> atom
484
>=
power -> atom
484
and
power -> atom
484
+
power -> atom
484
-
power -> atom
484
%
power -> atom
484
<
power -> atom
484
by
power -> atom
484
/
power -> atom
484
or
power -> atom
484
*
power -> atom
484
^
power -> atom
484
>
power -> atom
484
//
power -> atom
484
==
power -> atom
484
&
power -> atom
485
&
529
485
|
and_expr -> shift_expr
485
:
and_expr -> shift_expr
485
^
and_expr -> shift_expr
485
<
and_expr -> shift_expr
485
<=
and_expr -> shift_expr
485
or
and_expr -> shift_expr
485
by
and_expr -> shift_expr
485
>=
and_expr -> shift_expr
485
==
and_expr -> shift_expr
485
and
and_expr -> shift_expr
485
!=
and_expr -> shift_expr
485
>
and_expr -> shift_expr
486
NAME
487
486
power
483
486
atom
484
486
[
496
486
NUMBER
493
486
STRING
495
486
~
508
486
-
486
486
True
501
486
False
488
486
None
505
486
+
498
486
factor
530
486
call
499
487
and
atom -> NAME
487
(
531
487
**
atom -> NAME
487
or
atom -> NAME
487
+
atom -> NAME
487
:
atom -> NAME
487
>>
atom -> NAME
487
>=
atom -> NAME
487
%
atom -> NAME
487
==
atom -> NAME
487
*
atom -> NAME
487
!=
atom -> NAME
487
|
atom -> NAME
487
-
atom -> NAME
487
>
atom -> NAME
487
^
atom -> NAME
487
<<
atom -> NAME
487
<
atom -> NAME
487
<=
atom -> NAME
487
/
atom -> NAME
487
&
atom -> NAME
487
//
atom -> NAME
487
by
atom -> NAME
488
>
atom -> False
488
<
atom -> False
488
//
atom -> False
488
-
atom -> False
488
+
atom -> False
488
|
atom -> False
488
:
atom -> False
488
and
atom -> False
488
>>
atom -> False
488
<<
atom -> False
488
**
atom -> False
488
==
atom -> False
488
>=
atom -> False
488
<=
atom -> False
488
&
atom -> False
488
by
atom -> False
488
!=
atom -> False
488
or
atom -> False
488
/
atom -> False
488
%
atom -> False
488
*
atom -> False
488
^
atom -> False
489
+
532
489
==
arith_expr -> term
489
:
arith_expr -> term
489
or
arith_expr -> term
489
>>
arith_expr -> term
489
<<
arith_expr -> term
489
-
533
489
|
arith_expr -> term
489
<
arith_expr -> term
489
!=
arith_expr -> term
489
and
arith_expr -> term
489
&
arith_expr -> term
489
>
arith_expr -> term
489
<=
arith_expr -> term
489
^
arith_expr -> term
489
>=
arith_expr -> term
489
by
arith_expr -> term
490
>>
534
490
<<
535
490
and
shift_expr -> arith_expr
490
by
shift_expr -> arith_expr
490
<=
shift_expr -> arith_expr
490
|
shift_expr -> arith_expr
490
>=
shift_expr -> arith_expr
490
or
shift_expr -> arith_expr
490
>
shift_expr -> arith_expr
490
<
shift_expr -> arith_expr
490
!=
shift_expr -> arith_expr
490
==
shift_expr -> arith_expr
490
&
shift_expr -> arith_expr
490
:
shift_expr -> arith_expr
490
^
shift_expr -> arith_expr
491
:
536
491
by
537
492
|
538
492
by
expr -> xor_expr
492
:
expr -> xor_expr
492
>
expr -> xor_expr
492
>=
expr -> xor_expr
492
and
expr -> xor_expr
492
or
expr -> xor_expr
492
<
expr -> xor_expr
492
!=
expr -> xor_expr
492
==
expr -> xor_expr
492
<=
expr -> xor_expr
493
^
atom -> NUMBER
493
|
atom -> NUMBER
493
<=
atom -> NUMBER
493
by
atom -> NUMBER
493
%
atom -> NUMBER
493
&
atom -> NUMBER
493
==
atom -> NUMBER
493
**
atom -> NUMBER
493
>>
atom -> NUMBER
493
:
atom -> NUMBER
493
+
atom -> NUMBER
493
or
atom -> NUMBER
493
/
atom -> NUMBER
493
>=
atom -> NUMBER
493
!=
atom -> NUMBER
493
-
atom -> NUMBER
493
>
atom -> NUMBER
493
<
atom -> NUMBER
493
<<
atom -> NUMBER
493
*
atom -> NUMBER
493
//
atom -> NUMBER
493
and
atom -> NUMBER
494
//
539
494
*
540
494
%
541
494
==
term -> factor
494
/
542
494
^
term -> factor
494
>
term -> factor
494
by
term -> factor
494
or
term -> factor
494
:
term -> factor
494
&
term -> factor
494
<<
term -> factor
494
-
term -> factor
494
<
term -> factor
494
>>
term -> factor
494
|
term -> factor
494
and
term -> factor
494
!=
term -> factor
494
>=
term -> factor
494
<=
term -> factor
494
+
term -> factor
495
>=
atom -> STRING
495
|
atom -> STRING
495
^
atom -> STRING
495
or
atom -> STRING
495
<<
atom -> STRING
495
*
atom -> STRING
495
//
atom -> STRING
495
>
atom -> STRING
495
&
atom -> STRING
495
+
atom -> STRING
495
!=
atom -> STRING
495
-
atom -> STRING
495
<=
atom -> STRING
495
>>
atom -> STRING
495
%
atom -> STRING
495
==
atom -> STRING
495
<
atom -> STRING
495
/
atom -> STRING
495
:
atom -> STRING
495
**
atom -> STRING
495
and
atom -> STRING
495
by
atom -> STRING
496
]
543
496
power
83
496
atom
84
496
shift_expr
85
496
-
86
496
test_list
544
496
NAME
88
496
NUMBER
89
496
False
90
496
term
91
496
arith_expr
92
496
xor_expr
93
496
factor
94
496
STRING
95
496
[
96
496
and_expr
97
496
+
98
496
call
99
496
True
100
496
comparison
101
496
not_test
102
496
not
103
496
None
104
496
expr
105
496
~
106
496
and_test
107
496
test
108
496
or_test
109
497
>
xor_expr -> and_expr
497
^
545
497
and
xor_expr -> and_expr
497
>=
xor_expr -> and_expr
497
by
xor_expr -> and_expr
497
==
xor_expr -> and_expr
497
|
xor_expr -> and_expr
497
<
xor_expr -> and_expr
497
<=
xor_expr -> and_expr
497
:
xor_expr -> and_expr
497
!=
xor_expr -> and_expr
497
or
xor_expr -> and_expr
498
NAME
487
498
power
483
498
atom
484
498
[
496
498
NUMBER
493
498
STRING
495
498
-
486
498
~
508
498
True
501
498
False
488
498
None
505
498
+
498
498
call
499
498
factor
546
499
<<
atom -> call
499
^
atom -> call
499
-
atom -> call
499
>
atom -> call
499
==
atom -> call
499
by
atom -> call
499
<
atom -> call
499
%
atom -> call
499
+
atom -> call
499
>=
atom -> call
499
//
atom -> call
499
<=
atom -> call
499
**
atom -> call
499
&
atom -> call
499
>>
atom -> call
499
or
atom -> call
499
*
atom -> call
499
!=
atom -> call
499
/
atom -> call
499
:
atom -> call
499
and
atom -> call
499
|
atom -> call
500
:
test -> or_test
500
by
test -> or_test
501
<
atom -> True
501
or
atom -> True
501
%
atom -> True
501
>=
atom -> True
501
<<
atom -> True
501
//
atom -> True
501
|
atom -> True
501
>>
atom -> True
501
and
atom -> True
501
*
atom -> True
501
>
atom -> True
501
!=
atom -> True
501
==
atom -> True
501
+
atom -> True
501
<=
atom -> True
501
by
atom -> True
501
^
atom -> True
501
:
atom -> True
501
**
atom -> True
501
-
atom -> True
501
/
atom -> True
501
&
atom -> True
502
:
or_test -> and_test
502
or
547
502
by
or_test -> and_test
503
by
not_test -> comparison
503
or
not_test -> comparison
503
and
not_test -> comparison
503
:
not_test -> comparison
504
:
and_test -> not_test
504
and
548
504
or
and_test -> not_test
504
by
and_test -> not_test
505
|
atom -> None
505
-
atom -> None
505
+
atom -> None
505
and
atom -> None
505
!=
atom -> None
505
or
atom -> None
505
&
atom -> None
505
>>
atom -> None
505
<=
atom -> None
505
>
atom -> None
505
<<
atom -> None
505
^
atom -> None
505
by
atom -> None
505
**
atom -> None
505
:
atom -> None
505
==
atom -> None
505
>=
atom -> None
505
<
atom -> None
505
//
atom -> None
505
*
atom -> None
505
/
atom -> None
505
%
atom -> None
506
power
483
506
atom
484
506
shift_expr
485
506
-
486
506
NAME
487
506
False
488
506
term
489
506
arith_expr
490
506
xor_expr
492
506
NUMBER
493
506
factor
494
506
STRING
495
506
[
496
506
and_expr
497
506
+
498
506
call
499
506
True
501
506
comparison
503
506
None
505
506
not
506
506
expr
507
506
~
508
506
not_test
549
507
==
112
507
<
113
507
>=
114
507
<=
115
507
comp_op
550
507
!=
116
507
>
118
507
by
comparison -> expr
507
or
comparison -> expr
507
:
comparison -> expr
507
and
comparison -> expr
508
NAME
487
508
power
483
508
atom
484
508
[
496
508
NUMBER
493
508
STRING
495
508
factor
551
508
-
486
508
~
508
508
True
501
508
False
488
508
None
505
508
+
498
508
call
499
509
NAME
loop_stmt -> loop NAME from test : suite
509
var
loop_stmt -> loop NAME from test : suite
509
return
loop_stmt -> loop NAME from test : suite
509
NEWLINE
loop_stmt -> loop NAME from test : suite
509
DEDENT
loop_stmt -> loop NAME from test : suite
509
endloop
loop_stmt -> loop NAME from test : suite
509
if
loop_stmt -> loop NAME from test : suite
509
nextloop
loop_stmt -> loop NAME from test : suite
509
loop
loop_stmt -> loop NAME from test : suite
510
<=
arith_expr -> term + arith_expr
510
>
arith_expr -> term + arith_expr
510
>=
arith_expr -> term + arith_expr
510
==
arith_expr -> term + arith_expr
510
!=
arith_expr -> term + arith_expr
510
<
arith_expr -> term + arith_expr
510
to
arith_expr -> term + arith_expr
510
:
arith_expr -> term + arith_expr
510
&
arith_expr -> term + arith_expr
510
<<
arith_expr -> term + arith_expr
510
or
arith_expr -> term + arith_expr
510
and
arith_expr -> term + arith_expr
510
^
arith_expr -> term + arith_expr
510
>>
arith_expr -> term + arith_expr
510
|
arith_expr -> term + arith_expr
511
>>
arith_expr -> term - arith_expr
511
>=
arith_expr -> term - arith_expr
511
<=
arith_expr -> term - arith_expr
511
or
arith_expr -> term - arith_expr
511
<
arith_expr -> term - arith_expr
511
:
arith_expr -> term - arith_expr
511
|
arith_expr -> term - arith_expr
511
&
arith_expr -> term - arith_expr
511
!=
arith_expr -> term - arith_expr
511
and
arith_expr -> term - arith_expr
511
<<
arith_expr -> term - arith_expr
511
==
arith_expr -> term - arith_expr
511
^
arith_expr -> term - arith_expr
511
>
arith_expr -> term - arith_expr
511
to
arith_expr -> term - arith_expr
512
|
shift_expr -> arith_expr >> shift_expr
512
and
shift_expr -> arith_expr >> shift_expr
512
to
shift_expr -> arith_expr >> shift_expr
512
^
shift_expr -> arith_expr >> shift_expr
512
or
shift_expr -> arith_expr >> shift_expr
512
<=
shift_expr -> arith_expr >> shift_expr
512
>
shift_expr -> arith_expr >> shift_expr
512
==
shift_expr -> arith_expr >> shift_expr
512
!=
shift_expr -> arith_expr >> shift_expr
512
<
shift_expr -> arith_expr >> shift_expr
512
&
shift_expr -> arith_expr >> shift_expr
512
>=
shift_expr -> arith_expr >> shift_expr
512
:
shift_expr -> arith_expr >> shift_expr
513
<=
shift_expr -> arith_expr << shift_expr
513
<
shift_expr -> arith_expr << shift_expr
513
or
shift_expr -> arith_expr << shift_expr
513
==
shift_expr -> arith_expr << shift_expr
513
to
shift_expr -> arith_expr << shift_expr
513
>=
shift_expr -> arith_expr << shift_expr
513
:
shift_expr -> arith_expr << shift_expr
513
|
shift_expr -> arith_expr << shift_expr
513
&
shift_expr -> arith_expr << shift_expr
513
!=
shift_expr -> arith_expr << shift_expr
513
^
shift_expr -> arith_expr << shift_expr
513
>
shift_expr -> arith_expr << shift_expr
513
and
shift_expr -> arith_expr << shift_expr
514
==
expr -> xor_expr | expr
514
:
expr -> xor_expr | expr
514
or
expr -> xor_expr | expr
514
and
expr -> xor_expr | expr
514
!=
expr -> xor_expr | expr
514
<
expr -> xor_expr | expr
514
>=
expr -> xor_expr | expr
514
>
expr -> xor_expr | expr
514
<=
expr -> xor_expr | expr
514
to
expr -> xor_expr | expr
515
<
term -> factor // term
515
^
term -> factor // term
515
&
term -> factor // term
515
or
term -> factor // term
515
!=
term -> factor // term
515
>=
term -> factor // term
515
-
term -> factor // term
515
<=
term -> factor // term
515
<<
term -> factor // term
515
>
term -> factor // term
515
|
term -> factor // term
515
==
term -> factor // term
515
+
term -> factor // term
515
and
term -> factor // term
515
>>
term -> factor // term
515
:
term -> factor // term
515
to
term -> factor // term
516
<
term -> factor % term
516
to
term -> factor % term
516
>
term -> factor % term
516
<<
term -> factor % term
516
<=
term -> factor % term
516
-
term -> factor % term
516
!=
term -> factor % term
516
or
term -> factor % term
516
and
term -> factor % term
516
:
term -> factor % term
516
+
term -> factor % term
516
^
term -> factor % term
516
|
term -> factor % term
516
==
term -> factor % term
516
>>
term -> factor % term
516
&
term -> factor % term
516
>=
term -> factor % term
517
or
term -> factor / term
517
>
term -> factor / term
517
to
term -> factor / term
517
<=
term -> factor / term
517
|
term -> factor / term
517
+
term -> factor / term
517
==
term -> factor / term
517
<<
term -> factor / term
517
and
term -> factor / term
517
!=
term -> factor / term
517
^
term -> factor / term
517
<
term -> factor / term
517
-
term -> factor / term
517
>>
term -> factor / term
517
&
term -> factor / term
517
:
term -> factor / term
517
>=
term -> factor / term
518
<
term -> factor * term
518
|
term -> factor * term
518
or
term -> factor * term
518
to
term -> factor * term
518
>>
term -> factor * term
518
<=
term -> factor * term
518
:
term -> factor * term
518
==
term -> factor * term
518
>=
term -> factor * term
518
^
term -> factor * term
518
-
term -> factor * term
518
<<
term -> factor * term
518
>
term -> factor * term
518
!=
term -> factor * term
518
and
term -> factor * term
518
+
term -> factor * term
518
&
term -> factor * term
519
to
atom -> [ test_list ]
519
**
atom -> [ test_list ]
519
>
atom -> [ test_list ]
519
>=
atom -> [ test_list ]
519
&
atom -> [ test_list ]
519
<<
atom -> [ test_list ]
519
-
atom -> [ test_list ]
519
<
atom -> [ test_list ]
519
==
atom -> [ test_list ]
519
and
atom -> [ test_list ]
519
|
atom -> [ test_list ]
519
*
atom -> [ test_list ]
519
<=
atom -> [ test_list ]
519
>>
atom -> [ test_list ]
519
%
atom -> [ test_list ]
519
:
atom -> [ test_list ]
519
or
atom -> [ test_list ]
519
^
atom -> [ test_list ]
519
!=
atom -> [ test_list ]
519
/
atom -> [ test_list ]
519
+
atom -> [ test_list ]
519
//
atom -> [ test_list ]
520
<=
xor_expr -> and_expr ^ xor_expr
520
and
xor_expr -> and_expr ^ xor_expr
520
:
xor_expr -> and_expr ^ xor_expr
520
>
xor_expr -> and_expr ^ xor_expr
520
!=
xor_expr -> and_expr ^ xor_expr
520
or
xor_expr -> and_expr ^ xor_expr
520
<
xor_expr -> and_expr ^ xor_expr
520
==
xor_expr -> and_expr ^ xor_expr
520
>=
xor_expr -> and_expr ^ xor_expr
520
|
xor_expr -> and_expr ^ xor_expr
520
to
xor_expr -> and_expr ^ xor_expr
521
:
or_test -> and_test or or_test
521
to
or_test -> and_test or or_test
522
to
and_test -> not_test and and_test
522
:
and_test -> not_test and and_test
522
or
and_test -> not_test and and_test
523
or
comparison -> expr comp_op comparison
523
:
comparison -> expr comp_op comparison
523
and
comparison -> expr comp_op comparison
523
to
comparison -> expr comp_op comparison
524
return
suite -> NEWLINE INDENT stmt_list DEDENT
524
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
524
endloop
suite -> NEWLINE INDENT stmt_list DEDENT
524
if
suite -> NEWLINE INDENT stmt_list DEDENT
524
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
524
nextloop
suite -> NEWLINE INDENT stmt_list DEDENT
524
loop
suite -> NEWLINE INDENT stmt_list DEDENT
524
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
524
var
suite -> NEWLINE INDENT stmt_list DEDENT
525
DEDENT
552
526
NEWLINE
358
526
suite
553
527
>
call -> NAME ( test_list )
527
^
call -> NAME ( test_list )
527
==
call -> NAME ( test_list )
527
<
call -> NAME ( test_list )
527
-
call -> NAME ( test_list )
527
&
call -> NAME ( test_list )
527
<=
call -> NAME ( test_list )
527
%
call -> NAME ( test_list )
527
*
call -> NAME ( test_list )
527
and
call -> NAME ( test_list )
527
/
call -> NAME ( test_list )
527
+
call -> NAME ( test_list )
527
to
call -> NAME ( test_list )
527
>=
call -> NAME ( test_list )
527
|
call -> NAME ( test_list )
527
**
call -> NAME ( test_list )
527
or
call -> NAME ( test_list )
527
:
call -> NAME ( test_list )
527
>>
call -> NAME ( test_list )
527
//
call -> NAME ( test_list )
527
!=
call -> NAME ( test_list )
527
<<
call -> NAME ( test_list )
528
NAME
487
528
power
483
528
atom
484
528
[
496
528
NUMBER
493
528
STRING
495
528
~
508
528
-
486
528
True
501
528
False
488
528
None
505
528
+
498
528
call
499
528
factor
554
529
NAME
487
529
arith_expr
490
529
power
483
529
atom
484
529
[
496
529
factor
494
529
NUMBER
493
529
STRING
495
529
shift_expr
485
529
-
486
529
~
508
529
True
501
529
False
488
529
term
489
529
None
505
529
+
498
529
call
499
529
and_expr
555
530
<=
factor -> - factor
530
by
factor -> - factor
530
//
factor -> - factor
530
>>
factor -> - factor
530
or
factor -> - factor
530
+
factor -> - factor
530
^
factor -> - factor
530
-
factor -> - factor
530
and
factor -> - factor
530
%
factor -> - factor
530
>=
factor -> - factor
530
!=
factor -> - factor
530
<
factor -> - factor
530
|
factor -> - factor
530
:
factor -> - factor
530
*
factor -> - factor
530
==
factor -> - factor
530
/
factor -> - factor
530
>
factor -> - factor
530
&
factor -> - factor
530
<<
factor -> - factor
531
)
556
531
power
125
531
~
126
531
atom
127
531
None
128
531
shift_expr
129
531
-
130
531
NAME
131
531
NUMBER
132
531
False
133
531
term
134
531
arith_expr
135
531
xor_expr
136
531
factor
137
531
STRING
138
531
[
140
531
and_expr
141
531
+
142
531
call
143
531
test_list
557
531
not
144
531
True
145
531
comparison
146
531
and_test
147
531
not_test
148
531
expr
149
531
test
150
531
or_test
151
532
NAME
487
532
power
483
532
atom
484
532
[
496
532
factor
494
532
NUMBER
493
532
STRING
495
532
-
486
532
~
508
532
True
501
532
False
488
532
term
489
532
None
505
532
arith_expr
558
532
+
498
532
call
499
533
NAME
487
533
power
483
533
atom
484
533
[
496
533
factor
494
533
NUMBER
493
533
STRING
495
533
-
486
533
~
508
533
True
501
533
False
488
533
term
489
533
None
505
533
+
498
533
call
499
533
arith_expr
559
534
NAME
487
534
arith_expr
490
534
power
483
534
atom
484
534
[
496
534
factor
494
534
NUMBER
493
534
STRING
495
534
shift_expr
560
534
-
486
534
~
508
534
True
501
534
False
488
534
term
489
534
None
505
534
+
498
534
call
499
535
NAME
487
535
arith_expr
490
535
power
483
535
atom
484
535
[
496
535
factor
494
535
NUMBER
493
535
STRING
495
535
-
486
535
~
508
535
True
501
535
False
488
535
term
489
535
None
505
535
+
498
535
shift_expr
561
535
call
499
536
suite
562
536
NEWLINE
358
537
NAME
305
537
arith_expr
306
537
power
307
537
atom
308
537
[
309
537
factor
310
537
NUMBER
311
537
STRING
312
537
or_test
313
537
shift_expr
314
537
-
315
537
~
316
537
True
317
537
False
318
537
term
319
537
None
320
537
xor_expr
321
537
+
322
537
and_expr
323
537
call
324
537
test
563
537
and_test
326
537
comparison
327
537
not_test
328
537
expr
329
537
not
330
538
NAME
487
538
arith_expr
490
538
power
483
538
atom
484
538
[
496
538
factor
494
538
NUMBER
493
538
STRING
495
538
shift_expr
485
538
-
486
538
~
508
538
True
501
538
False
488
538
term
489
538
None
505
538
xor_expr
492
538
+
498
538
and_expr
497
538
call
499
538
expr
564
539
NAME
487
539
power
483
539
atom
484
539
[
496
539
factor
494
539
NUMBER
493
539
STRING
495
539
-
486
539
~
508
539
True
501
539
False
488
539
None
505
539
term
565
539
+
498
539
call
499
540
NAME
487
540
power
483
540
atom
484
540
[
496
540
factor
494
540
NUMBER
493
540
STRING
495
540
-
486
540
~
508
540
True
501
540
False
488
540
None
505
540
+
498
540
term
566
540
call
499
541
term
567
541
NAME
487
541
power
483
541
atom
484
541
[
496
541
factor
494
541
NUMBER
493
541
STRING
495
541
-
486
541
~
508
541
True
501
541
False
488
541
None
505
541
+
498
541
call
499
542
NAME
487
542
power
483
542
atom
484
542
[
496
542
factor
494
542
NUMBER
493
542
STRING
495
542
-
486
542
~
508
542
True
501
542
False
488
542
None
505
542
+
498
542
call
499
542
term
568
543
>
atom -> [ ]
543
<<
atom -> [ ]
543
**
atom -> [ ]
543
-
atom -> [ ]
543
/
atom -> [ ]
543
//
atom -> [ ]
543
^
atom -> [ ]
543
&
atom -> [ ]
543
or
atom -> [ ]
543
+
atom -> [ ]
543
:
atom -> [ ]
543
!=
atom -> [ ]
543
<=
atom -> [ ]
543
>>
atom -> [ ]
543
and
atom -> [ ]
543
|
atom -> [ ]
543
>=
atom -> [ ]
543
==
atom -> [ ]
543
*
atom -> [ ]
543
%
atom -> [ ]
543
<
atom -> [ ]
543
by
atom -> [ ]
544
]
569
545
NAME
487
545
arith_expr
490
545
power
483
545
atom
484
545
[
496
545
factor
494
545
NUMBER
493
545
STRING
495
545
shift_expr
485
545
-
486
545
~
508
545
True
501
545
False
488
545
term
489
545
None
505
545
+
498
545
and_expr
497
545
call
499
545
xor_expr
570
546
+
factor -> + factor
546
:
factor -> + factor
546
<<
factor -> + factor
546
<=
factor -> + factor
546
<
factor -> + factor
546
//
factor -> + factor
546
>
factor -> + factor
546
*
factor -> + factor
546
by
factor -> + factor
546
%
factor -> + factor
546
>=
factor -> + factor
546
/
factor -> + factor
546
-
factor -> + factor
546
>>
factor -> + factor
546
or
factor -> + factor
546
&
factor -> + factor
546
^
factor -> + factor
546
==
factor -> + factor
546
and
factor -> + factor
546
|
factor -> + factor
546
!=
factor -> + factor
547
power
483
547
atom
484
547
shift_expr
485
547
-
486
547
NAME
487
547
False
488
547
term
489
547
arith_expr
490
547
xor_expr
492
547
NUMBER
493
547
factor
494
547
STRING
495
547
[
496
547
and_expr
497
547
+
498
547
call
499
547
or_test
571
547
True
501
547
and_test
502
547
comparison
503
547
not_test
504
547
None
505
547
not
506
547
expr
507
547
~
508
548
power
483
548
atom
484
548
shift_expr
485
548
-
486
548
NAME
487
548
False
488
548
term
489
548
arith_expr
490
548
xor_expr
492
548
NUMBER
493
548
factor
494
548
STRING
495
548
[
496
548
and_expr
497
548
+
498
548
call
499
548
True
501
548
and_test
572
548
comparison
503
548
not_test
504
548
None
505
548
not
506
548
expr
507
548
~
508
549
and
not_test -> not not_test
549
by
not_test -> not not_test
549
:
not_test -> not not_test
549
or
not_test -> not not_test
550
power
483
550
atom
484
550
shift_expr
485
550
-
486
550
NAME
487
550
False
488
550
term
489
550
arith_expr
490
550
comparison
573
550
xor_expr
492
550
NUMBER
493
550
factor
494
550
STRING
495
550
[
496
550
and_expr
497
550
+
498
550
call
499
550
True
501
550
None
505
550
expr
507
550
~
508
551
>
factor -> ~ factor
551
%
factor -> ~ factor
551
<=
factor -> ~ factor
551
|
factor -> ~ factor
551
*
factor -> ~ factor
551
//
factor -> ~ factor
551
-
factor -> ~ factor
551
<
factor -> ~ factor
551
^
factor -> ~ factor
551
:
factor -> ~ factor
551
>>
factor -> ~ factor
551
!=
factor -> ~ factor
551
/
factor -> ~ factor
551
and
factor -> ~ factor
551
by
factor -> ~ factor
551
>=
factor -> ~ factor
551
==
factor -> ~ factor
551
or
factor -> ~ factor
551
&
factor -> ~ factor
551
<<
factor -> ~ factor
551
+
factor -> ~ factor
552
return
suite -> NEWLINE INDENT stmt_list DEDENT
552
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
552
endloop
suite -> NEWLINE INDENT stmt_list DEDENT
552
if
suite -> NEWLINE INDENT stmt_list DEDENT
552
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
552
nextloop
suite -> NEWLINE INDENT stmt_list DEDENT
552
loop
suite -> NEWLINE INDENT stmt_list DEDENT
552
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
552
var
suite -> NEWLINE INDENT stmt_list DEDENT
552
else
suite -> NEWLINE INDENT stmt_list DEDENT
553
endloop
if_stmt -> if test : suite else : suite
553
NEWLINE
if_stmt -> if test : suite else : suite
553
if
if_stmt -> if test : suite else : suite
553
NAME
if_stmt -> if test : suite else : suite
553
loop
if_stmt -> if test : suite else : suite
553
var
if_stmt -> if test : suite else : suite
553
return
if_stmt -> if test : suite else : suite
553
nextloop
if_stmt -> if test : suite else : suite
553
DEDENT
if_stmt -> if test : suite else : suite
554
%
power -> atom ** factor
554
>=
power -> atom ** factor
554
==
power -> atom ** factor
554
<
power -> atom ** factor
554
/
power -> atom ** factor
554
-
power -> atom ** factor
554
>
power -> atom ** factor
554
:
power -> atom ** factor
554
or
power -> atom ** factor
554
<<
power -> atom ** factor
554
by
power -> atom ** factor
554
//
power -> atom ** factor
554
|
power -> atom ** factor
554
&
power -> atom ** factor
554
<=
power -> atom ** factor
554
>>
power -> atom ** factor
554
^
power -> atom ** factor
554
+
power -> atom ** factor
554
*
power -> atom ** factor
554
and
power -> atom ** factor
554
!=
power -> atom ** factor
555
>=
and_expr -> shift_expr & and_expr
555
<=
and_expr -> shift_expr & and_expr
555
by
and_expr -> shift_expr & and_expr
555
and
and_expr -> shift_expr & and_expr
555
:
and_expr -> shift_expr & and_expr
555
|
and_expr -> shift_expr & and_expr
555
>
and_expr -> shift_expr & and_expr
555
<
and_expr -> shift_expr & and_expr
555
!=
and_expr -> shift_expr & and_expr
555
^
and_expr -> shift_expr & and_expr
555
or
and_expr -> shift_expr & and_expr
555
==
and_expr -> shift_expr & and_expr
556
>
call -> NAME ( )
556
%
call -> NAME ( )
556
by
call -> NAME ( )
556
:
call -> NAME ( )
556
<=
call -> NAME ( )
556
&
call -> NAME ( )
556
*
call -> NAME ( )
556
and
call -> NAME ( )
556
//
call -> NAME ( )
556
==
call -> NAME ( )
556
**
call -> NAME ( )
556
/
call -> NAME ( )
556
or
call -> NAME ( )
556
<<
call -> NAME ( )
556
>=
call -> NAME ( )
556
^
call -> NAME ( )
556
<
call -> NAME ( )
556
!=
call -> NAME ( )
556
>>
call -> NAME ( )
556
-
call -> NAME ( )
556
+
call -> NAME ( )
556
|
call -> NAME ( )
557
)
574
558
<=
arith_expr -> term + arith_expr
558
>
arith_expr -> term + arith_expr
558
>=
arith_expr -> term + arith_expr
558
by
arith_expr -> term + arith_expr
558
==
arith_expr -> term + arith_expr
558
!=
arith_expr -> term + arith_expr
558
<
arith_expr -> term + arith_expr
558
:
arith_expr -> term + arith_expr
558
&
arith_expr -> term + arith_expr
558
<<
arith_expr -> term + arith_expr
558
or
arith_expr -> term + arith_expr
558
and
arith_expr -> term + arith_expr
558
^
arith_expr -> term + arith_expr
558
>>
arith_expr -> term + arith_expr
558
|
arith_expr -> term + arith_expr
559
>>
arith_expr -> term - arith_expr
559
>=
arith_expr -> term - arith_expr
559
<=
arith_expr -> term - arith_expr
559
by
arith_expr -> term - arith_expr
559
<
arith_expr -> term - arith_expr
559
or
arith_expr -> term - arith_expr
559
:
arith_expr -> term - arith_expr
559
|
arith_expr -> term - arith_expr
559
&
arith_expr -> term - arith_expr
559
!=
arith_expr -> term - arith_expr
559
and
arith_expr -> term - arith_expr
559
<<
arith_expr -> term - arith_expr
559
^
arith_expr -> term - arith_expr
559
>
arith_expr -> term - arith_expr
559
==
arith_expr -> term - arith_expr
560
|
shift_expr -> arith_expr >> shift_expr
560
and
shift_expr -> arith_expr >> shift_expr
560
^
shift_expr -> arith_expr >> shift_expr
560
by
shift_expr -> arith_expr >> shift_expr
560
or
shift_expr -> arith_expr >> shift_expr
560
<=
shift_expr -> arith_expr >> shift_expr
560
>
shift_expr -> arith_expr >> shift_expr
560
==
shift_expr -> arith_expr >> shift_expr
560
!=
shift_expr -> arith_expr >> shift_expr
560
<
shift_expr -> arith_expr >> shift_expr
560
&
shift_expr -> arith_expr >> shift_expr
560
>=
shift_expr -> arith_expr >> shift_expr
560
:
shift_expr -> arith_expr >> shift_expr
561
by
shift_expr -> arith_expr << shift_expr
561
<=
shift_expr -> arith_expr << shift_expr
561
<
shift_expr -> arith_expr << shift_expr
561
or
shift_expr -> arith_expr << shift_expr
561
==
shift_expr -> arith_expr << shift_expr
561
>=
shift_expr -> arith_expr << shift_expr
561
:
shift_expr -> arith_expr << shift_expr
561
|
shift_expr -> arith_expr << shift_expr
561
&
shift_expr -> arith_expr << shift_expr
561
!=
shift_expr -> arith_expr << shift_expr
561
^
shift_expr -> arith_expr << shift_expr
561
>
shift_expr -> arith_expr << shift_expr
561
and
shift_expr -> arith_expr << shift_expr
562
if
loop_stmt -> loop NAME from test to test : suite
562
DEDENT
loop_stmt -> loop NAME from test to test : suite
562
return
loop_stmt -> loop NAME from test to test : suite
562
nextloop
loop_stmt -> loop NAME from test to test : suite
562
NAME
loop_stmt -> loop NAME from test to test : suite
562
endloop
loop_stmt -> loop NAME from test to test : suite
562
NEWLINE
loop_stmt -> loop NAME from test to test : suite
562
loop
loop_stmt -> loop NAME from test to test : suite
562
var
loop_stmt -> loop NAME from test to test : suite
563
:
575
564
==
expr -> xor_expr | expr
564
:
expr -> xor_expr | expr
564
or
expr -> xor_expr | expr
564
and
expr -> xor_expr | expr
564
!=
expr -> xor_expr | expr
564
by
expr -> xor_expr | expr
564
<
expr -> xor_expr | expr
564
>=
expr -> xor_expr | expr
564
>
expr -> xor_expr | expr
564
<=
expr -> xor_expr | expr
565
<
term -> factor // term
565
^
term -> factor // term
565
by
term -> factor // term
565
&
term -> factor // term
565
or
term -> factor // term
565
!=
term -> factor // term
565
>=
term -> factor // term
565
-
term -> factor // term
565
<=
term -> factor // term
565
<<
term -> factor // term
565
>
term -> factor // term
565
|
term -> factor // term
565
==
term -> factor // term
565
+
term -> factor // term
565
and
term -> factor // term
565
>>
term -> factor // term
565
:
term -> factor // term
566
by
term -> factor * term
566
<
term -> factor * term
566
|
term -> factor * term
566
or
term -> factor * term
566
>>
term -> factor * term
566
:
term -> factor * term
566
<=
term -> factor * term
566
==
term -> factor * term
566
>=
term -> factor * term
566
^
term -> factor * term
566
-
term -> factor * term
566
<<
term -> factor * term
566
>
term -> factor * term
566
!=
term -> factor * term
566
and
term -> factor * term
566
+
term -> factor * term
566
&
term -> factor * term
567
<
term -> factor % term
567
>
term -> factor % term
567
<<
term -> factor % term
567
<=
term -> factor % term
567
-
term -> factor % term
567
!=
term -> factor % term
567
or
term -> factor % term
567
and
term -> factor % term
567
:
term -> factor % term
567
+
term -> factor % term
567
^
term -> factor % term
567
|
term -> factor % term
567
==
term -> factor % term
567
>>
term -> factor % term
567
by
term -> factor % term
567
&
term -> factor % term
567
>=
term -> factor % term
568
by
term -> factor / term
568
>
term -> factor / term
568
or
term -> factor / term
568
<=
term -> factor / term
568
|
term -> factor / term
568
+
term -> factor / term
568
==
term -> factor / term
568
<<
term -> factor / term
568
and
term -> factor / term
568
!=
term -> factor / term
568
^
term -> factor / term
568
<
term -> factor / term
568
-
term -> factor / term
568
>>
term -> factor / term
568
&
term -> factor / term
568
:
term -> factor / term
568
>=
term -> factor / term
569
**
atom -> [ test_list ]
569
>
atom -> [ test_list ]
569
>=
atom -> [ test_list ]
569
&
atom -> [ test_list ]
569
<<
atom -> [ test_list ]
569
-
atom -> [ test_list ]
569
<
atom -> [ test_list ]
569
==
atom -> [ test_list ]
569
and
atom -> [ test_list ]
569
|
atom -> [ test_list ]
569
*
atom -> [ test_list ]
569
<=
atom -> [ test_list ]
569
>>
atom -> [ test_list ]
569
%
atom -> [ test_list ]
569
:
atom -> [ test_list ]
569
or
atom -> [ test_list ]
569
^
atom -> [ test_list ]
569
by
atom -> [ test_list ]
569
!=
atom -> [ test_list ]
569
/
atom -> [ test_list ]
569
+
atom -> [ test_list ]
569
//
atom -> [ test_list ]
570
<=
xor_expr -> and_expr ^ xor_expr
570
and
xor_expr -> and_expr ^ xor_expr
570
:
xor_expr -> and_expr ^ xor_expr
570
!=
xor_expr -> and_expr ^ xor_expr
570
or
xor_expr -> and_expr ^ xor_expr
570
<
xor_expr -> and_expr ^ xor_expr
570
==
xor_expr -> and_expr ^ xor_expr
570
>=
xor_expr -> and_expr ^ xor_expr
570
|
xor_expr -> and_expr ^ xor_expr
570
>
xor_expr -> and_expr ^ xor_expr
570
by
xor_expr -> and_expr ^ xor_expr
571
:
or_test -> and_test or or_test
571
by
or_test -> and_test or or_test
572
or
and_test -> not_test and and_test
572
:
and_test -> not_test and and_test
572
by
and_test -> not_test and and_test
573
or
comparison -> expr comp_op comparison
573
:
comparison -> expr comp_op comparison
573
and
comparison -> expr comp_op comparison
573
by
comparison -> expr comp_op comparison
574
>
call -> NAME ( test_list )
574
by
call -> NAME ( test_list )
574
^
call -> NAME ( test_list )
574
==
call -> NAME ( test_list )
574
<
call -> NAME ( test_list )
574
-
call -> NAME ( test_list )
574
&
call -> NAME ( test_list )
574
<=
call -> NAME ( test_list )
574
%
call -> NAME ( test_list )
574
*
call -> NAME ( test_list )
574
and
call -> NAME ( test_list )
574
/
call -> NAME ( test_list )
574
+
call -> NAME ( test_list )
574
>=
call -> NAME ( test_list )
574
|
call -> NAME ( test_list )
574
**
call -> NAME ( test_list )
574
or
call -> NAME ( test_list )
574
:
call -> NAME ( test_list )
574
>>
call -> NAME ( test_list )
574
//
call -> NAME ( test_list )
574
!=
call -> NAME ( test_list )
574
<<
call -> NAME ( test_list )
575
NEWLINE
358
575
suite
576
576
return
loop_stmt -> loop NAME from test to test by test : suite
576
var
loop_stmt -> loop NAME from test to test by test : suite
576
NAME
loop_stmt -> loop NAME from test to test by test : suite
576
endloop
loop_stmt -> loop NAME from test to test by test : suite
576
loop
loop_stmt -> loop NAME from test to test by test : suite
576
NEWLINE
loop_stmt -> loop NAME from test to test by test : suite
576
DEDENT
loop_stmt -> loop NAME from test to test by test : suite
576
if
loop_stmt -> loop NAME from test to test by test : suite
576
nextloop
loop_stmt -> loop NAME from test to test by test : suite
