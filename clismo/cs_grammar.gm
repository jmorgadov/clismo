# Clismo Programming Language grammar.

program:
    | obj_def program
    | NEWLINE program
    | EPS

obj_def:
    | client_def
    | server_def
    | step_def
    | sim_def

client_def:
    | 'client' NAME ':' obj_def_body

server_def:
    | 'server' NAME ':' obj_def_body

step_def:
    | 'step' NAME ':' obj_def_body

sim_def:
    | 'simulation' NAME ':' obj_def_body

obj_def_body: NEWLINE INDENT obj_stmt_list DEDENT

obj_stmt_list:
    | obj_stmt obj_stmt_list
    | NEWLINE obj_stmt_list
    | EPS

obj_stmt:
    | NAME '=' test
    | func_def

suite: NEWLINE INDENT stmt_list DEDENT

func_def:
    | NAME '(' name_list ')' ':' suite

name_list:
    | NAME name_list
    | EPS

stmt_list:
    | stmt stmt_list
    | NEWLINE stmt_list
    | EPS

stmt: decl_stmt
    | assign_stmt
    | if_stmt
    | loop_stmt
    | return_stmt
    | flow_stmt
	| call

decl_stmt: 'var' NAME '=' test

assign_stmt: NAME '=' test

if_stmt:
    | 'if' test ':' suite
    | 'if' test ':' suite 'else' ':' suite

loop_stmt:
    | 'loop' ':' suite
    | 'loop' NAME ':' suite
    | 'loop' NAME 'from' test ':' suite
    | 'loop' NAME 'from' test 'to' test ':' suite
    | 'loop' NAME 'from' test 'to' test 'by' test ':' suite

flow_stmt:
    | 'endloop'
    | 'nextloop'

return_stmt: 'return' test

test: or_test

or_test:
    | and_test
    | and_test 'or' or_test

and_test:
    | not_test
    | not_test 'and' and_test

not_test:
    | 'not' not_test
    | comparison
   
comparison:
    | expr
    | expr comp_op comparison

comp_op: '<' | '>' | '==' | '>=' | '<=' | '!='

expr: xor_expr
    | xor_expr '|' expr

xor_expr:
    | and_expr
    | and_expr '^' xor_expr

and_expr:
    | shift_expr
    | shift_expr '&' and_expr

shift_expr:
    | arith_expr
    | arith_expr '<<' shift_expr
    | arith_expr '>>' shift_expr

arith_expr:
    | term
    | term '+' arith_expr
    | term '-' arith_expr

term:
    | factor
    | factor '*' term
    | factor '/' term
    | factor '%' term
    | factor '//' term

factor:
    | '+' factor
    | '-' factor
    | '~' factor
    | power

power:
    | atom
    | atom '**' factor

atom: '[' test_list ']'
    | NAME | NUMBER | STRING
    | 'None' | 'True' | 'False'
    | call

call:
    | NAME '(' ')'
    | NAME '(' test_list ')'

test_list:
    | test
    | test ',' test_list
